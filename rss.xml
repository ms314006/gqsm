<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[神 Q 超人]]></title><description><![CDATA[Enjoy life enjoy coding]]></description><link>https://ms314006.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 11 Oct 2021 11:51:31 GMT</lastBuildDate><item><title><![CDATA[JavaScript | Let's going to know about Queue structure!]]></title><description><![CDATA[Hi guys! I am Clark, in the post I am going to try to through JavaScript share and implement Queue data structure, and I will pick the…]]></description><link>https://ms314006.github.io/let-us-going-to-know-about-queue-structure/</link><guid isPermaLink="false">https://ms314006.github.io/let-us-going-to-know-about-queue-structure/</guid><pubDate>Mon, 11 Oct 2021 20:03:59 GMT</pubDate><content:encoded>&lt;p&gt;Hi guys! I am Clark, in the post I am going to try to through JavaScript share and implement Queue data structure, and I will pick the problem about Queue from the Leetcode! Let you guys know more about the application of Queue.&lt;/p&gt;
&lt;h2&gt;Queue&lt;/h2&gt;
&lt;p&gt;Data structure Queue is like the line up. If you want to pay for something, but the clerk is handling the first person of front you, at the situation, you need to in line and be the second person, if other people want to pay, he also need to in line. Until the clerk have handled the first people, you will become the first people.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Such process of FIFO(First in, first out) is what Queue structure doing and limiting.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, the time complexity also is the point of Queue. For Queue, the execute time will same when you put in or take out item from Queue, whether the Queue own how many items. &lt;strong&gt;Queue have constant time complexity, that is O(1) time complexity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So next we are going to stage of implement Queue!&lt;/p&gt;
&lt;h3&gt;Implement Queue&lt;/h3&gt;
&lt;p&gt;Because JavaScript didn’t provide Queue structure, so if we want to use Queue structure in JavaScript then we need to implement by ourself.&lt;/p&gt;
&lt;p&gt;So what is the method Queue need to use? For a simple Queue, the most basic methods is putting and taking items, that is the enqueue and dequeue.&lt;/p&gt;
&lt;p&gt;First, create a Class named Queue, and declare &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;enqueue&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;dequeue&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the choice of implement way, though we can direct array structure of JavaScript and array methods, like below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// put 1, current Queue: [1]&lt;/span&gt;
queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// put 2, current Queue: [2, 1]&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// took 1, current Queue: [2]&lt;/span&gt;

queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// put 3, current Queue: [3, 2]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// took 2, current Queue: [3]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looks like we have completed the FIFO part, but according to &lt;a href=&quot;https://medium.com/@brayce1996/%E6%96%87%E4%B8%AD%E6%8F%90%E5%88%B0%E7%94%A8unshift%E5%AF%A6%E4%BD%9Cenqueue-%E5%8A%9F%E8%83%BD%E9%9B%96%E8%83%BD%E9%81%94%E5%88%B0fifo-%E4%BD%86%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E5%8D%BB%E4%B8%8D%E5%90%88%E6%A8%99%E6%BA%96-%E5%9B%A0%E7%82%BAunshift%E7%9A%84time-complexity%E5%AF%A6%E7%82%BAo-n-%E8%80%8C%E9%9D%9Eo-1-6af888f7d186&quot;&gt;this comment&lt;/a&gt;, the execute time of unshift would depend the array own how many items, the below test case is from the comment:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inq6ovqcj08pl0kf9x50.png&quot; alt=&quot;Screen Shot 2021-10-10 at 10.16.29 PM&quot;&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code class=&quot;language-text&quot;&gt;unshift&lt;/code&gt; is O(1) time complexity, then whether at any situation, the execute time of &lt;code class=&quot;language-text&quot;&gt;unshift&lt;/code&gt; should not be different. base on the above reason, so we can not implement Queue by array.&lt;/p&gt;
&lt;p&gt;Let’s think a different angle. besides the array of JavaScript, We can through object of JavaScript create a mapping table:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tail &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
  &lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tail&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tail &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
  &lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tail &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// put 1, current Queue: [1]&lt;/span&gt;
queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// put 2, current Queue: [2, 1]&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// took 1, current Queue: [2]&lt;/span&gt;

queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// put 3, current Queue: [3, 2]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// took 2, current Queue: [3]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result of execute is as same as implement by array. The above implement way is through &lt;code class=&quot;language-text&quot;&gt;tail&lt;/code&gt; as the position to put new items, and &lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt; is the position to take out items. Add &lt;code class=&quot;language-text&quot;&gt;tail&lt;/code&gt; by 1 when &lt;code class=&quot;language-text&quot;&gt;enqueue&lt;/code&gt;, delete the item of &lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt; position and add &lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt; by 1 when &lt;code class=&quot;language-text&quot;&gt;dequeue&lt;/code&gt;, because after we take out the item, the item will vanish from the queue.&lt;/p&gt;
&lt;p&gt;Also because we implement through mapping table of object, so whether the Queue own how many items, the execute time of I put in or take out items from the Queue is same, that is O(1) time complexity. In this way, the above implement for Queue have followed the FIFO and time complexity of Queue. 🎉&lt;/p&gt;
&lt;h2&gt;The Problem About Queue&lt;/h2&gt;
&lt;p&gt;In the last section of this article, we are going to solve the problem of Leetcode, &lt;a href=&quot;https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/&quot;&gt;1700. Number of Students Unable to Eat Lunch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Put simply, the problem would give you two arrays, the first is students, the second is sandwiches. The value of the student and sandwiches would be 1 or 0, The student who value is 1 only take out the sandwich which value is 1, the student who value is 0 only take out the sandwich which value is 0. If the first sandwich is not up the first student street, the student will moved to the end of array, but if the first sandwich happens is up the first student street, the first student will take out the first sandwich and leave the array.&lt;/p&gt;
&lt;p&gt;This continues until none of the students want to take the first sandwich, and we need to return how many student unable to eat sandwiches. So there are three situation:&lt;/p&gt;
&lt;h3&gt;situation 1&lt;/h3&gt;
&lt;p&gt;Students: [1,0,1,0] Sandwiches: [0,1,1]
Because the first student is 1, he will not take out the first sandwich which value is 0, so he will go to the end of array.
Students: [0,1,0,1] Sandwiches: [0,1,1]&lt;/p&gt;
&lt;h3&gt;situation 2&lt;/h3&gt;
&lt;p&gt;Students: [0,1,0,1] Sandwiches: [0,1,1]
Because the first student is 0, so he will take out the first sandwich which value is 0 and leave the array.
Students: [1,0,1] Sandwiches: [1,1]&lt;/p&gt;
&lt;h3&gt;situation 3&lt;/h3&gt;
&lt;p&gt;Students: [1,1,1] Sandwiches: [0,1,1]
The first sandwich value is 0, so have no any students want to take out the sandwich, hence there are three students unable eat sandwiches, return 3.&lt;/p&gt;
&lt;p&gt;The way of solve problem need to put all students into the Queue, and use loop take the first students, check if the student want to eat the current the first sandwich, if the student want then take out the sandwich, else we need to put the student back to Queue. We can end the loop and return the count of students when have no any students want to take out the first sandwich.&lt;/p&gt;
&lt;p&gt;Tidy up the above thinking, the solution is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyQueue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/*
  constructor
  enqueue
  dequeue
  */&lt;/span&gt;
    
  &lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; item
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;token function&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tail &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;countStudents&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;students&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sandwiches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; studentQueue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  students&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    studentQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;student&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;studentQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sandwiches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; firstStudent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; studentQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstStudent &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; sandwiches&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      sandwiches&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      studentQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstStudent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; studentQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I added the &lt;code class=&quot;language-text&quot;&gt;contains&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;getSize&lt;/code&gt; methods in the MyQueue implement besides &lt;code class=&quot;language-text&quot;&gt;enqueue&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;dequeue&lt;/code&gt;. The &lt;code class=&quot;language-text&quot;&gt;contains&lt;/code&gt; can help me check if any students want to take out the first sandwich, and the &lt;code class=&quot;language-text&quot;&gt;getSize&lt;/code&gt; is help me to return remaining count of students.&lt;/p&gt;
&lt;p&gt;Beside the above problem, if you want to find more problem to practice Queue, there are some interesting problem about Queue in the Leetcode, like &lt;a href=&quot;https://leetcode.com/problems/design-front-middle-back-queue/&quot;&gt;1670. Design Front Middle Back Queue&lt;/a&gt; or &lt;a href=&quot;https://leetcode.com/problems/implement-stack-using-queues/&quot;&gt;225. Implement Stack using Queues&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Final word&lt;/h2&gt;
&lt;p&gt;At the begin of this article, I introduce the Queue data structure, and explain how to implement by JavaScript, then in the last of the article I solved a problem about Queue!&lt;/p&gt;
&lt;p&gt;If above have any problem or mistake point, please comment below, I will reply as soon as I can! thanks for any response! &lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Queue_(abstract_data_type)&quot;&gt;Queue (abstract data type)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://popovich.io/2020/2020-04-07-queue-javascript/&quot;&gt;How To Implement a Queue in JavaScript - and Beat Arrays at Their Own Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@brayce1996/%E6%96%87%E4%B8%AD%E6%8F%90%E5%88%B0%E7%94%A8unshift%E5%AF%A6%E4%BD%9Cenqueue-%E5%8A%9F%E8%83%BD%E9%9B%96%E8%83%BD%E9%81%94%E5%88%B0fifo-%E4%BD%86%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E5%8D%BB%E4%B8%8D%E5%90%88%E6%A8%99%E6%BA%96-%E5%9B%A0%E7%82%BAunshift%E7%9A%84time-complexity%E5%AF%A6%E7%82%BAo-n-%E8%80%8C%E9%9D%9Eo-1-6af888f7d186&quot;&gt;The comment about test time complexity of &lt;code class=&quot;language-text&quot;&gt;unshift&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@shakusky?utm_source=unsplash&amp;#x26;utm_medium=referral&amp;#x26;utm_content=creditCopyText&quot;&gt;Zichao Zhang&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/queue?utm_source=unsplash&amp;#x26;utm_medium=referral&amp;#x26;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React | Write a unit test for custom hooks in ten minutes]]></title><description><![CDATA[Hello guys! I am Clark! I am going to sharing how to write a unit test for custom hooks! Custom Hooks Before we write the first unit test…]]></description><link>https://ms314006.github.io/write-a-unit-test-for-custom-hooks-in-ten-minutes/</link><guid isPermaLink="false">https://ms314006.github.io/write-a-unit-test-for-custom-hooks-in-ten-minutes/</guid><pubDate>Mon, 04 Oct 2021 22:03:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys! I am Clark! I am going to sharing how to write a unit test for custom hooks!&lt;/p&gt;
&lt;h1&gt;Custom Hooks&lt;/h1&gt;
&lt;p&gt;Before we write the first unit test, we should have a custom hooks first. If you don’t understand what is the custom hooks, I recommend you can read the &lt;a href=&quot;https://reactjs.org/docs/hooks-custom.html&quot;&gt;official document about custom hooks&lt;/a&gt; first, or if you already known what is the custom hooks, you can continue to read:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;addend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; addend&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; add &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; useCounter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above code snippet is a custom hooks name &lt;code class=&quot;language-text&quot;&gt;useCounter&lt;/code&gt;, the &lt;code class=&quot;language-text&quot;&gt;useCounter&lt;/code&gt; would manage the logic about counter. The return object include a current count and method of increase current count. On the other hand, &lt;code class=&quot;language-text&quot;&gt;useCounter&lt;/code&gt; receive two parameters, the first is the initial value of count, the second is a callback function, the callback function will execute after count changed.&lt;/p&gt;
&lt;p&gt;So we can use &lt;code class=&quot;language-text&quot;&gt;useCounter&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDom &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; useCounter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../hooks/useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; add &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Here is the callBack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


ReactDom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Let’s Test Custom Hooks&lt;/h1&gt;
&lt;h2&gt;Beforehand&lt;/h2&gt;
&lt;p&gt;We would use &lt;a href=&quot;https://github.com/testing-library/react-hooks-testing-library&quot;&gt;react-hooks-testing-library&lt;/a&gt; write the unit test.&lt;/p&gt;
&lt;p&gt;So the first step, we need to install &lt;a href=&quot;https://github.com/testing-library/react-hooks-testing-library&quot;&gt;react-hooks-testing-library&lt;/a&gt; and it dependent packages:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev @testing-library/react-hooks react-test-renderer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remainder, if you never write any unit tests, don’t forget install &lt;a href=&quot;https://jestjs.io/&quot;&gt;jest&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev jest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you installed and we can start to write unit tests! There are two methods we need to know in &lt;a href=&quot;https://github.com/testing-library/react-hooks-testing-library&quot;&gt;react-hooks-testing-library&lt;/a&gt;. The first is &lt;code class=&quot;language-text&quot;&gt;renderHook&lt;/code&gt;, the second is &lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;renderHook&lt;/code&gt;: The &lt;code class=&quot;language-text&quot;&gt;renderHook&lt;/code&gt; can render custom hook, you can operations the custom hook like in the component.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt;: The &lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt; can execute the methods return from custom hook. For example, You can execute the &lt;code class=&quot;language-text&quot;&gt;add&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;useCounter&lt;/code&gt; through &lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok! Let’s write unit test!&lt;/p&gt;
&lt;h2&gt;Case 1&lt;/h2&gt;
&lt;p&gt;The first case is that I want to check default value of &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; will be zero. The unit test doesn’t need to execute any methods so it doesn’t need to use &lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt;, only need &lt;code class=&quot;language-text&quot;&gt;renderHook&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderHook&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; act &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@testing-library/react-hooks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; useCounter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../hooks/useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Default value of &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;count&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; will be zero&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; result &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderHook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;renderHook&lt;/code&gt; will return an object, we can get &lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt; from the object, and &lt;code class=&quot;language-text&quot;&gt;result.current&lt;/code&gt; is the state of custom hooks currently. So the unit test use the &lt;code class=&quot;language-text&quot;&gt;expect&lt;/code&gt; method check the &lt;code class=&quot;language-text&quot;&gt;result.current.count&lt;/code&gt; if to be zero.&lt;/p&gt;
&lt;h2&gt;Case 2&lt;/h2&gt;
&lt;p&gt;The second case is going to check if the &lt;code class=&quot;language-text&quot;&gt;add&lt;/code&gt; could correct change &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderHook&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; act &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@testing-library/react-hooks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; useCounter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../hooks/useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;/* Case 1: Default value of `count` will be zero */&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;The `add` could correct change `count`&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; result &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderHook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, The &lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt; would received the function and execute that.&lt;/p&gt;
&lt;h2&gt;Case 3&lt;/h2&gt;
&lt;p&gt;The third case is going to check if callback function will trigger after the &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; changed. In this case besides the &lt;code class=&quot;language-text&quot;&gt;renderHook&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;act&lt;/code&gt; methods, also will use the mock:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderHook&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; act &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@testing-library/react-hooks&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; useCounter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../hooks/useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;useCounter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;/* Case 1: Default value of `count` will be zero */&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;/* Case 2: The `add` could correct change `count` */&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The callBack function will trigger after add executed&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; callBack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; result &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderHook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// useEffect will execute at begin,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// so after the add function executed, count of callback executed will become to two times.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callBack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;calls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think test custom hooks is easily than test component. But please make sure your version of react, react-dom and react-test-renderer all above 16.9.0, otherwise you will get the error below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39gh1iz6awdkor4xflxt.png&quot; alt=&quot;Screen Shot 2021-10-04 at 9.16.56 PM&quot;&gt;&lt;/p&gt;
&lt;p&gt;I have created the &lt;a href=&quot;https://github.com/ms314006/react-hooks-testing&quot;&gt;repository&lt;/a&gt;, the repository include all above unit test. if you want to try more, just clone!&lt;/p&gt;
&lt;p&gt;If the content of article have any question or you have other opinion for unit test, all welcome to comment below!&lt;/p&gt;
&lt;h1&gt;Thanks&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@neonbrand?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;NeONBRAND&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/write?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Start learn styled components!(3)-You can styling any component you want!]]></title><description><![CDATA[Hello guys, I am Clark! In this post I am going to continue share and practice about more styled components! Styling any component When I…]]></description><link>https://ms314006.github.io/Start-learn-styled-components-You-can-styling-any-component-you-want/</link><guid isPermaLink="false">https://ms314006.github.io/Start-learn-styled-components-You-can-styling-any-component-you-want/</guid><pubDate>Mon, 28 Sep 2020 23:46:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys, I am Clark! In this post I am going to continue share and practice about more styled components!&lt;/p&gt;
&lt;h1&gt;Styling any component&lt;/h1&gt;
&lt;p&gt;When I read this part in documentation of styled component, I think styled component is very powerful for me. In the post that I share about styled component before, we all know the styled can create a component with style you want and we can direct using or expanding it.&lt;/p&gt;
&lt;p&gt;In this chapter, we will learning how to styling existing components instead of HTML tags!&lt;/p&gt;
&lt;h2&gt;Install react-router-dom&lt;/h2&gt;
&lt;p&gt;If we want to practice styling any component, we need to using components other element ui framework provide.&lt;/p&gt;
&lt;p&gt;So first, we need to use react-router-dom in our project(I think this is a common thing), The &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt; provided bu react-router-dom is a prefect component let us try to styling through styled component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm i react-router-dom&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Styling existing component&lt;/h2&gt;
&lt;p&gt;When we finished previous step, we can import &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt; from react-router-dom:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; HashRouter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Link &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashRouter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I am a link&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashRouter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So…should we writing inline style? Link code below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashRouter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &amp;lt;!--inline style--&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; textDecoration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;none&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      I am a link
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashRouter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No!&lt;/h3&gt;
&lt;p&gt;We can wrap the &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt; through like &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt; component of &lt;a href=&quot;https://dev.to/ms314006/start-learn-styled-components-2-extending-styles-ef3&quot;&gt;last post&lt;/a&gt;. The wrap way is same, just give &lt;code class=&quot;language-text&quot;&gt;styled&lt;/code&gt; the &lt;code class=&quot;language-text&quot;&gt;Link&lt;/code&gt; parameter. Code snippet show you different between inline style and through styled component:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; HashRouter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Link &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;styled-components&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; NoneDecorationLink &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  text-decoration: none;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashRouter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &amp;lt;!--inline style--&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; textDecoration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;none&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      I am a link
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Link&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &amp;lt;!--styled component--&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;NoneDecorationLink&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      I am a style link
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;NoneDecorationLink&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HashRouter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think the styled component is clearer than inline style, but the result is same:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/t1qzs0vm8ucvkpov0u8i.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So if we use styled component we don’t need to consider how to expanding components provided by other element ui framework!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Start learn styled components!(2)-Extending Styles]]></title><description><![CDATA[Hello guys, I am Clark! In this post I am going to share more about styled components I learn. If you don’t know what is styled components…]]></description><link>https://ms314006.github.io/start-learn-styled-components-extending-styles/</link><guid isPermaLink="false">https://ms314006.github.io/start-learn-styled-components-extending-styles/</guid><pubDate>Sun, 20 Sep 2020 23:46:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys, I am Clark! In this post I am going to share more about styled components I learn. If you don’t know what is styled components, you can go to last post, I had introduce what is it.&lt;/p&gt;
&lt;h1&gt;Extending Styles&lt;/h1&gt;
&lt;p&gt;If we using styled components in our project then we can through more way like program language to define CSS, the extending styles is good example among styled components.&lt;/p&gt;
&lt;p&gt;We can defined a styled component call &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt;, in this styled component I defined some base CSS:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;styled-components&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;button&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  border: 1px solid black;
  border-radius: 5px;
  font-size: 20px;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Base Button&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result of code above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/fhk79l5p67qnil0s5xx5.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;The button look awesome, but if I want to change color of button’s border and keep others style, what can we do?&lt;/p&gt;
&lt;p&gt;Create another styled components?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; DangerousButton &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;button&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  border: 1px solid red;
  border-radius: 5px;
  font-size: 20px;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;No!&lt;/h3&gt;
&lt;p&gt;You can through extending styles to finish same thing above and more beautiful, easier to maintain.&lt;/p&gt;
&lt;p&gt;The way to using extending styles is give a based styled components when you create a new styled components, like code below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;button&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  border: 1px solid black;
  border-radius: 5px;
  font-size: 20px;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; DangerousButton &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Button&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  border: 1px solid red;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;DangerousButton&lt;/code&gt; will extended style of &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt; and override the style of same setting, such as &lt;code class=&quot;language-text&quot;&gt;border&lt;/code&gt; in the example above.&lt;/p&gt;
&lt;p&gt;So the result will be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/zxky2jiha9n131pp5mpm.png&quot; alt=&quot;截圖 2020-09-20 下午11.17.07&quot;&gt;&lt;/p&gt;
&lt;p&gt;So good, right? In addition, you can just change the tag name,  if you want to using other tags and keep the style of same setting. In other words you can extends the same style when you using other tags. The way is that add &lt;code class=&quot;language-text&quot;&gt;as&lt;/code&gt; props and give tag name you want to render when you using the styled components.&lt;/p&gt;
&lt;p&gt;So if I want to extend the style of &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt; and render to the &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt;, you can through &lt;code class=&quot;language-text&quot;&gt;as&lt;/code&gt; props give &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; when you using &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://dev.to&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Base Button&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Base Button&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result above, the &lt;code class=&quot;language-text&quot;&gt;Button&lt;/code&gt; will be render to &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/8072x0cxjhswwron6ayn.png&quot; alt=&quot;截圖 2020-09-20 下午11.35.58&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So according to this post I said that using styled component can allow us to defined style in a way similar to program language. Styled component is very convenience and interesting! 😃&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Start learn styled components!(1)-what is it and how to install and use?]]></title><description><![CDATA[Hello guys, I’m Clark! Today I am not really going to share a power skill in this post, but I am going to talk the process about I learning…]]></description><link>https://ms314006.github.io/start-learn-styled-components-what-is-it-and-how-to-install/</link><guid isPermaLink="false">https://ms314006.github.io/start-learn-styled-components-what-is-it-and-how-to-install/</guid><pubDate>Sun, 09 Aug 2020 23:46:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys, I’m Clark! Today I am not really going to share a power skill in this post, but I am going to talk the process about I learning &lt;a href=&quot;https://styled-components.com/&quot;&gt;styled components&lt;/a&gt;. I hope you can learn something from my share or every beginner can learn what is styled components and how to use it?&lt;/p&gt;
&lt;h1&gt;What is styled components?&lt;/h1&gt;
&lt;p&gt;From we can knew &lt;a href=&quot;https://styled-components.com/docs/basics&quot;&gt;the official document&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;styled-components is the result of wondering how we could enhance CSS for styling React component systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I think that is useful and helpful, if we apply styled components in our react project(But I have no a real answer, maybe we can find it together or you can comment your opinion below, anything thanks!).&lt;/p&gt;
&lt;h1&gt;Create a React project&lt;/h1&gt;
&lt;p&gt;In this series, I will use &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt; create a React project. So whether you had installed create-react-app, as long as you installed node and npm(If you didn’t, you can reference &lt;a href=&quot;https://ms314006.github.io/how-to-install-npm-through-NVM-node-version-manager/&quot;&gt;this post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;you can run command below, if you prepared:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx create-react-app practice-styled-components&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you finished it, we would have a best environment to practice styled components.&lt;/p&gt;
&lt;h1&gt;Install styled-components&lt;/h1&gt;
&lt;p&gt;Next, we should install styled components if we want to use it. So type following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save styled-components&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Make a first styled component&lt;/h1&gt;
&lt;p&gt;First, we would delete the src/App.css file because we don’t need CSS file now, and remove the code of &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt; component from src/App.js. Besides I also refactor the way of defined function component:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Ignore others code...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;css&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;== Please remove this line.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next in the same file, I defined a simple styled component and don’t forget import your library styled-components, like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Ignore others code...&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;styled-components&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  font-size: 32px;
  color: #0f4c75;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;styled.div&lt;/code&gt; would create a component which only have a &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; tag, in this &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; everything will use style you written. So I think the code above is like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fontSize&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#0f4c75&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we can use &lt;code class=&quot;language-text&quot;&gt;Title&lt;/code&gt; like components:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Ignore others code...&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Title&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    Hello world!
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Title&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result of code above:
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/sza38wi7gboaqdrze9ca.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/ms314006/5c9a57377fa0c277a1ea5dbf3fb755ee.js&quot;&gt;The gist.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Receive Props&lt;/h1&gt;
&lt;p&gt;We already knew the styled component is a component, so it can receive props is very normal. Let’s learn it below!&lt;/p&gt;
&lt;p&gt;In the styled component. Styled components can receive props through a parameter of function, the function will return a string, the string is a result you want to set in the style. Like following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  font-size: 32px;
  color: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#0f4c75&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we can set any color in the styled component:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Title&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello world!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Title&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Title&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#fdcb9e&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello world!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Title&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result:
&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/btiegfh45vpfbqh6s7cr.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/ms314006/526130e5bcb26c6715e87845bb6e26f2.js&quot;&gt;The gist.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post we learned what is styled components, install it, how to use it and receive props in styled components. I had provided gist for each example, the gist have complete code, if you have any question or opinion please comment below let me know, I would thank for any comment!&lt;/p&gt;
&lt;h1&gt;Thanks&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@timmossholder?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Tim Mossholder&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/spray-paint?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to install npm through NVM(Node version manager)]]></title><description><![CDATA[Hello guys, I am Clark! In this post I am going to share about install npm. In the official document of npm, you can install npm through two…]]></description><link>https://ms314006.github.io/how-to-install-npm-through-NVM-node-version-manager/</link><guid isPermaLink="false">https://ms314006.github.io/how-to-install-npm-through-NVM-node-version-manager/</guid><pubDate>Sun, 02 Aug 2020 22:32:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys, I am Clark! In this post I am going to share about install npm. In the official document of npm, you can install npm through two way, and npm is node package manager, so the two way are all related to node.&lt;/p&gt;
&lt;p&gt;The first way is node installer which I always did when I want to install npm before, because this way is easily, you just need to go to the website of node, download the node installer and install it(Whatever you choose the LTS or Current version), you will got npm when you finished.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/msjhj13itwap18hj563q.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;The second way is through NVM, also is main way I want to share in this post. But I never do it, so if any mistake I did, please comment below let me know, thanks!&lt;/p&gt;
&lt;h1&gt;What is the NVM&lt;/h1&gt;
&lt;p&gt;The NVM meaning is node version manager, according to the official document, something we can know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This way is more recommend than node installer.&lt;/li&gt;
&lt;li&gt;You can install and switch between multiple versions of node and npm in your device.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if we choose the NVM, we can test if our application work well on different version of node. It sounds nice! Let’s install NVM!&lt;/p&gt;
&lt;h1&gt;Window&lt;/h1&gt;
&lt;p&gt;If your device’s OS is window, you can download the latest NVM installer from releases. Install NVM on the window is more easily than on the macOS I think.&lt;/p&gt;
&lt;p&gt;If you finished download and install, you could open command line and type &lt;code class=&quot;language-text&quot;&gt;nvm&lt;/code&gt;, that would look like this if you success install NVM:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/ez5nolz79r9lfpg926bv.jpg&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;h1&gt;macOS&lt;/h1&gt;
&lt;p&gt;If your device’s OS is macOS, you can execute a command below through terminal(According to &lt;a href=&quot;https://github.com/nvm-sh/nvm#troubleshooting-on-macos&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you finished the step and you already have installed npm before then NVM would check all modules you installed and ask if you want to uninstall they from global:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/btyd964bswrcjp7a8jih.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Because if you installed the NVM, your original node and npm will be overwritten by NVM. But this step we will handle later, because we have something not yet finished.&lt;/p&gt;
&lt;p&gt;My terminal is using zsh(The latest macOS Catalina default terminal is use zsh), so I need a a new terminal window and add the following to file &lt;code class=&quot;language-text&quot;&gt;./zshrc&lt;/code&gt;, if your terminal is not zsh, please add in file &lt;code class=&quot;language-text&quot;&gt;./bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vim ~/.zshrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And type &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt; to start editing it, and paste the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot;
[ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/nvm.sh&amp;quot;  # This loads nvm
[ -s &amp;quot;$NVM_DIR/bash_completion&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/bash_completion&amp;quot;  # This loads nvm bash_completion&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After you paste the command above, you can click button &lt;code class=&quot;language-text&quot;&gt;esc&lt;/code&gt; on keyboard, continue type &lt;code class=&quot;language-text&quot;&gt;:wq&lt;/code&gt; and enter it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/xqbqcjk3p8fj0ay8acx6.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you finished above all thing, please you close and reopen a new terminal then type &lt;code class=&quot;language-text&quot;&gt;nvm&lt;/code&gt; check if you successful installed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/68x5fd8wihuiwkge2ncg.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next if you want to use current versions of node and npm through your NVM, you can run following. The &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; also is  command which you want to switch the version of node:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;nvm use system&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The NVM will apply versions of node and npm to the NVM, we can continue run command below check:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;nvm ls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/rqf9yq1cu0fvrhzln20z.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Anything will like you use node or npm before install NVM. &lt;/p&gt;
&lt;h2&gt;How to install other versions of node and npm&lt;/h2&gt;
&lt;p&gt;If you want to install other versions of node and npm, the first you can run following see all versions of node you can install:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;nvm ls-remote&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/txw8r7uz1hgjlxpithdq.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next if I want to install latest LTS version of node &lt;code class=&quot;language-text&quot;&gt;v12.18.3&lt;/code&gt;, I can run following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;nvm install &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can run the following command to check the version of node currently use by NVM:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;nvm current&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if I want to install the &lt;code class=&quot;language-text&quot;&gt;v12.18.3&lt;/code&gt; and check if it is successful switch to versions I installed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/0dcl9ry2v38cac75ojbp.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;So good! You also can uninstall version of node you don’t want to use:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;nvm uninstall &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Last, you should be know, the version of node would not influences each other, each version of node will be independent! So just take easy to using any version of node to develop your applications!&lt;/p&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;I hope this post can be helpful for you, and if you have any opinions or questions, please comment below, I would very appreciate every thing! :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[In my opinion, what is the difference between decorator and proxy pattern?]]></title><description><![CDATA[Hello guys! In this post, I am going to share what is the difference between decorator and proxy patter. But it is just my opinion, if you…]]></description><link>https://ms314006.github.io/what-is-difference-between-decorator-pattern-and-proxy-pattern/</link><guid isPermaLink="false">https://ms314006.github.io/what-is-difference-between-decorator-pattern-and-proxy-pattern/</guid><pubDate>Sun, 19 Jul 2020 10:25:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys! In this post, I am going to share what is the difference between decorator and proxy patter. But it is just my opinion, if you have others question or any opinions, please comment below let me know, I would super thanks!&lt;/p&gt;
&lt;p&gt;And my English is not good, so I hope you will not mind it. If you have any suggestion, please comment below let me know. Thanks!&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In the last two weeks, I wrote two articles explaining about &lt;a href=&quot;https://dev.to/ms314006/what-is-the-decorator-pattern-and-how-to-implement-it-by-javascript-1lb9&quot;&gt;what is decorator&lt;/a&gt; and &lt;a href=&quot;https://dev.to/ms314006/what-is-the-proxy-pattern-and-how-to-implement-it-by-javascript-mhd&quot;&gt;proxy pattern&lt;/a&gt;. I think these two pattern is quite similar. Like situation below.&lt;/p&gt;
&lt;p&gt;If I have a class &lt;code class=&quot;language-text&quot;&gt;Computer&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Computer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; something&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; computer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;computer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// hi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And I want to make method &lt;code class=&quot;language-text&quot;&gt;echo&lt;/code&gt; can be loudly through decorator pattern, like following code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;decoratorLoud&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;computer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    computer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; computer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decoratorLoud&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;computer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// HI&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, that is decorator pattern, right?&lt;/p&gt;
&lt;h3&gt;But!&lt;/h3&gt;
&lt;p&gt;Proxy pattern still can implement same thing above, like following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; computer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; computerProxy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;computer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;echo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

computerProxy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Umm…so although I was through proxy pattern implement same feature, that still can be call decorator pattern?&lt;/p&gt;
&lt;p&gt;Now, I would give you a little time to think that, and if you have any answers, just keep reading, I had sharing my opinions below 👇&lt;/p&gt;
&lt;h1&gt;My opinions&lt;/h1&gt;
&lt;p&gt;In my opinions, I would say: “Yes! Though I used proxy pattern implement, but that still can be call decorator pattern definitely.”&lt;/p&gt;
&lt;p&gt;The answer is surprise you? Maybe you want to ask that why? That is proxy pattern because I used &lt;code class=&quot;language-text&quot;&gt;proxy&lt;/code&gt;, not decorator!&lt;/p&gt;
&lt;p&gt;Ok, I think this is a good moment that we can think something again.Did you see any syntax about decorator when I used decorator?&lt;/p&gt;
&lt;p&gt;No you didn’t, right?&lt;/p&gt;
&lt;p&gt;So, it is very interesting thing about design pattern. even the implement of both is same,&lt;/p&gt;
&lt;h3&gt;but according to different situations, would decide what pattern is it.&lt;/h3&gt;
&lt;p&gt;Like example above, in this situation I expect to add some new logic(&lt;code class=&quot;language-text&quot;&gt;toUpperCase()&lt;/code&gt;) on original logic(return something). So the original logic(return something) is decorate with new logic(&lt;code class=&quot;language-text&quot;&gt;toUpperCase()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;On the other hand, we didn’t control(get or set) any properties from original object(&lt;code class=&quot;language-text&quot;&gt;computer&lt;/code&gt;) through proxy(&lt;code class=&quot;language-text&quot;&gt;computerProxy&lt;/code&gt;). though I used proxy, it still only decorated for the method(&lt;code class=&quot;language-text&quot;&gt;echo&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We move on next example, I still have a class &lt;code class=&quot;language-text&quot;&gt;computer&lt;/code&gt;, and it have a another different method:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Computer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;_reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Reset!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the class above, anyone can execute &lt;code class=&quot;language-text&quot;&gt;reset&lt;/code&gt; method, but I hope the method is a private. we can do that through proxy pattern:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; computer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; computerProxy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;computer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;_&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hey! don&apos;t do that!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

computerProxy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;_reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Uncaught Error: Hey! don&apos;t do that!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look perfect! But can I say situation above is decorator pattern? I think the answer is negative. A most obvious thing is the result of executed method have not been decorate, proxy blocked execute.&lt;/p&gt;
&lt;p&gt;Yes! I think the most difference is&lt;/p&gt;
&lt;h3&gt;Decorator would decorate logic before method executed, but the method will definitely execute.&lt;/h3&gt;
&lt;h3&gt;Proxy would control get and set even method execute of object, when you want to do something form the object(So JavaScript call object be &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;, when you using &lt;code class=&quot;language-text&quot;&gt;proxy&lt;/code&gt; in the JavaScript).&lt;/h3&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;When I started learning, I always confuse what is difference between decorator and proxy pattern, they are so similar when I think how to implement of them. But when I am learning a while, I gradually clear the difference between both.&lt;/p&gt;
&lt;p&gt;I hope this post can be helpful for you, and if you have any opinions, please comment below, I would very appreciate every thing! :)&lt;/p&gt;
&lt;h1&gt;Thanks&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jdent?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jason Dent&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/compare?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is the proxy pattern? And how to implement it by JavaScript?]]></title><description><![CDATA[Hello, guys! I am Clark. In this post, we are going to learn about proxy pattern. In JavaScript proxy pattern is not as same as others…]]></description><link>https://ms314006.github.io/what-is-the-proxy-pattern-and-how-to-implement-it-by-javascript/</link><guid isPermaLink="false">https://ms314006.github.io/what-is-the-proxy-pattern-and-how-to-implement-it-by-javascript/</guid><pubDate>Sun, 12 Jul 2020 00:32:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello, guys! I am Clark. In this post, we are going to learn about proxy pattern. In JavaScript proxy pattern is not as same as others pattern, because JavaScript provided a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;new syntax&lt;/a&gt;, that can enable you create to a proxy object easily. So I think implement proxy pattern is not difficult question in JavaScript.&lt;/p&gt;
&lt;p&gt;Even the way using proxy is easy, I still want to explain why we need to use proxy pattern. I think that is a little bit difficult for me, but I will try my best. And My English is not good, so I hope you will not mind it. If you can correct anything of my post, I will appreciate for ever comment.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Proxy pattern use when if you want to access a property of object, but also want to add some logic when you access the property. We follow Open-Closed Principle so we wouldn’t add others logic in original Object, and avoid some chance you modify or add something in object will broken original logic in future.&lt;/p&gt;
&lt;h1&gt;How to use proxy pattern?&lt;/h1&gt;
&lt;h2&gt;Basic usage&lt;/h2&gt;
&lt;p&gt;In JavaScript create a basic proxy object is really easy. Just like snippet below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// original object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  firstName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Lena&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  lastName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Smith&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// use proxy add logic on person&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; personProxy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fullName&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// throw the proxy object, we can get full name&lt;/span&gt;
personProxy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;Lena Smith&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above , we see &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; when we create a proxy object. If we want to access something from proxy object, like as &lt;code class=&quot;language-text&quot;&gt;personProxy.fullName&lt;/code&gt; then it will into the &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; method to decide what is the proxy object should return.&lt;/p&gt;
&lt;p&gt;And &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; would have two parameters. The first is &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;, it is original object, so in the &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; method we can access original object through access &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;. The second is &lt;code class=&quot;language-text&quot;&gt;prop&lt;/code&gt;, it is the property name we want to access.&lt;/p&gt;
&lt;p&gt;So according to example above, we can know how to create a basic proxy object and use it. Besides we also can use the proxy object access non-existent properties(like as &lt;code class=&quot;language-text&quot;&gt;fullName&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Implement private properties in object&lt;/h2&gt;
&lt;p&gt;Next the proxy pattern also can make some logic to implement private property in object. In the others program languages we add ’_’ at forward of properties name, like as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  firstName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Lena&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  lastName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Smith&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  _age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Yes, the age is secret, right? :)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But in the JavaScript, even if we add the &lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt; at forward of properties name, we still can access it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result above is not we want, so in the this situation we can use proxy pattern handle it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; personProxy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;_&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

personProxy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example above. We check properties name you want to access in the &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; method, if first letter is ’_’ then return undefined or if you want to throw a error.&lt;/p&gt;
&lt;h1&gt;If you want to check something when modify object properties&lt;/h1&gt;
&lt;p&gt;We have completed inaccessible private properties by proxy pattern, but we still can modify it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;personProxy._age = 25;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the private properties have been modified. I think we must solve this problem. So besides &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; method, we can use &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; method when we want to set properties, Like as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; personProxy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;_&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;_&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hey, don&apos;t set private properties!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    target&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can notice &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt; method have three parameters. The first and the second is as same as &lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt;. The third is a value you want to set for properties. So the example above we check the properties name, if it isn’t private properties then set for object properties you want to set value. But if it is private, the proxy will throw a error, like as:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/o5iywwb11d8owr1yi54z.jpg&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;I showed the some useful examples you can consider using proxy pattern. And the following is another suitable situation you also can use proxy pattern:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verify some value when you set for properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any idea or you are implementing proxy pattern in some situation, please comment below we can more discussion, I am super thanks!&lt;/p&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;Proxy pattern is very interesting pattern because it can let you access exist or non-existent property, even not allow you access(I think that is the most different between decorator and proxy pattern, if you confuse both before, some opinion I will share in next post).&lt;/p&gt;
&lt;p&gt;But in this post, I just Introduce a basic usage of proxy pattern. If you want to learn more approach for use proxy pattern, I recommend read &lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;MDN document&lt;/a&gt;, I think that is clear enough.&lt;/p&gt;
&lt;p&gt;Thanks for you guys read, any comments and feedback are super welcome!&lt;/p&gt;
&lt;h1&gt;Thanks&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@austindistel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Austin Distel&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/agent?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What is the decorator pattern? And how to implement it by JavaScript?]]></title><description><![CDATA[Hello you guys! I am Clark. In this post we are going to learn about decorator pattern and implement it by JavaScript! First of all, my…]]></description><link>https://ms314006.github.io/what-is-the-decorator-pattern-and-how-to-implement-it-by-javascript/</link><guid isPermaLink="false">https://ms314006.github.io/what-is-the-decorator-pattern-and-how-to-implement-it-by-javascript/</guid><pubDate>Thu, 02 Jul 2020 00:32:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello you guys! I am Clark. In this post we are going to learn about decorator pattern and implement it by JavaScript!&lt;/p&gt;
&lt;p&gt;First of all, my English is not good and hope you will not mind it. If you can correct anything of my post, I will really appreciate for every comment!&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Decorator pattern is very beautiful pattern, It is implement perfectly Open-Closed Principle. When we finished any class’s main function, Except main requirement or logic are changes, we shouldn’t modify it. Maybe you are thinking&lt;/p&gt;
&lt;h3&gt;Why? Why I can’t do that?&lt;/h3&gt;
&lt;p&gt;Okay! Let me talk a simple example below, if I have a class can print something on console of browser:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; printerA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
printerA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;something&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// something&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And next, the customer said: “Oh! The text’s color is too boring! Can you change the text color to yellow?“. Sure, just modify as follow:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;text&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;color: yellow;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/cmb2w4gffffvrpx0xw3b.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you thinking everything is fine, your customer came again and said: “Hey, can you enlarge size of font? It is too small!“. “Umm…Okay!” you said, And modify again as following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;text&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;color: yellow;font-size: 36px;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/l1h92dg6gz4gx45i3zon.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Okay, it is last?&lt;/p&gt;
&lt;h3&gt;No!&lt;/h3&gt;
&lt;p&gt;You not only have a one customer, right? So another customer said: “Hey! the size of font too big! Can you change back to original size of font?”&lt;/p&gt;
&lt;p&gt;Umm…so what should we do? Maybe we can think some way to resolve the problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Just send a parameter to determine style of print when create object by &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt;, I think this is not a good solution, because if your customer become more then your &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt; will become more. the one thing wrong importantly of the way is class &lt;code class=&quot;language-text&quot;&gt;Printer&lt;/code&gt; just need print, so if you put other logic in it then in the future that will be difficult to modify.&lt;/li&gt;
&lt;li&gt;Maybe we can use inheritance, create derived classes for each customer. Yes! that would be awesome, but! if the first customer want to text color shown in red, the second customer want to text color shown in red and set the size of font for &lt;code class=&quot;language-text&quot;&gt;36px&lt;/code&gt;. Now just two customer but your code already repeat twice in two derived classes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;So what should we do?&lt;/h3&gt;
&lt;p&gt;Decorator pattern would be a awesome option! If you want to do a thing(The thing is print of above example), but before you do that, you must do other things and you don’t know how many thing you should do(like set for the text’s color and the size of font), than decorator pattern can decorate a thing you want to do!&lt;/p&gt;
&lt;h1&gt;How to use decorator pattern?&lt;/h1&gt;
&lt;p&gt;I will refactory above example by decorator pattern!&lt;/p&gt;
&lt;p&gt;First we should do something for print, so I will create a new method override original print method, but still call it inside new method, and we can pass style for original print through new method:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;text&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// decorator method&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;yellowStyle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;printer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    printer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;color: yellow;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The printer object by &lt;code class=&quot;language-text&quot;&gt;Printer&lt;/code&gt; create can decorate with yellowStyle, make text’s color become yellow:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/47fydb8ic5tx9wp8ztw4.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;So you can according to requirements make a lot of decorator you need, like following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// decorator methods&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;yellowStyle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;printer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  print&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    printer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;style&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;color: yellow;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;boldStyle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;printer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  print&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    printer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;style&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;font-weight: bold;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;bigSizeStyle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;printer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  print&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    printer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;style&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;font-size: 36px;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And through decorator methods compose which you want to display style:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/lph1qflqsoe4kcsu9267.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;So good! Right? but above example is suboptimal, because I used &lt;code class=&quot;language-text&quot;&gt;...&lt;/code&gt; to get properties of object, but some thing would not exist in the object like methods, the method would store in prototype, so if I just want to through &lt;code class=&quot;language-text&quot;&gt;...&lt;/code&gt; get all things from object, that will be wrong!&lt;/p&gt;
&lt;p&gt;For solve this problem, the solution is make a public function to copy another same object include methods of prototype:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;copyObj&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;originObj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originPrototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originPrototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originObjOwnProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  originObjOwnProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prototypeDesc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originObj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; property&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newObj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; property&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prototypeDesc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newObj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to update content of decorator methods, I talk &lt;code class=&quot;language-text&quot;&gt;yellowStyle&lt;/code&gt; as an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;yellowStyle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; decorator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;copyObj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;printer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  decorator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;print &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    printer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;style&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;color: yellow;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; decorator&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out complete example &lt;a href=&quot;https://gist.github.com/ms314006/73c506a8589f63cb948d1483654fb0c6&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following is another suitable situation you can consider using decorator pattern:&lt;/p&gt;
&lt;h4&gt;If you want to publish a post.&lt;/h4&gt;
&lt;p&gt;What things you want to do(decorate) before publish?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send mail for subscribers&lt;/li&gt;
&lt;li&gt;Push notice to Slack&lt;/li&gt;
&lt;li&gt;Push post on Facebook page&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;I think decorator is super good pattern, I like decorator because it like our life, one day we will all die, but before we die, we can make a lot of decorator to decorate our life!&lt;/p&gt;
&lt;p&gt;Thanks for you guys read, comments and feedback are super welcome!&lt;/p&gt;
&lt;h1&gt;Thanks&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@element5digital?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Element5 Digital&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/decoration?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to package front-end projects into Docker images and use it with webpack]]></title><description><![CDATA[Hello guys! I am Clark! In this article I am going to share how to package front-end projects into Docker images with webpack. Maybe someone…]]></description><link>https://ms314006.github.io/how-to-package-front-end-projects-into-Docker-images-and-use-it-with-webpack/</link><guid isPermaLink="false">https://ms314006.github.io/how-to-package-front-end-projects-into-Docker-images-and-use-it-with-webpack/</guid><pubDate>Sat, 20 Jun 2020 16:04:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello guys! I am Clark! In this article I am going to share how to package front-end projects into Docker images with webpack.&lt;/p&gt;
&lt;p&gt;Maybe someone thinks this is useless for front-end developer, but I think for me, developing a project in front-end is more complicated than before, and also include part of setting environment.&lt;/p&gt;
&lt;p&gt;For example, if I want to run a project, I need to install node or I should install deno if this project using deno? I can’t just run the project? and make the project work? and perhaps the project also need rely on database?&lt;/p&gt;
&lt;p&gt;Can I easy to integrate and manage front-end projects with back-end projects?&lt;/p&gt;
&lt;h1&gt;You can!&lt;/h1&gt;
&lt;p&gt;Just choose docker and I think this is common way now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But in this article I wouldn’t talk part of back-end projects, if you guys want to know, please comment below let me know :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Install docker&lt;/h1&gt;
&lt;p&gt;Okay, the first step still is install, please refers &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;docker’s document&lt;/a&gt;, I think it is clearest.&lt;/p&gt;
&lt;h1&gt;Create Dockerfile&lt;/h1&gt;
&lt;p&gt;If you want to build a docker image, you should throw Dockerfile. we will write something that about how do you want to execute the project and environment of execution of the project. Below is a basic context of Dockerfile:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;10.15.3&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine
&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /app
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; package.json ./
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm install
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . ./
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm run build

&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I will explain some point of above Dockerfile:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FROM: It is your target projects’ environment of execution, my project is using node environment develop, so I written node and the version is 10.15.3, if you want to choose the others version you can check &lt;a href=&quot;https://hub.docker.com/_/node/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;WORKDIR: Docker will create a work folder, when you build a image.&lt;/li&gt;
&lt;li&gt;COPY: It can copy any file or folder you want to WORKDIR, the first I copy package.json for next step.&lt;/li&gt;
&lt;li&gt;RUN: During images building, docker will execute commands you wrote. So in this step I execute &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt; which will install all the project dependent libraries according to package.json.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After installed libraries, I copy all files to WORKDIR and run a command &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; for building the project.&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;CMD: When you builded a image, and you run the image, it will execute commands from CMD. If you want to run &lt;code class=&quot;language-text&quot;&gt;npm run start&lt;/code&gt;, you should write &lt;code class=&quot;language-text&quot;&gt;[&amp;quot;npm&amp;quot;, &amp;quot;run&amp;quot;, &amp;quot;start&amp;quot;]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now is the great time, I want to talk about something you should pay attention if you using webpack-dev-server to run server, that is you need to add &lt;code class=&quot;language-text&quot;&gt;--host 0.0.0.0&lt;/code&gt; to commands behind &lt;code class=&quot;language-text&quot;&gt;webpack-dev-server&lt;/code&gt;, I find it from &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/issues/547&quot;&gt;this issue&lt;/a&gt;, but I still have no idea for the reason, if you know we can chat about it in the below comment! 😃&lt;/p&gt;
&lt;p&gt;In the step, we create a Dockerfile, otherwise we also can create a .dockerignore which can ignore file or folder during building images. For example, maybe I don’t want to copy node_modules to WORKDIR, because I will run &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt; during building image, for that I can write below snippet in .dockerignore:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After we finished above things, we can run the command which building a image:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docker build -t docker-app:1.0.0 .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can type &lt;code class=&quot;language-text&quot;&gt;docker build&lt;/code&gt; to build a image, &lt;code class=&quot;language-text&quot;&gt;-t&lt;/code&gt; meaning is tag name, you can add tag name for your images, the format is &lt;code class=&quot;language-text&quot;&gt;image name:tag name&lt;/code&gt;, last is your path of project which you want to defined the project root path.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/jgol0x0kjaxe2nemv7jj.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;If have no display any problem, we type &lt;code class=&quot;language-text&quot;&gt;docker images&lt;/code&gt; in terminal, we can find out our image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/w1dmbw1ez1s8a0101xgx.jpg&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Run images&lt;/h1&gt;
&lt;p&gt;Next, please type below commands for run images:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docker run -p 8080:8080 45c5b8f47f9d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use &lt;code class=&quot;language-text&quot;&gt;docker run imageID&lt;/code&gt; format execute a image, and a same time, a container will started, our image will run in the container.&lt;/p&gt;
&lt;p&gt;So our webpack-dev-server run our project on 8080 port, but it is running in the container, we need to export 8080 port of container to our 8080 port of localhost. For that, we need to add &lt;code class=&quot;language-text&quot;&gt;-p 8080:8080&lt;/code&gt; into commands, the format is &lt;code class=&quot;language-text&quot;&gt;-p [port of localhost]:[part of container]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After running your images, we can type above commands to see running container with image.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docker ps&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/ob6ihwwc9z7d60rne26x.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;And we can open browser, enter &lt;code class=&quot;language-text&quot;&gt;localhost:8080&lt;/code&gt; into url, the project is work 🎊:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/jjs6qvpxsdhronifvt86.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want to stop or delete container and image you can refers below commands:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// delete images
docker rmi imageID

// stop containers
docker stop containerID

// delete containers
docker rm containerID&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope this post can help you, if you have any questions or suggestion please let me know by below comment!&lt;/p&gt;
&lt;p&gt;thank for you read! 😃&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Deploy your Deno apps to Heroku]]></title><description><![CDATA[Hello, guys! I am Clark! In this post, I am going to share about how to deploy your Deno applications to Heroku! Ok, The first we need to…]]></description><link>https://ms314006.github.io/deploy-your-deno-apps-to-heroku/</link><guid isPermaLink="false">https://ms314006.github.io/deploy-your-deno-apps-to-heroku/</guid><pubDate>Sat, 13 Jun 2020 23:49:59 GMT</pubDate><content:encoded>&lt;p&gt;Hello, guys! I am Clark! In this post, I am going to share about how to deploy your &lt;a href=&quot;https://deno.land/&quot;&gt;Deno&lt;/a&gt; applications to &lt;a href=&quot;https://dashboard.heroku.com/&quot;&gt;Heroku&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Ok, The first we need to have a Deno application. if you didn’t download Deno in your system, you can refer to &lt;a href=&quot;https://deno.land/#installation&quot;&gt;this page&lt;/a&gt;, or if you already download Deno, you can create a Deno applications folder and create a index.ts in the folder:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; serve &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/std@0.57.0/http/server.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; port&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World\n&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you finished, you can type below commend to run this Deno application:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;deno run --allow-net index.ts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can open browser and type &lt;code class=&quot;language-text&quot;&gt;http://localhost:8000/&lt;/code&gt; into url:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/pof07t84v286bn2x85py.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, if we deploy a application to Heroku, Heroku will give me a port, we need to use this port instead of the 8080 we set. So we will use &lt;a href=&quot;https://deno.land/std/flags&quot;&gt;flags&lt;/a&gt; to help us parse port from &lt;code class=&quot;language-text&quot;&gt;args&lt;/code&gt; when our Deno applications running with Heroku.&lt;/p&gt;
&lt;p&gt;For that, we need to edit our index.ts:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; serve &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/std@0.57.0/http/server.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; parse &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://deno.land/std/flags/mod.ts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; args &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEFAULT_PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; argPort &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; port&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; argPort &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argPort&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DEFAULT_PORT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; req &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World\n&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, look nice! Than, we need create Procfile file, Heroku will run commends from Procfile file, when we deployed our Deno applications:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;web: deno run --allow-net=:${PORT} index.ts --port=${PORT}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Last, we go to website of Heroku, create a new application and switch to Settings page of the application:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/2qdd49ocji5o8hequh2i.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;And we pay attention to Buildpacks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/52hd93pi5iwjtns0a9qz.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Before, we usually choose a Buildpack to run our commend, maybe nodejs, php, ruby or go. But now we need to set a environment to run Deno, and the most terrible thing is…Heroku have no Deno let us choose:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/pf7ih5upbyipod9n569r.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Don’t worry, please enter below Buildpack URL to input box:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;https://github.com/chibat/heroku-buildpack-deno.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we finished above steps, we just need to deploy our Deno applications to Heroku like as other applications. If you never deploy any applications to Heroku, you can refer to &lt;a href=&quot;https://devcenter.heroku.com/articles/deploying-nodejs#deploy-your-application-to-heroku&quot;&gt;this part&lt;/a&gt;, but you don’t need to type &lt;code class=&quot;language-text&quot;&gt;heroku create&lt;/code&gt; because you already did.&lt;/p&gt;
&lt;p&gt;If you guys have any questions, please comment below and let me know. thank for you read!&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yXH8VFLh2yA&quot;&gt;Deploy your first Deno Web App to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[How to make a mock of arrow functions of classes for unit testing?]]></title><description><![CDATA[Hello, you guys! I am Clark! In this post I want to share how to make a mock of arrow functions of classes for unit testing. Because I read…]]></description><link>https://ms314006.github.io/how-to-make-a-mock-of-arrow-functions-of-classes-for-unit-testing/</link><guid isPermaLink="false">https://ms314006.github.io/how-to-make-a-mock-of-arrow-functions-of-classes-for-unit-testing/</guid><pubDate>Fri, 05 Jun 2020 15:35:55 GMT</pubDate><content:encoded>&lt;p&gt;Hello, you guys! I am Clark! In this post I want to share how to make a mock of arrow functions of classes for unit testing. Because I read the document of Jest at yesterday, And I learned about &lt;a href=&quot;https://jestjs.io/docs/en/es6-class-mocks&quot;&gt;ES6 Class Mocks&lt;/a&gt;, But in that page I saw a section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please note that if you use arrow functions in your classes, they will not be part of the mock. The reason for that is that arrow functions are not present on the object’s prototype, they are merely properties holding a reference to a function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we can know that if you use arrow functions in classes then they will not be part of the mock. I think that is terrible, arrow functions is more common than before, but I still can’t mock they? and the document also didn’t explain what should we do if we used arrow functions in our classes.&lt;/p&gt;
&lt;p&gt;Next I will use example of document to show this situation, we have two classes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// sound-player.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SoundPlayer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;playSoundFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Playing sound file &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// sound-player-consumer.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SoundPlayer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sound-player&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SoundPlayerConsumer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;soundPlayer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SoundPlayer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;playSomethingCool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; coolSoundFileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;song.mp3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;soundPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;playSoundFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coolSoundFileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can easy make a mock for unit testing, like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SoundPlayer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sound-player&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SoundPlayerConsumer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sound-player-consumer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./sound-player&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// SoundPlayer is now a mock constructor&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;methods&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  SoundPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockClear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;We can check if the consumer called a method on the class instance&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; soundPlayerConsumer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SoundPlayerConsumer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; coolSoundFileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;song.mp3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  soundPlayerConsumer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;playSomethingCool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// mock.instances is available with automatic mocks:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockSoundPlayerInstance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SoundPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;instances&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockPlaySoundFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mockSoundPlayerInstance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playSoundFile&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockPlaySoundFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;calls&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coolSoundFileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is work well:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/hs9uhe19f7ghhbwm0hfe.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;But if I just changed playSoundFile of SoundPlayer to arrow functions, like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// sound-player.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SoundPlayer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;playSoundFile&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Playing sound file &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run tests, The result will be fail:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/4wso4q8aewymhfe2aepx.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;So why should we do? The solution is really easy, you just need make a mock through &lt;code class=&quot;language-text&quot;&gt;jest.fn()&lt;/code&gt;, then defined your arrow functions in classes as the mock. like code below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;We can check if the consumer called a arrow functions on the class instance&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; soundPlayerConsumer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SoundPlayerConsumer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Use `jest.fn()` to set up mock of arrow functions.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mockPlaySoundFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  soundPlayerConsumer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;soundPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playSoundFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mockPlaySoundFile&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; coolSoundFileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;song.mp3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  soundPlayerConsumer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;playSomethingCool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mockPlaySoundFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;calls&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coolSoundFileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The mock work well:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/ys9v7d70lfnp3p0vymmm.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Please let me know, if you guys have any questions! :)&lt;/p&gt;
&lt;p&gt;peace&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Let website speak by itself - chrome extensions!]]></title><description><![CDATA[Hello! guys, I’m Clark. In this post I want to share how to use chrome extensions and some method of javaScript let website speak by itself…]]></description><link>https://ms314006.github.io/let-website-speak-by-itself/</link><guid isPermaLink="false">https://ms314006.github.io/let-website-speak-by-itself/</guid><pubDate>Mon, 04 May 2020 07:16:11 GMT</pubDate><content:encoded>&lt;p&gt;Hello! guys, I’m Clark. In this post I want to share how to use chrome extensions and some method of javaScript let website speak by itself!&lt;/p&gt;
&lt;p&gt;In the project below, I will use &lt;a href=&quot;https://www.timeforkids.com/&quot;&gt;Time For Kids&lt;/a&gt; as an example, make a chrome extensions to catch content in article of Time For Kids, When I get content of article, I will use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance&quot;&gt;SpeechSynthesisUtterance&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/SpeechSynthesis&quot;&gt;SpeechSynthesis&lt;/a&gt; to speak text, they are method of JavaScript.&lt;/p&gt;
&lt;h2&gt;Create A Project Of Chrome Extensions&lt;/h2&gt;
&lt;p&gt;Ok so first of all, we need to create a project for chrome extensions, so like npm project need package.json, you should create a file manifest.json, if you expect your project can be a chrome extensions.&lt;/p&gt;
&lt;p&gt;The content of manifest.json below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;manifest_version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Reciting articles of time for kinds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Reciting articles of time for kinds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;16&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;icon.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;48&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;icon.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;128&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;icon.png&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;browser_action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;default_icon&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;icon.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;default_popup&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;popup.html&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;permissions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;activeTab&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;content_scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;matches&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;https://www.timeforkids.com/*&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;execute.js&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to pay attention to a few points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;icons&lt;/code&gt;: You must to put a same name’s file in the root folder, it is your icon of chrome extensions&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;browser_action&lt;/code&gt;: It have two attributes, The first is &lt;code class=&quot;language-text&quot;&gt;default_icon&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;default_icon&lt;/code&gt; mean same to &lt;code class=&quot;language-text&quot;&gt;icons&lt;/code&gt; above, The second is &lt;code class=&quot;language-text&quot;&gt;default_popup&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;default_popup&lt;/code&gt;’s value is a HTML file, we can use it to trigger event.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;content_scripts&lt;/code&gt;: It is a very interesting attributes, It have two attributes, The first is &lt;code class=&quot;language-text&quot;&gt;matches&lt;/code&gt; and the second is &lt;code class=&quot;language-text&quot;&gt;js&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;matches&lt;/code&gt; can defined a domain, if users visit webpages at the this domain, then chrome extensions will auto load code of specified JavaScript file by &lt;code class=&quot;language-text&quot;&gt;js&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So far we already know through manifest.json file that we need to create another two files, that is popup.html and execute.js.&lt;/p&gt;
&lt;h2&gt;popup.html&lt;/h2&gt;
&lt;p&gt;Our HTML don’t need too complex, only two button is enough, the one is start, the another one is stop:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!doctype html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xhtml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style-attr language-css&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt; &lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Reciting articles&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;recite&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Start Recite&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stopRecite&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Stop Recite&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./popup.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you observe the code above, you can find that I secretly loaded a JavaScript file call in popup.html, The JavaScript file is popup.js:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getSelectedTab&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tabId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tabs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sendMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;messageObj&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tabId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; messageObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;recite&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;RECITE&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;stopRecite&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;STOP_RECITE&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currentWindow&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getSelectedTab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except we can add event listener of click to button of start and stop in popup.js, we also can use the API from chrome to control webpages, like the following two:&lt;/p&gt;
&lt;p&gt;The first is &lt;a href=&quot;https://developer.chrome.com/extensions/tabs#method-query&quot;&gt;chrome.tabs.query&lt;/a&gt;, it can find all tabs currently open in chrome browser, The first parameter set the currently using tab, The second parameter is a callback function.&lt;/p&gt;
&lt;p&gt;callback function in the code above is &lt;code class=&quot;language-text&quot;&gt;getSelectedTab&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;getSelectedTab&lt;/code&gt; receive a parameter called &lt;code class=&quot;language-text&quot;&gt;tabs&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;tabs&lt;/code&gt; is array type, in the &lt;code class=&quot;language-text&quot;&gt;tabs&lt;/code&gt; will have all match conditional tab data, did you remember my conditions? I set the currently active tab, so only will have a tab in the tabs, even so the &lt;code class=&quot;language-text&quot;&gt;tabs&lt;/code&gt; still is a array type, so we need to get currently tab data by &lt;code class=&quot;language-text&quot;&gt;tabs[0]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second is &lt;a href=&quot;https://developer.chrome.com/extensions/tabs#method-sendMessage&quot;&gt;chrome.tabs.sendMessage&lt;/a&gt;, if currently webpages have &lt;a href=&quot;https://developer.chrome.com/extensions/runtime#event-onMessage&quot;&gt;chrome.runtime.onMessage.addListener&lt;/a&gt;, then we can let chrome extensions communication currently webpages by send message through &lt;a href=&quot;https://developer.chrome.com/extensions/tabs#method-sendMessage&quot;&gt;chrome.tabs.sendMessage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But at this moment, maybe you will think: “All webpages does have &lt;a href=&quot;https://developer.chrome.com/extensions/runtime#event-onMessage&quot;&gt;chrome.runtime.onMessage.addListener&lt;/a&gt;, how is that possible?”&lt;/p&gt;
&lt;p&gt;Yes! you are right! That is impossible, so we failed?&lt;/p&gt;
&lt;p&gt;No! did you remember we have a very interesting attributes in the manifest.json? It is &lt;code class=&quot;language-text&quot;&gt;content_scripts&lt;/code&gt;, Is it the same as you think?&lt;/p&gt;
&lt;h2&gt;execute.js&lt;/h2&gt;
&lt;p&gt;So though the target webpage doesn’t have &lt;a href=&quot;https://developer.chrome.com/extensions/runtime#event-onMessage&quot;&gt;chrome.runtime.onMessage.addListener&lt;/a&gt;, but we still can add it in the target webpages by execute.js of &lt;code class=&quot;language-text&quot;&gt;content_scripts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;RECITE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;/* play */&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;STOP_RECITE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;/* stop */&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onMessage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because our popup.html have two button, so I need to use &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt; to set two type event for execute, the one is start recite, the another one is stop recite, then we can write down some code for event of start and stop.&lt;/p&gt;
&lt;p&gt;First event of start, we have to get content of article, so I observe HTML tag on the webpages of time for kids, I can find content of article, it is in the second &lt;code class=&quot;language-text&quot;&gt;div&lt;/code&gt; of class is &lt;code class=&quot;language-text&quot;&gt;columns small-12 medium-offset-2 medium-8 end&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/j5r2ohc9zfsmdc91wqrr.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;So I can write down a function to get content text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getArticleContent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; articleContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; article &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;columns small-12 medium-offset-2 medium-8 end&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; paragraphs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;p:not([class])&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  paragraphs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;paragraph&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; articleContent &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;paragraph&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; articleContent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance&quot;&gt;SpeechSynthesisUtterance&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/SpeechSynthesis&quot;&gt;SpeechSynthesis&lt;/a&gt; to speak text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;recite&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; articleContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getArticleContent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; utterThis &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;articleContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  utterThis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;en-US&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; synth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;speechSynthesis&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  synth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;utterThis&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But you need to attention pay to that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance&quot;&gt;SpeechSynthesisUtterance&lt;/a&gt; have many national intonation, and I expect time for kinds is english article, so I set &lt;code class=&quot;language-text&quot;&gt;utterThis.lang&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;en-US&lt;/code&gt;, if you want to know other land, you can visit &lt;a href=&quot;https://mdn.github.io/web-speech-api/speak-easy-synthesis/&quot;&gt;DEMO of mdn&lt;/a&gt; to try it.&lt;/p&gt;
&lt;p&gt;Now we are finished a function for recite, so we can add the function to the &lt;code class=&quot;language-text&quot;&gt;case &amp;#39;RECITE&amp;#39;&lt;/code&gt; of &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt;, and the another &lt;code class=&quot;language-text&quot;&gt;case &amp;#39;STOP_RECITE&amp;#39;&lt;/code&gt; we can use &lt;code class=&quot;language-text&quot;&gt;cancel&lt;/code&gt; of &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/SpeechSynthesis&quot;&gt;SpeechSynthesis&lt;/a&gt; directly stop recite:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;RECITE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;recite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;STOP_RECITE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;speechSynthesis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

chrome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onMessage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;onMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we have to test if the chrome extension is correct execute, open your chrome and go to the extensions:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/3zvo7xjk53rnh6972fyn.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next click load the unpacked extension, then choose your chrome extension project folder.&lt;/p&gt;
&lt;p&gt;When you finish all steps above, You can go to a any article of Time For Kids and use your chrome extensions let webpages speak by itself!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/k20i65lp8bonxbb71s4j.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;I would all code above put in my &lt;a href=&quot;https://github.com/ms314006/reciting-articles-of-time-for-kinds&quot;&gt;GitHub&lt;/a&gt;, welcome guys clone it and try yourself!&lt;/p&gt;
&lt;p&gt;You guys can commit the message below if you have any question!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React | Simple implementing SSR(Server-Side Rendering) in React with Redux]]></title><description><![CDATA[Hello! You guys! I am Clark today we are keep going to learn how to implementing SSR in React applications with Redux!  Last article, We are…]]></description><link>https://ms314006.github.io/simple-implementing-ssr-in-react-with-redux/</link><guid isPermaLink="false">https://ms314006.github.io/simple-implementing-ssr-in-react-with-redux/</guid><pubDate>Sun, 19 Apr 2020 05:33:38 GMT</pubDate><content:encoded>&lt;p&gt;Hello! You guys! I am Clark today we are keep going to learn how to implementing SSR in React applications with Redux! &lt;/p&gt;
&lt;p&gt;Last article, We are already finish implement SSR in a base React application! &lt;a href=&quot;https://github.com/ms314006/implement-ssr-of-react/tree/without_redux&quot;&gt;Here is the React application Repo&lt;/a&gt;!But the Repo is for last article, This article I have prepare &lt;a href=&quot;https://github.com/ms314006/basic-csr-of-react/tree/master/src&quot;&gt;a another Repo&lt;/a&gt;, it is React applications with Redux, but it is very similar to last Repo, only have a different:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSelector&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useDispatch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fetchRequestQuery &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../actions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dispatch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useDispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fetchRequestQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; request &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code class=&quot;language-text&quot;&gt;Content&lt;/code&gt;, I through API get data and use Redux store it.&lt;/p&gt;
&lt;h1&gt;Review&lt;/h1&gt;
&lt;p&gt;Okay, first we review what is we should prepare file for SSR:&lt;/p&gt;
&lt;h3&gt;1. We need a hepler.js help us display first HTML in client:&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderToString &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom/server&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; StaticRouter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderRoutes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-config&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Routes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../Routes&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StaticRouter location&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Routes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;StaticRouter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;html&gt;
      &amp;lt;body&gt;
        &amp;lt;div id=&quot;root&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;script src=&quot;./bundle.js&quot;&gt;&amp;lt;/script&gt;
      &amp;lt;/body&gt;
    &amp;lt;/html&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. Install express and create a file srever.js, to handle first response:&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; express &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;*&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening on port: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, if you guys already understand code above, we can continue handle component &lt;code class=&quot;language-text&quot;&gt;Content&lt;/code&gt;! if you have any question, you can reference last article or comments below:)&lt;/p&gt;
&lt;p&gt;We can through server.js send response correct, if we can handle &lt;code class=&quot;language-text&quot;&gt;Content&lt;/code&gt;’s fetch correct, so first we need would export method of fetch, if it is need for render component:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useSelector&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useDispatch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fetchRequestQuery &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../actions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dispatch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useDispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fetchRequestQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; request &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Content&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;loadData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fetchRequestQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now export from &lt;code class=&quot;language-text&quot;&gt;Content&lt;/code&gt; is not a component, it is a object and include the component and API method, so we don’t forget modify &lt;code class=&quot;language-text&quot;&gt;src/Routes.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Content &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./pages/Content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; NotFound &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./pages/NotFound&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./App&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  routes&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;Content&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      exact&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; NotFound&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are almost finish, next we start to handle Redux, first of all, the &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt; in client we only can use one, but if we use one store handle request from all client, then data maybe will influence each other request, so we must modify &lt;code class=&quot;language-text&quot;&gt;./src/store/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createStore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; applyMiddleware &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; thunk &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;redux-thunk&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; reducers &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../reducers&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look nice, So each new request, we can create a new store, data will no influence each other request.&lt;/p&gt;
&lt;p&gt;Next we go to &lt;code class=&quot;language-text&quot;&gt;./src/server.js&lt;/code&gt;, we need use new &lt;code class=&quot;language-text&quot;&gt;createStore&lt;/code&gt; get &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt;, and handle fetch if component need it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; express &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; matchRoutes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-config&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Routes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./Routes&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; renderer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./helpers/renderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; createStore &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./store&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;*&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// (1)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; dispatch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// (2)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; routes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Routes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// (3)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promises &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; routes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; route &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loadData &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; route&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// (4)&lt;/span&gt;
  Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;promises&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening on port: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will explain in four part below code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;createStore&lt;/code&gt; get &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt; and get &lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt; from &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;matchRoutes&lt;/code&gt;(It is method in react-router-config) get correspond information of render components from &lt;code class=&quot;language-text&quot;&gt;Routes&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;Routes&lt;/code&gt; is an Array, data like: &lt;code class=&quot;language-text&quot;&gt;[{ route: { /* component information */ }, }, { route: { /* component information */ }, }]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; check if component need API fetch data(Judge by loadData), if component need fetch data, then add to &lt;code class=&quot;language-text&quot;&gt;promises&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Considering that the API needs to be in order, so we use &lt;code class=&quot;language-text&quot;&gt;promise.all&lt;/code&gt; ensure API to be in order! when all promise responses is finish, we can call &lt;code class=&quot;language-text&quot;&gt;renderer&lt;/code&gt; to get client’s HTML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are almost finish, we can open &lt;code class=&quot;language-text&quot;&gt;./src/helpers/renderer.js&lt;/code&gt; to receive &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt; add &lt;code class=&quot;language-text&quot;&gt;Provider&lt;/code&gt; to get data from &lt;code class=&quot;language-text&quot;&gt;store&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderToString &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom/server&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; StaticRouter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderRoutes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-config&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Provider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Routes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../Routes&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StaticRouter location&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Routes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;StaticRouter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;html&gt;
      &amp;lt;body&gt;
        &amp;lt;div id=&quot;root&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;script src=&quot;./bundle.js&quot;&gt;&amp;lt;/script&gt;
      &amp;lt;/body&gt;
    &amp;lt;/html&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect! Finally we can type &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;npm run server&lt;/code&gt; to running server:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/n908fjugqujkbmyfc55y.gif&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can find this Repo in &lt;a href=&quot;https://github.com/ms314006/implement-ssr-of-react&quot;&gt;my Github&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Thank for reading my post, if you have any question and think, please let me know, in comments below :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React | Simple implementing SSR(Server-Side Rendering) in React]]></title><description><![CDATA[Hello! My name is Clark, in this post we are gonna implementing Server-Side Rendering in React, it’s very easy! Let’s start! Server-Side…]]></description><link>https://ms314006.github.io/simple-implementing-ssr-in-react/</link><guid isPermaLink="false">https://ms314006.github.io/simple-implementing-ssr-in-react/</guid><pubDate>Thu, 27 Feb 2020 05:33:38 GMT</pubDate><content:encoded>&lt;p&gt;Hello! My name is Clark, in this post we are gonna implementing Server-Side Rendering in React, it’s very easy! Let’s start!&lt;/p&gt;
&lt;h2&gt;Server-Side Rendering vs Client-Side Rendering&lt;/h2&gt;
&lt;p&gt;What different between SSR and CSR? first, the CSR have a few step on page of web loading:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Load HTML file, It usually likes this: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;root&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./bundle.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Download JavaScript bundle.js.&lt;/li&gt;
&lt;li&gt;Last, execute bundle.js and render page view by route!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the other hand, SSR have these step:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Send request to NodeJS server when type the URL.&lt;/li&gt;
&lt;li&gt;Server would be generate the view of page by request URL path, and response to client side.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client accept the response from server, It likes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;root&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--
        Page information
      --&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./bundle.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Download JavaScript bundle.js.&lt;/li&gt;
&lt;li&gt;Last, execute bundle.js and render page view by route!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can according to above loading step of about CSR and SSR find out a key thing! did you find that?&lt;/p&gt;
&lt;p&gt;Yes! The different just is action before &lt;strong&gt;Download JavaScript bundle.js.&lt;/strong&gt; this step.&lt;/p&gt;
&lt;p&gt;So in the face, we just need prepare Server for the first load, it’s very easy!&lt;/p&gt;
&lt;p&gt;And before the start, I have ready a basic CSR project of react, you can clone it from &lt;a href=&quot;https://github.com/ms314006/basic-csr-of-react/tree/without_redux&quot;&gt;my Github&lt;/a&gt;, when you cloned you can execute it, and find it first loading hasn’t any content on page&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/c2r48b7y67p1iv7653ox.gif&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Right now, following step to implement SSR to this project!&lt;/p&gt;
&lt;h2&gt;Create server by NodeJS&lt;/h2&gt;
&lt;p&gt;First of all, for the SSR we must use express server library of NodeJS, why I chooses NodeJS? because just only NodeJS can implement SSR, They are all JavaScript.&lt;/p&gt;
&lt;h3&gt;Install express&lt;/h3&gt;
&lt;p&gt;Install express in origin CSR project.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install express --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add the server.js in src folder, and write follow code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; express &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// (1)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// (2)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// (3)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;*&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;//(4)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;Response Content&amp;lt;/div&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening on port: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Create express object, and Setting folder position of static file.&lt;/li&gt;
&lt;li&gt;Setting folder position of static file.&lt;/li&gt;
&lt;li&gt;Route entrance, if setting ’*’ then any route would be execute callback function, and callback have two parameter, the first is information of request(example path), the second is method of response.&lt;/li&gt;
&lt;li&gt;Setting content of page, and use &lt;code class=&quot;language-text&quot;&gt;res.send&lt;/code&gt; response to client-side.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok! we have gone finish the server part, but this response of server in not we expect, we want the content is according to router render correspond component.&lt;/p&gt;
&lt;p&gt;So we need a helper, it can help render first content same as CSR.&lt;/p&gt;
&lt;h2&gt;Rendering content for first response&lt;/h2&gt;
&lt;p&gt;Please create new folder in src folder, it name is helper, and create a file in this, new file name is renderer.js, last write follow code into it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderToString &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom/server&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; StaticRouter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; renderRoutes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-router-config&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Routes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../Routes&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// (1)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StaticRouter location&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Routes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;StaticRouter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// (2)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;html&gt;
      &amp;lt;body&gt;
        &amp;lt;div id=&quot;root&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;script src=&quot;./bundle.js&quot;&gt;&amp;lt;/script&gt;
      &amp;lt;/body&gt;
    &amp;lt;/html&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s look What did it do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The content is according to router rendering correspond content, it have two points:&lt;/p&gt;
&lt;p&gt;The first is &lt;code class=&quot;language-text&quot;&gt;StaticRouter&lt;/code&gt;, it is kind of router like as &lt;code class=&quot;language-text&quot;&gt;HashRouter&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;BrowserRouter&lt;/code&gt;, we can use it, when route never change(&lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/api/StaticRouter.md&quot;&gt;Document of StaticRouter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The second is &lt;code class=&quot;language-text&quot;&gt;Routes&lt;/code&gt; from ‘../Routes’, because same of all content of page, whether rendered from client or server, so we can reuse it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the first loading is from server-side in SSR, so we have to prepare basic HTML for after ‘.bundle.js’, then when ‘.bundle.js’ loaded just can continue support actions for operating of user.&lt;/p&gt;
&lt;p&gt;You can image it is for origin ‘./dist/index.html’ instead.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we have finished ‘./src/helper/renderer.js’, next back to ‘./src/server.js’ to use it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; renderer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./helpers/renderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;*&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Call renderer get content by `req` parameter&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Would content send to client&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Setting Webpack to build server&lt;/h2&gt;
&lt;p&gt;We have already finished all about code! we need setting Webpack now, let it can build server, first open ‘./webpack.config.js’, it config is for build client code(‘./src/client.js’), we have to create new config of Webpack for build server.&lt;/p&gt;
&lt;p&gt;So create new file in root, and name is ‘webpack.server.js’, and copy content of ‘./webpack.config.js’ to new file modify something:&lt;/p&gt;
&lt;p&gt;./webpack.server.js&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// (1)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; webpackNodeExternals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;webpack-node-externals&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// (2)&lt;/span&gt;
  target&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;node&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// (3)&lt;/span&gt;
  entry&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@babel/polyfill&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./src/server.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// (4)&lt;/span&gt;
  externals&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;webpackNodeExternals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  output&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    filename&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bundle.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// (5)&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./build&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    rules&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        test&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        use&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          loader&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;babel-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          options&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            presets&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@babel/preset-react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@babel/preset-env&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I modified something:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&quot;https://www.npmjs.com/package/webpack-node-externals&quot;&gt;webpack-node-externals&lt;/a&gt; from npm:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm i webpack-node-externals&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When build on server, not need contain node_modules, so we can use webpack-node-externals ignore this on building.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Server running environment is Node, It have some different setting with browser when build, so have to defined this.&lt;/li&gt;
&lt;li&gt;Modify entry file from ‘./src/client.js’ to ‘./src/server.js’.&lt;/li&gt;
&lt;li&gt;Use the first step installed webpack-node-externals to externals.&lt;/li&gt;
&lt;li&gt;Defined new folder(different with client code) to put build file of server code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then we could rename ‘./webpack.config.js’ to ‘./webpack.client.js’.&lt;/p&gt;
&lt;h2&gt;Build and running&lt;/h2&gt;
&lt;p&gt;Finally, add and modify content on script of ‘package.json’:&lt;/p&gt;
&lt;p&gt;package.json&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build-client&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack --config webpack.client.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build-server&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack --config webpack.server.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run build-client &amp;amp;&amp;amp; npm run build-server&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node build/bundle.js&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running script of build:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/4roq6s9cflgh2pvatfuv.gif&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Running server:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then open browser, and type &lt;code class=&quot;language-text&quot;&gt;localhost:3001&lt;/code&gt; to url, and look at the response on first loading:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/3fa6rwdlu68a31n9at2i.gif&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first response have complete content, next would bundle.js(client code) download, after download, then execute process all by client side, server just only be responsible for first render!&lt;/p&gt;
&lt;p&gt;Above about SSR code would find in &lt;a href=&quot;https://github.com/ms314006/implement-ssr-of-react/tree/without_redux&quot;&gt;my GitHub&lt;/a&gt;, &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The base SSR is not difficult, just prepare little server code and setting for server render, in the future, I will write SSR about react-redux.&lt;/p&gt;
&lt;p&gt;Thank for reading my post, if you have any question and think, please let me know, in comments below :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JS 的演算法養成之路 | Maximum Subarray]]></title><description><![CDATA[前言 Hi，大家好！我是神 Q 超人。每次想不到有什麼文章可以打的時候就來解解演算法，剛好也可以為未來的面試做準備，實在是一舉兩得 😂。 這次的題目難度是 Easy，但還是偷走我不少時間去苦惱，一起來看看最後怎麼解掉他 🙌。 題目：56. Maximum Subarray…]]></description><link>https://ms314006.github.io/algorithms-maximum-subarray/</link><guid isPermaLink="false">https://ms314006.github.io/algorithms-maximum-subarray/</guid><pubDate>Fri, 21 Feb 2020 15:30:36 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi，大家好！我是神 Q 超人。每次想不到有什麼文章可以打的時候就來解解演算法，剛好也可以為未來的面試做準備，實在是一舉兩得 😂。&lt;/p&gt;
&lt;p&gt;這次的題目難度是 Easy，但還是偷走我不少時間去苦惱，一起來看看最後怎麼解掉他 🙌。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目：&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; class=&quot;at ey he hf hg hh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;56. Maximum Subarray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;難易度：Easy&lt;/p&gt;
&lt;p&gt;問題描述：給定一個陣列，然後找出相鄰元素（最少一個）相加能得到的最大總和。&lt;/p&gt;
&lt;p&gt;測試案例：&lt;/p&gt;
&lt;pre&gt;
&lt;span id=&quot;f9fa&quot; class=&quot;hl hm ct bk hn b dx ho hp r hq&quot;&gt;example1:Input: [-2,1,-3,4,-1,2,1,-5,4]&lt;/span&gt;
&lt;span id=&quot;f407&quot; class=&quot;hl hm ct bk hn b dx hr hs ht hu hv hp r hq&quot;&gt;Output: 6&lt;/span&gt;
&lt;span id=&quot;da5d&quot; class=&quot;hl hm ct bk hn b dx hr hs ht hu hv hp r hq&quot;&gt;Explanation: 6 是由 [4, -1, 2, 1,] 加起來得到的，是相鄰元素相加能得到的最大總和。&lt;/span&gt;
&lt;/pre&gt;
&lt;br/&gt;
思考過程：
&lt;p&gt;一開始想的很單純，就是去讀陣列裡的所有元素，然後一個一個相加，如果「這一次的加總」比「上一次紀錄的加總」大就更新最大加總，解法大概是這樣子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;maxSubArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token comment&quot;&gt;// 「最大加總」和「目前加總」預設 Array 第一個值&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; maxSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    currentSum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 一開始相加&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentSum &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; maxSum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      maxSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentSum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 新的加總比較大就更新最大加總&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;/*
        如果沒比較大就把加總的起始元素變成下一個，
        因為保留這個會讓最大值變小，所以加總元素裡不需要有他。
      */&lt;/span&gt;
      currentSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; maxSum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是這樣會有問題，假如我的 Input 是 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;[-2, 1, -3, 4, -1, 2, 1, -5, 4]&lt;/code&gt;，那執行的過程會如下：&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;一開始設定 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 和 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 都是 -2。&lt;/li&gt;
&lt;li&gt;第一次迴圈：&lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 加上 -1 等於 -1，所以會比 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 存著的 -2 還大，於是更新 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt;，currentSum` 繼續加總。&lt;/li&gt;
&lt;li&gt;第二次迴圈：&lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 加上 -3 等於 -4，而 -4 比 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 目前存著的 -1 還小，因此不更新 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt;，然後 currentSum 歸 0 從下一個元素開始重新加。&lt;/li&gt;
&lt;li&gt;第三次迴圈：&lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 加上 4 等於 4，所以比目前 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 存著的 -1 還大，所以更新 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt;，然後讓 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 繼續加總。&lt;/li&gt;
&lt;li&gt;第四次迴圈：&lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 加上 -1 等於 3，比目前 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 中的 4 還小，因此不更新 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt;，然後 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 歸 0。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這個解法的 Bug 在於第四次迴圈，因為 4 之後所有的元素都不會比 4 還大，所以 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 會一直被歸 0，中斷與下次的加總，導致沒辦法算到 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;4 + -1 + 3&lt;/code&gt; 這個更大的結果，&lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 也永遠是 4。&lt;/p&gt;
&lt;p&gt;後來又多想了一下，決定將判斷的部分改成&lt;/p&gt;
&lt;div style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;如果 currentSum 加上 num[i]，反而小於 num[i]，那就把 currentSum 改成 num[i]&lt;/div&gt;
&lt;p&gt;因為前面的 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 加上 num[i]，如果不會讓 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 變得比 num[i] 更大，那就不如不要前面那些總計了，直接把 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 改成 num[i] 繼續加總，而在 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;currentSum&lt;/code&gt; 每次加總完也都和當前的 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 比較一下，如果比較大的話就更新 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以解法最後如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;maxSubArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; currentSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; maxSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    currentSum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentSum &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      currentSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentSum &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; maxSum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      maxSum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentSum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; maxSum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重點就在於 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;if(surrentSum &amp;#x3C; nums[i])&lt;/code&gt; 這一行判斷，如果成立的話就直接把 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;surrentSum&lt;/code&gt; 設定成更大的 nums[i]，接下來就只要一直加下一個元素，然後與 &lt;code class=&quot;ga hx hy hz hn b&quot;&gt;maxSum&lt;/code&gt; 比較，比較大的話就更新，比較小的話就不動。&lt;/p&gt;
&lt;p&gt;因為只跑一次陣列裡面的所有內容，時間複雜度應該是 O(n)，所以成績算是還不錯：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cg t u fw ak&quot; src=&quot;https://miro.medium.com/max/3908/1*OyOVCoTvZRAuREzKRbd7sg.png&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;div style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;但可不是這樣子就結束了！&lt;/div&gt;
&lt;p&gt;在這道題目的解釋後面啊，還有附上這麼一句話：&lt;/p&gt;
&lt;div style=&quot;display: flex;
    margin: 0 0 1.5em 0;
    font-style: italic;
    border-left: 3px solid;
    padding: 0 0 0 20px;&quot;&gt;
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
&lt;/div&gt;
&lt;p&gt;非常耐人尋味的一句話，就像四大天王其實有五個人一樣，不過筆者就沒有繼續研究它了，覺得能夠解出來已經相當滿足 😂，如果各位有更好或更棒的方式，請留言和我分享 🙌。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，也請告知我，我在迅速修正，非常感謝！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Vue | My first unit testing of Vue.js with Jest and @testing-library]]></title><description><![CDATA[Hello! My name is Clark! On this post, we’re gonna write test case for component of Vue.js with Jest and @testing-library, let’s we starts…]]></description><link>https://ms314006.github.io/first-unit-testing-of-vue/</link><guid isPermaLink="false">https://ms314006.github.io/first-unit-testing-of-vue/</guid><pubDate>Fri, 14 Feb 2020 23:39:26 GMT</pubDate><content:encoded>&lt;p&gt;Hello! My name is Clark! On this post, we’re gonna write test case for component of &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; with &lt;a href=&quot;https://jestjs.io/en/&quot;&gt;Jest&lt;/a&gt; and &lt;a href=&quot;https://testing-library.com/&quot;&gt;@testing-library&lt;/a&gt;, let’s we starts 😃!&lt;/p&gt;
&lt;h2&gt;Create Vue project&lt;/h2&gt;
&lt;p&gt;First of all, Even though I am sharing about test case of Vue.js on this post, but actually I more familiar &lt;a href=&quot;https://reactjs.org/&quot;&gt;ReactJS&lt;/a&gt; than Vue.js, so I’ll use &lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;Vue-CLI&lt;/a&gt; Create my first Vue project fast.&lt;/p&gt;
&lt;h3&gt;Install Vue-CLI&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g @vue/cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Create project&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vue create hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When after input &lt;code class=&quot;language-text&quot;&gt;vue create hello-world&lt;/code&gt;, The CLI tool would ask you if need other library:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/9xnvtuhq7ihw364880ts.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;But we don’t need, so pick default, let it start create project. When after creating, you can checks current path if emerge the project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/0rpbruu2uxk14vg0uum9.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Or at the path of project, execute cmd on terminal to open local server:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open browser and input url &lt;code class=&quot;language-text&quot;&gt;http://localhost:8080/&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/j3iw7bqjp6kblhbnbnq6.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Okay, now we were has a project let we start unit testing!&lt;/p&gt;
&lt;h2&gt;Install library about unit testing&lt;/h2&gt;
&lt;p&gt;I choices &lt;a href=&quot;https://jestjs.io/en/&quot;&gt;Jest&lt;/a&gt; and &lt;a href=&quot;https://testing-library.com/&quot;&gt;@testing-library&lt;/a&gt; to test Vue.js.&lt;/p&gt;
&lt;p&gt;But why not pick &lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot;&gt;@vue/test-utils&lt;/a&gt;? According to &lt;a href=&quot;https://testing-library.com/docs/intro&quot;&gt;introduction of @testing-library&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The core library has been wrapped to provide ergonomic APIs for several frameworks, including React, Angular, and Vue. There is also a plugin to use testing-library queries for end-to-end tests in Cypress and an implementation for React Native.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So &lt;a href=&quot;https://testing-library.com/&quot;&gt;@testing-library&lt;/a&gt; build a library for component of test or manipulation, whatever the component is from  to Vue.JS or ReactJS or Angular!&lt;/p&gt;
&lt;p&gt;As Far as I’m concerned, this is a very convenient to let me write unit testing between ReactJS and Vue.js.&lt;/p&gt;
&lt;p&gt;First of all on this stage, we must install above core library for unit testing:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install jest @testing-library/vue --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we can create a &lt;code class=&quot;language-text&quot;&gt;__tests__&lt;/code&gt; folder in project root path, and create a &lt;code class=&quot;language-text&quot;&gt;HelloWorld.test.js&lt;/code&gt; in that, then just try to write first case of unit testing.&lt;/p&gt;
&lt;p&gt;For example, our target of test component is &lt;code class=&quot;language-text&quot;&gt;HelloWorld.vue&lt;/code&gt;, then this content is:&lt;/p&gt;
&lt;p&gt;./src/component/HelloWorld.vue&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ msg }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      For a guide and recipes on how to configure / customize this project,&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      check out the
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cli.vuejs.org&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;_blank&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;noopener&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;vue-cli documentation&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

    /* The some tag be omitted... */

  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;HelloWorld&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, when I use this component, I hope to if I give it the props &lt;code class=&quot;language-text&quot;&gt;msg&lt;/code&gt;, it will be render this text, then this text will be display by &lt;code class=&quot;language-text&quot;&gt;h1&lt;/code&gt;, so I add &lt;code class=&quot;language-text&quot;&gt;attribute&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;test-dataid&lt;/code&gt; for &lt;code class=&quot;language-text&quot;&gt;h1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-testid&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ msg }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When testing we can find it by queries of @testing-library provide, so the case of unit testing can write:&lt;/p&gt;
&lt;p&gt;./&lt;strong&gt;tests&lt;/strong&gt;/HelloWorld.test.js&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// import library of unit testing library&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; render &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@testing-library/vue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; HelloWorld &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../src/components/HelloWorld.vue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// The case of unit testing for check render msg&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check if render props msg text in HelloWorld&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getByTestId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HelloWorld&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello, My name is Clark!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hello, My name is Clark!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Vue.js, &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; of @testing-library can have two parameters, first is component also our target of test, the second is content of props with use component, and &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; would be return all kinds of queries(ex. ByLabelText, ByText…&lt;a href=&quot;https://testing-library.com/docs/dom-testing-library/api-queries&quot;&gt;in detail&lt;/a&gt;), the above &lt;code class=&quot;language-text&quot;&gt;getByTestId&lt;/code&gt; also contain this queries, it can queries &lt;code class=&quot;language-text&quot;&gt;data-testid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we find &lt;code class=&quot;language-text&quot;&gt;h1&lt;/code&gt; tag, then can use &lt;code class=&quot;language-text&quot;&gt;innerHTML&lt;/code&gt; to check if this text same of msg of props.&lt;/p&gt;
&lt;p&gt;So far, we have to make some preparations before test, install about compiler library of Vue.js for NodeJS execute test and config of jest:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm i babel-jest jest-vue vue-jest --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open the package.json and add the new scripts and config of jest:&lt;/p&gt;
&lt;p&gt;./package.json&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;serve&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vue-cli-service serve&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vue-cli-service build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vue-cli-service lint&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jest&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Add this script for test&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;jest&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;moduleFileExtensions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;vue&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;^.+\\.js$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;babel-jest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;.*\\.vue$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;rootDir&gt;/node_modules/vue-jest&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;moduleNameMapper&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;^@/(.*)$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;rootDir&gt;/src/$1&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At last, execute unit testing by npm scripts:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/x2uvwqdhfgldsbcoctki.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;…Oh my god! have a error happened! what’s wrong with it? Umm…don’t worry! it fine! I was find out this issue:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app/issues/5259&quot;&gt;Unknown option: base.configFile error when running tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;According to it, solution is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/qkb4qc037ihhphvbq4kl.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;So I just do that, and run test when I does:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/c408bwt6r7hhid3gao6c.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;It works, and test is PASS! ✨&lt;/p&gt;
&lt;p&gt;Thanks guys for reading this post, if you have any question or find out ant wrong in the post, please submit discussion for me! 😃&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jest | Use Jest write unit testing for DOM manipulation]]></title><description><![CDATA[Hello I am Clark! Today we’re gonna write test case of unit testing for DOM manipulation. If we have a piece code of HTML and JavaScript in…]]></description><link>https://ms314006.github.io/unit-testing-for-dom-manipulation/</link><guid isPermaLink="false">https://ms314006.github.io/unit-testing-for-dom-manipulation/</guid><pubDate>Sun, 02 Feb 2020 13:39:26 GMT</pubDate><content:encoded>&lt;p&gt;Hello I am Clark! Today we’re gonna write test case of unit testing for DOM manipulation.&lt;/p&gt;
&lt;p&gt;If we have a piece code of HTML and JavaScript in one &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt; file, this is a todo list:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;newTodo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;addTodo()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Add todo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newTodoInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;newTodo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; currentTodoList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        currentTodoList &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;li&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newTodoInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/li&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentTodoList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        newTodoInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Umm…this todo list give people quite don’t know how to write test case, because this code confuse DOM with logic of JavaScript, so first of all, we should would logic of control todo list disassemble from &lt;code class=&quot;language-text&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;newTodo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;addTodo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Add todo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./todolist.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;About logic of todo list move to &lt;code class=&quot;language-text&quot;&gt;todoList.js&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newTodoInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;newTodo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; currentTodoList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  currentTodoList &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;li&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newTodoInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/li&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentTodoList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  newTodoInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addTodo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; addTodo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right now, view is view, logic is logic, so we can very easy to write test case for JavaScript, but…we no have DOM, how to trigger &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt;? yes! so we must ready DOM for test case of &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;As mention &lt;a href=&quot;https://jestjs.io/docs/en/tutorial-jquery&quot;&gt;document of Jest&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jest ships with jsdom which simulates a DOM environment as if you were in the browser. This means that every DOM API that we call can be observed in the same way it would be observed in a browser!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we can very easy to simulates a DOM environment when use Jest, get start install Jest and write test case!&lt;/p&gt;
&lt;p&gt;Install Jest in project(If you have no npm or NodeJS environment, must download Node when before start):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm inatall jest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we add file &lt;code class=&quot;language-text&quot;&gt;todoList.test.js&lt;/code&gt; and write a test case:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check addTodo able add todo to todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like above name of test case, I want test function &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt; can be real add todo to todoList.&lt;/p&gt;
&lt;p&gt;I’ve divided write test case into three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We have to find out which elements is &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt; need? let’s look at &lt;code class=&quot;language-text&quot;&gt;todoList.js&lt;/code&gt;,first we need a &lt;code class=&quot;language-text&quot;&gt;button&lt;/code&gt; of id is &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt;, we will would add click event of &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt; for it, also need a &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; of id is &lt;code class=&quot;language-text&quot;&gt;newTodo&lt;/code&gt;, last we need a &lt;code class=&quot;language-text&quot;&gt;ol&lt;/code&gt; of id is &lt;code class=&quot;language-text&quot;&gt;todoList&lt;/code&gt; to display todo list.&lt;/p&gt;
&lt;p&gt;Yes! just three elements is &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt; need! we don’t care other elements in the HTML file, we just only prepare those for test case:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check addTodo able add todo to todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;input id=&quot;newTodoInput&quot; /&gt;
    &amp;lt;button id=&quot;addTodoBtn&quot;&gt;Add todo&amp;lt;/button&gt;
    &amp;lt;ol id=&quot;todoList&quot;&gt;&amp;lt;/ol&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; import &lt;code class=&quot;language-text&quot;&gt;todoList.js&lt;/code&gt; file add logic to elements of readied, it have logic of &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt;, it is we target of test in test case too:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check addTodo able add todo to todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;input id=&quot;newTodoInput&quot; /&gt;
    &amp;lt;button id=&quot;addTodoBtn&quot;&gt;Add todo&amp;lt;/button&gt;
    &amp;lt;ol id=&quot;todoList&quot;&gt;&amp;lt;/ol&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../todolist.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Use selector get element, write new todo name &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; and trigger &lt;code class=&quot;language-text&quot;&gt;addTodo&lt;/code&gt; by &lt;code class=&quot;language-text&quot;&gt;button&lt;/code&gt;, then check if &lt;code class=&quot;language-text&quot;&gt;innerHTML&lt;/code&gt; of &lt;code class=&quot;language-text&quot;&gt;ol&lt;/code&gt; correct add new todo!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check addTodo able add todo to todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;input id=&quot;newTodoInput&quot; /&gt;
    &amp;lt;button id=&quot;addTodoBtn&quot;&gt;Add todo&amp;lt;/button&gt;
    &amp;lt;ol id=&quot;todoList&quot;&gt;&amp;lt;/ol&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../todolist.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newTodoInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;newTodoInput&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addTodoBtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addTodoBtn&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; todolist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todoList&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  newTodoInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;New todolist!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  addTodoBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;todolist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;li&gt;New todolist!&amp;lt;/li&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we’re finish first test case for &lt;code class=&quot;language-text&quot;&gt;todoList.js&lt;/code&gt;! let’s execute test check if logic correct:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/zm5hz3qafcvjuzhvvmig.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Thanks guys for reading this post, if you have any question or find out ant wrong in the post, please submit discussion for me! 😃&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JS 的演算法養成之路 | Merge Intervals]]></title><description><![CDATA[前言 Hi！大家好，我是神 Q 超人。這篇是練習演算法的文章，雖然目前還是很菜，但是希望可以藉由把自己的解法分享給大家，來互相討論得到進步！ 題目：56. Merge Intervals 難易度：Medium…]]></description><link>https://ms314006.github.io/algorithms-merge-intervals/</link><guid isPermaLink="false">https://ms314006.github.io/algorithms-merge-intervals/</guid><pubDate>Sun, 26 Jan 2020 09:55:45 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi！大家好，我是神 Q 超人。這篇是練習演算法的文章，雖然目前還是很菜，但是希望可以藉由把自己的解法分享給大家，來互相討論得到進步！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目：&lt;a href=&quot;https://leetcode.com/problems/merge-intervals/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;56. Merge Intervals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;難易度：Medium&lt;/p&gt;
&lt;p&gt;問題描述：給定一個陣列，裡面的每一個元素都會是裝著兩個數字的陣列，而這兩個數字代表範圍，我們要做的就是將每個元素間有重疊到範圍的部分合併或是移除，結果必須要回傳一個新的陣列。&lt;/p&gt;
&lt;p&gt;測試案例：&lt;/p&gt;
&lt;pre&gt;
&lt;span id=&quot;2d81&quot; class=&quot;hs ht dc bk hu b eg hv hw r hx&quot;&gt;example1:&lt;/span&gt;&lt;span id=&quot;dd60&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;Input: [[1, 4], [2, 7], [8, 14]]&lt;br&gt;Output: [[1, 7], [8, 14]]&lt;br&gt;Explanation: Input 陣列中的第二個元素的起始數字是 2，但因爲 2 已經包含在第一個元素的 1 和 4 之間了，所以直接將兩個元素合併。&lt;/span&gt;&lt;br /&gt;

&lt;span id=&quot;542a&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;example2:&lt;/span&gt;&lt;span id=&quot;b5e5&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;Input: [[1, 4], [4, 6]]&lt;br&gt;Output: [[1, 6]]&lt;br&gt;Explanation: Input 陣列中的第二個元素起始數字是 4，但它與第一個元素的結束數字 4 相等，所以也可以直接合併成一個元素，範圍則是 1 和 6。&lt;/span&gt;&lt;br /&gt;

&lt;span id=&quot;2ac3&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;example3:&lt;/span&gt;&lt;span id=&quot;c941&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;Input: [[1, 4], [0, 4], [6, 10]]&lt;br&gt;Output: [[0, 4], [6, 10]]&lt;br&gt;Explanation: Input 陣列中的第二個元素的起始數字是 0，但是 0 比第一個元素的 1 和 4 還小，所以要合併成一個元素，範圍則變成 0 和 4。&lt;/span&gt;&lt;br /&gt;

&lt;span id=&quot;2a74&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;example4:&lt;/span&gt;&lt;span id=&quot;5f92&quot; class=&quot;hs ht dc bk hu b eg hy hz ia ib ic hw r hx&quot;&gt;Input: [[1, 8], [3, 6]]&lt;br&gt;Output: [[1, 8]]&lt;br&gt;Explanation: 因為 Input 陣列中的第一個元素範圍是 1 到 8，而 8 已經大於第二個元素的範圍了，所以就直接被合併成一個。&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
思考過程：
&lt;p&gt;這一題的主要想法有兩個步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;9082&quot; class=&quot;gs gt dc bk gu b gv gw gx gy gz ha hb hc hd he hf id ie if&quot;&gt;因為第二個測試案例的關係，發現它給的陣列不一定會由小到大排序，所以一開始先為陣列以每個元素的起始數字做排序。&lt;/li&gt;&lt;li id=&quot;98e8&quot; class=&quot;gs gt dc bk gu b gv ig gx ih gz ii hb ij hd ik hf id ie if&quot;&gt;透過迴圈判斷需不需要被合併，或是直接移除下一個元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解法：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;intervals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;intervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; workIntervals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; intervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;workIntervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workIntervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lastIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;intervalStart&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; intervalEnd&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workIntervals&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; intervalEnd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      workIntervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; intervalStart&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; intervalEnd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      workIntervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workIntervals&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先判斷傳進來的陣列如果是空的話就也回傳空的，而如果有值的話就將陣列用每個元素的起始值排序，接下來把第一個元素丟進 &lt;code class=&quot;gd im in io hu b&quot;&gt;result&lt;/code&gt; 中，再透過 &lt;a href=&quot;https://www.w3schools.com/js/js_loop_while.asp&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;while&lt;/a&gt; 迴圈判斷三種狀況來處理下一個元素，而三種狀況分別是：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;23ec&quot; class=&quot;gs gt dc bk gu b gv gw gx gy gz ha hb hc hd he hf id ie if&quot;&gt;當前元素的結束值大於下一個元素的結束值，那就直接把下一個元素移除。&lt;/li&gt;&lt;li id=&quot;8a96&quot; class=&quot;gs gt dc bk gu b gv ig gx ih gz ii hb ij hd ik hf id ie if&quot;&gt;當前元素的結束值大於下一個元素的起始值，那就代表要合併，所以把當前元素的結束值要變成下個元素的結束值。&lt;/li&gt;&lt;li id=&quot;a1f9&quot; class=&quot;gs gt dc bk gu b gv ig gx ih gz ii hb ij hd ik hf id ie if&quot;&gt;最後是如果都沒有重疊，那就直接把下一個元素不做處理放進結果裡面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這個解法的效能其實很不好，因為一開始先排序的關係，就會先把每個元素都跑一次，然後處理完排序又要再跑一次迴圈比對每一個元素是否該合併或是移除，所以如果陣列內的元素越多，那這個解法的效率就會越差。&lt;/p&gt;
&lt;p&gt;挑戰成績：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/2996/1*PeK8s3UK7jlccuc_Oymg_A.png&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;這次選擇的題目難度是 Medium 的！也是本系列中第一個 Medium 等級的題目（第二篇就晉級會不會太快 😂），認真說感覺還滿苦手的，尤其是第一次解出來後，有點想優化效能又不知道從哪裡開始，如果有任何建議或問題歡迎各位留言和我討論 🙌&lt;/p&gt;</content:encoded></item><item><title><![CDATA[神 Q 超人 | 屬於前端工程師的 2019 歷險回顧 👨‍💻]]></title><description><![CDATA[前言 Hi！大家好我是神 Q 超人，這篇文章想要單純回顧下，在正式轉職為前端工程師的這一年中，我身上發生了什麼事情，那為什麼會想要打這篇呢？因為我覺得 然後最近讀到非常非常非常喜歡的文章是「Why & How I built css.gg — A life story…]]></description><link>https://ms314006.github.io/review2019/</link><guid isPermaLink="false">https://ms314006.github.io/review2019/</guid><pubDate>Tue, 31 Dec 2019 18:26:52 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi！大家好我是神 Q 超人，這篇文章想要單純回顧下，在正式轉職為前端工程師的這一年中，我身上發生了什麼事情，那為什麼會想要打這篇呢？因為我覺得&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;記錄自己是一件非常重要的事情，&lt;/div&gt;
&lt;p&gt;然後最近讀到非常非常非常喜歡的文章是「&lt;a href=&quot;https://dev.to/astrit/why-how-did-i-build-500-css-only-icons-library-a-life-story-34on&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Why &amp;#x26; How I built css.gg — A life story.&lt;/a&gt;」，雖然裡面描述的是做一個 Project 的過程，但在文章裡更能發現作者&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;因為熱愛一件事，所以才能做到！&lt;/div&gt;
&lt;p&gt;尤其是裡面的一段話：&lt;/p&gt;
&lt;div style=&quot;border-left: 4px solid #333; padding-left: 26px; margin: 20px 0px; font-size: 20px; font-style: italic; &quot;&gt;
I am trying to express how I felt on the beginning of the year and where I am now on the best just HAPPY, freelancing and full of energy to continue on 2020 and I want to inspire you do the same, make the difference make what you love no matter what it is, feel fulfilled and don’t listen any thing else that will make you stop.
&lt;/div&gt;
&lt;p&gt;作者想表達現在的他和開始時一樣，對自己在做的事情感到快樂！且同樣想要激勵各位在 2020 年「愛上改變，且繼續向前邁進！」&lt;/p&gt;
&lt;p&gt;因此這是很棒的機會，尤其是在我成為前端工程師後的第一年，想透過這篇文章檢視自己是否和一年前一樣，熱愛前端技術且充滿熱情！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;轉職前端之前&lt;/h2&gt;
&lt;p&gt;就如同標題所提到的！其實我成為前端工程師也才短短的一年而已，而且真正開始學 React 這個框架是在 2018 年的鐵人賽，用「&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20106935/ironman/1651&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;一步一腳印的 React 旅程&lt;/a&gt;」學會的（文章內容相當粗糙，慎入 😂）&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;但學完了，然後呢？&lt;/div&gt;
&lt;p&gt;因為當時的工作是用 ASP.NET，沒辦法讓我更深入練習 React 的應用技巧，所以雖然能力還很菜，但仍然把心一橫，怒接個案子來做，然後在團隊裡專門負責前端的部分，使用的框架當然也是 React。&lt;/p&gt;
&lt;p&gt;在專案的執行期間也考慮過很多事情，印象比較深刻的大概是那時候搞不清楚為什麼 Store 在每個專案中只能有一個，還有用 &lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;redux-thunk&lt;/a&gt; 解決了在 Redux 中使用非同步的問題。總之就是不挺不知道，挺過了就會感受到自己能力的提升，因此&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;實戰經驗真的很重要！&lt;/div&gt;
&lt;h2&gt;工作&lt;/h2&gt;
&lt;p&gt;說到工作也真的非常幸運，我履歷投了兩間用 React 開發的新創，也都有通過面試拿到 offer，而這兩間都是朋友在 Facebook 的社群裡看見的徵才資訊，然後轉貼給我，可以說沒有他們就沒有現在的我 😭&lt;/p&gt;
&lt;p&gt;兩間的面試過程其實差不多！都是聊天居多，我想可能是因為新創公司比較重視人格特質，就沒有特別對技術另外做測試，值得一提的是他們都很佩服「經營部落格撰寫技術文章」這件事情，認為這是一種對於「熱情」的展現，在沒有人要你這麼做，逼你一定要產出文章的情況下，你還是會做&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;那就是因為你真的喜歡！&lt;/div&gt;
&lt;p&gt;最後我選擇了在高雄的新創公司，現在每天搭火車從台南往返通勤 🚃&lt;/p&gt;
&lt;h2&gt;Medium&lt;/h2&gt;
&lt;p&gt;在部落格上今年做的改變是從 &lt;a href=&quot;https://ithelp.ithome.com.tw/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;itHelp&lt;/a&gt; 跳到 Medium，那時候的我是抱著今年一定要開始產出英文文章的心情下轉換平台，但結果我還是一篇英文文章都沒有發 😭，算是自己滿廢的一點，但是在 2020 年的我就不一樣了，絕對會發個幾篇讓大家瞧瞧！&lt;/p&gt;
&lt;p&gt;除了跳到 Medium 外還有另外一個突破就是，我嘗試著把自己的文章依照主題分別鋪天蓋地的分享到 &lt;a href=&quot;https://www.facebook.com/groups/javascript.tw/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;JavaScript.tw&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/groups/f2e.tw/?ref=group_header&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Front-End Developers Taiwan&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/groups/reactjs.tw/?ref=group_header&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;ReactJS.tw&lt;/a&gt; 等 Facebook 社團，除了想要幫助更多人外，還有一個原因是&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;我不想要寫下文章只是自爽，不想當平行時空旅人，&lt;/div&gt;
&lt;p&gt;我想知道自己內化的知識到底正不正確，想讓大家討論我的文章，或是我的任何想法，我極度渴望有人可以告訴我文章裡的內容是不是對的！如果你也有這樣子的慾望，那相信我，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;寫下文章，然後分享出去！絕對是得到 Feedback 最快的方法。&lt;/div&gt;
&lt;p&gt;不過常常有人覺得說「哇！你文章打得還不錯欸！真好，像我就不行了！」通常聽到這句話的時候，我都會貼出我在 itHelp 上的第一篇技術文章：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/3112/1*xrra_QWi5bsJ1zGPW2qqWg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x539F;&amp;#x6587;&amp;#x9023;&amp;#x7D50;&amp;#xFF1A;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10190251&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://ithelp.ithome.com.tw/articles/10190251&lt;/a&gt;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;就是那麼水 😂，所以不是每個人第一次都可以做得好的，只有不斷去做某件事情，那自然而然這件事就會慢慢成為你的形狀！&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;不要多想，做就對了 🙌&lt;/div&gt;
&lt;h2&gt;Modern Web &amp;#x26; Mopcon&lt;/h2&gt;
&lt;p&gt;在 2019 年剛開始，我其實就想說要做些不一樣的事情，而投稿成為講者也在清單之內！至於為什麼？也真的說不出來，畢竟我就是一個&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;先衝再說的男人，&lt;/div&gt;
&lt;p&gt;雖然 Modern Web 投稿被婉拒了，但我始終相信&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;沒有 Modern Web 的失敗，就不會有 Mopcon 的成功！&lt;/div&gt;
&lt;p&gt;關於這部分的心得可以直接看「&lt;a class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://ms314006.github.io/mopcon2019/&quot;&gt;一連串奇蹟換來一次成為講者的機會 feat. MOPCON 2019&lt;/a&gt;」這裡就不另外說了。&lt;/p&gt;
&lt;h2&gt;第二屆 F2E 精神時光屋&lt;/h2&gt;
&lt;p&gt;這次的精神時光屋真的讓我感受到自身的成長！因為第一屆我其實也有參賽，但是那時候還不會使用 React，對前端的掌握度也還不高，所以每週做出來的成果都慘不忍睹，不求功能只求有畫面就好。雖然在學會 React 有嘗試慢慢的把第一屆的坑都填起來，但進度還是很慢 😂&lt;/p&gt;
&lt;p&gt;好！話說回來到第二屆之所以感覺到成長是因為幾乎每週的題目都做出來了！而且除了核心功能外，有時候還能調整 RWD、能再多玩玩新技術和使用新框架，例如 &lt;a href=&quot;https://material-ui.com/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Material-UI&lt;/a&gt;、&lt;a href=&quot;https://www.typescriptlang.org/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;TypeScript&lt;/a&gt; 等。&lt;/p&gt;
&lt;p&gt;而之所以能變得那麼游刃有餘，我認為&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;思考是一件很重要的事情！&lt;/div&gt;
&lt;p&gt;因為時間真的不多，每個禮拜都要處理好一個版和對應的功能，沒有太多時間能夠去嘗試，所以在看到設計稿的當下，就必須開始思考哪些邏輯可以切出來，Class 怎麼寫，Component 能不能夠複用等等，並歸納出一定要有的核心功能，然後將它完成！&lt;/p&gt;
&lt;p&gt;最後不瞞各位說，其實大部分的版都是把火力集中在六日完成的，因此還是有很多地方需要改進，包括還沒完整的功能，如果各位有興趣可以到 &lt;a href=&quot;https://challenge.thef2e.com/user/637&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;我的第二屆 The F2E 作品頁面&lt;/a&gt; 看看：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/3368/1*J4C_UTQDGT0PgfgawKZOdA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x622A;&amp;#x5716;&amp;#x81EA;&amp;#xFF1A;&lt;a href=&quot;https://challenge.thef2e.com/user/637&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://challenge.thef2e.com/user/637&lt;/a&gt;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2&gt;第十一屆 itHelp 鐵人 30&lt;/h2&gt;
&lt;p&gt;因為第 10 屆的鐵人賽把 React 寫的亂七八糟，所以今年再一次強勢選擇 React 並用「&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20106935/ironman/2188&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;在 React 生態圈內打滾的一年 feat. TypeScript&lt;/a&gt;」做為題目，原因除了是希望能更好的詮釋 React 外，也是一種對過去的彌補，更是要考驗自己過了一年後對 React 的掌握度是否更高！&lt;/p&gt;
&lt;p&gt;其實這一次的壓力相比去年來說小了很多，因為記取第一次的經驗，在開始前就規劃好了 30 天的內容，而且在開賽前兩個月就在龜速準備了，雖然到開賽那天文章庫存量大概還不到一半，但是因為&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;有些知識都已經內化了，&lt;/div&gt;
&lt;p&gt;所以其實打起來不算困難，有時候一個假日就能預先打完好幾篇！&lt;/p&gt;
&lt;p&gt;最後讓我非常開心的是……我得獎了！雖然只是佳作，但受到肯定的感覺真的很棒！&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/2564/1*IrlTVGaRtAOszEh582pOjQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x622A;&amp;#x5716;&amp;#x81EA;&amp;#xFF1A;&lt;a href=&quot;https://ithelp.ithome.com.tw/2020ironman/reward&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://ithelp.ithome.com.tw/2020ironman/reward&lt;/a&gt;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2&gt;StarBugs Weekly&lt;/h2&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/3988/1*C-k03Uv-ChljcIIbWJ00Vg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x79D2;&amp;#x901F;&amp;#x8A02;&amp;#x95B1;&amp;#xFF1A;&lt;a href=&quot;https://weekly.starbugs.dev/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://weekly.starbugs.dev/&lt;/a&gt;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;事情是發生在某一天，有個人突然加我好友，接著告訴我說：&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;想弄一個基於 Medium 的技術共筆，類似 techbridge，但是是基於 Medium 技術寫作，讓大家的文章可以獲得更多的曝光。&lt;/div&gt;
&lt;p&gt;想弄一個基於 Medium 的技術共筆，類似 techbridge，但是是基於 Medium 技術寫作，讓大家的文章可以獲得更多的曝光。&lt;/p&gt;
&lt;p&gt;這個人就是 &lt;a href=&quot;https://medium.com/u/513eb1c0f7c1?source=post_page-----9bee6610b3c6----------------------&quot; class=&quot;jo br cg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Luka Huang&lt;/a&gt;，Luka 說一開始想要找齊 4 個人，因此又在茫茫人海中找到了 &lt;a href=&quot;https://medium.com/u/c3d4e0232dc0?source=post_page-----9bee6610b3c6----------------------&quot; class=&quot;jo br cg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Larry Lu&lt;/a&gt; 和 &lt;a href=&quot;https://medium.com/u/469c6ad169e9?source=post_page-----9bee6610b3c6----------------------&quot; class=&quot;jo br cg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;smalltown&lt;/a&gt;，然後從 0 開始討論一直到 StarBugs Weekly 的誕生，這裡也要非常感謝隊友們很 carry 因為我在初期非常少注意到訊息 😭&lt;/p&gt;
&lt;p&gt;StarBugs 給我最大的改變是，我必須比之前還要更頻繁地接收新文章的資訊！然後過濾哪些是值得推薦給大家的文章，以前除非必要，否則總是很懶得好好看完一篇文章，但是其實這是不對的。&lt;/p&gt;
&lt;p&gt;在文章裡我們能學到的並不是只有知識，閱讀文章&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;就像在與作者進行一場交談，了解他如何表達想表達的以及思考事情的方法！&lt;/div&gt;
&lt;p&gt;那這裡向大家推薦幾個很棒的國外論壇，像是 &lt;a href=&quot;https://dev.to/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;DEV&lt;/a&gt;、&lt;a href=&quot;https://dzone.com/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;DZone&lt;/a&gt; 或是從 Medium 中出走的 &lt;a href=&quot;https://hackernoon.com/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;hackernoon&lt;/a&gt; 都有許多很豐富的資源可以參考！&lt;/p&gt;
&lt;h2&gt;F2EUnit.tw&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/groups/F2EUnit.tw/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;F2EUnit.tw&lt;/a&gt; 是在 Mopcon 後一直想做的事，然後也真的做了！這裡很感謝好想工作室的 &lt;a href=&quot;https://dwatow.github.io/&quot; class=&quot;at cg go gp gq gr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Chris&lt;/a&gt;，他在某個禮拜六的早上接受了我的滿腔熱血，然後經過簡單的討論，在隔天就秒速將社團建立起來！也要感謝大家很踴躍的加入社團！真的希望能夠將前端的單元測試推廣出去讓大家認識它！且希望這個平台可以提供有效的資源，讓各種框架的使用者都能夠在裡面找到學習資源和方向！&lt;/p&gt;
&lt;p&gt;但是目前比較苦惱的是社群的經營方式，因為感覺前端的單元測試距離大家還是太遠了，這個部分也常常和 Chris 討論，每次 Chris 都會提出非常有趣的想法！也有很多方向可以執行，但是自身的能力還不太足，沒有辦法好好的去規劃，希望在 2020 年可以這些想法們通通推送到社團中！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;感覺 2019 年過得很快，做的事情也很多，但是真正列出來其實也還好，不曉得時間到底是怎麼被偷走的 😂&lt;/p&gt;
&lt;p&gt;總之我非常感謝 2019 年的自己，除了轉職前端做著自己真正熱愛的事情外，也好好的繼續經營部落格、成為了講者、創建了社團還有和朋友們一起進行很酷的事情！&lt;/p&gt;
&lt;p&gt;希望 2020 年的我，仍然會保持「愛上改變，且繼續向前邁進！」的態度，繼續行走在端工程師之路！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[一連串奇蹟換來一次成為講者的機會 feat. Mopcon 2019]]></title><description><![CDATA[前言 Hi！大家好，我是神 Q 超人，今年非常幸運能夠將自己第一次的講者經歷奉獻給 MOPCON…]]></description><link>https://ms314006.github.io/mopcon2019/</link><guid isPermaLink="false">https://ms314006.github.io/mopcon2019/</guid><pubDate>Sun, 17 Nov 2019 14:30:04 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi！大家好，我是神 Q 超人，今年非常幸運能夠將自己第一次的講者經歷奉獻給 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt;，其實現在如果再來一次，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;我還是會緊張到像隨時要把胃液給吐出來&lt;/div&gt;
&lt;p&gt;就和當天整個上午的狀態一樣，但既然一點都不上手，為什麼還要打這篇文章呢？因為對我來說這機會就像天上掉下來的一樣，如果不想辦法做一點紀念，怕幾年過後我就會忘記那個胃液快衝出喉嚨的感覺 😂&lt;/p&gt;
&lt;p&gt;然後先聲明一下，不能說這篇文章會帶給在觀看的你們什麼幫助，但如果大家有一點點好奇在講者（至少是我 XD）背後的故事，也許可以試著看下去，本篇文章會掏心掏肺掏肝掏胃，把還記得的過程通通都說出來，看完後或許明年大家也能考慮衝個一波 🙌&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;為什麼要投稿？&lt;/h2&gt;
&lt;p&gt;其實想法很單純，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;就是想做點不一樣的事情看看&lt;/div&gt;
&lt;p&gt;而且一開始其實也沒有打算投 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt;，最初是在閒逛 &lt;a href=&quot;https://ithelp.ithome.com.tw/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;itHelp&lt;/a&gt; 的時候，突然看見「鐵人賽結束，然後呢？」之類的廣告，點進去是 &lt;a href=&quot;https://modernweb.tw/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Modern Web&lt;/a&gt; 的徵稿資訊，一時興起就想說，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;不然我也來投投看好了，反正也沒有任何損失&lt;/div&gt;
&lt;p&gt;結果怒收一封感謝信 😭&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/2200/1*TdW_OKKBg6iZOQVWqwXF1g.png&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;雖然當初就沒有抱著會中的心情，但説不難過還是騙人的，灰心喪志地想說我可能沒有這方面的天份，還是繼續打文章修煉好了。&lt;/p&gt;
&lt;p&gt;後來因爲有個同事是 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 的工作人員，她就告訴我：「不然你修一下稿子，再拿來投 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 啊！」，聽到後其實我很猶豫，猶豫到截稿前最後一個禮拜都還沒有辦法下決定，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;因為我害怕失敗&lt;/div&gt;
&lt;p&gt;其實我也沒有想過自己那麼玻璃心 😂，我一直以為我是個放的開的男人，結果發現原來我放不開，後來的我是在非常非常強烈的決心下，強迫自己重新寫過稿子，再戰一次 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;雖然按下送出投稿的當下心裡還是非常忐忑，不過真的很感謝當時的衝動和勇氣，才能夠幸運地得到這一次的機會：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/2812/1*yRgCc5u1YPlKPdDEG9x74g.jpeg&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2&gt;稿子內容怎麼寫的？&lt;/h2&gt;
&lt;p&gt;大家可能會很好奇這一段，如何把自己要講的議程描述出來投稿，這點也是我非常頭痛的地方，但因為經歷了 &lt;a href=&quot;https://modernweb.tw/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Modern Web&lt;/a&gt; 的失敗，讓我在重新寫稿前，更仔細的思考為什麼被 &lt;a href=&quot;https://modernweb.tw/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Modern Web&lt;/a&gt; 給婉拒，最後大概是歸納了一個主要原因，那就是&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;我沒有清楚表達要講什麼內容&lt;/div&gt;
&lt;p&gt;因為第一份稿子太像在寫文章，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;評審無法掌握我講的東西到底有沒有價值，以及議程核心觀念是什麼，能給聽眾什麼。&lt;/div&gt;
&lt;p&gt;於是在投 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 的時候，與其去修改投給 &lt;a href=&quot;https://modernweb.tw/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Modern Web&lt;/a&gt; 的稿子，不如整個砍掉重練，而這一次在寫稿的時候，雖然也是用寫文章的方式，但我多考慮了議程的節奏，大概的格式架構分成以下幾個部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;1e39&quot; class=&quot;ha hb dc bk hc b hd ij hf ik hh il hj im hl in hn jg jh ji&quot;&gt;簡單描述議程想要分享的是什麼，內容有什麼特別之處，和別人有哪些不同。&lt;/li&gt;&lt;li id=&quot;ec66&quot; class=&quot;ha hb dc bk hc b hd jj hf jk hh jl hj jm hl jn hn jg jh ji&quot;&gt;考慮受眾對議程主題的了解程度，決定以哪些觀念切入，這些觀念帶給聽眾什麼。&lt;/li&gt;&lt;li id=&quot;a6d6&quot; class=&quot;ha hb dc bk hc b hd jj hf jk hh jl hj jm hl jn hn jg jh ji&quot;&gt;切入後，以我的議程來說，思考大家可能會遇到哪些問題，以遇到的問題再帶出自己想表達的議程核心，這些主要都是站在聽眾的角度，來擬出議程稿子的內容。&lt;/li&gt;&lt;li id=&quot;eccc&quot; class=&quot;ha hb dc bk hc b hd jj hf jk hh jl hj jm hl jn hn jg jh ji&quot;&gt;最後的整合階段，就是替聽眾整理在實務上能得到的實際效益是什麼？有可能會遇到的問題還有哪些？等等……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但因為我的議程是講解技術概念的類型，如果大家打算以其他類型做投稿，可能就不太適合用以上幾點架構，但是不論是哪一種類型的稿子，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;最重要的是清楚你要表達什麼與能給聽眾什麼&lt;/div&gt;
&lt;p&gt;至於我對稿子最有自信的地方可能就是「分享實務經驗」這點，因為不論是何種技術都可以在網路上找到，但實務經驗就是很寶貴的內容，建議大家可以著重分享這個部分，讓議程變得與眾不同。&lt;/p&gt;
&lt;h2&gt;訪問時間&lt;/h2&gt;
&lt;p&gt;對！但是光是我講完全沒有任何公信力對吧？記得我上方提到的同事嗎？其實有參加 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 到最後的大家應該都有看過，她就是 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON 2019&lt;/a&gt; 最後一場 Keynote （&lt;a href=&quot;https://mopcon.org/2019/schedule/?id=2019036&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;職涯論壇 — 接下來要繼續當工程師，或者轉職到管理職？&lt;/a&gt;）的主持人，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;叫做 Brook&lt;/div&gt;
&lt;p&gt;因為一直很扼腕沒在議程上自我介紹到，所以這裡就幫她一把了：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/3344/1*l9X_564RqN8xxL3MgRDMmA.jpeg&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Brook &amp;#x7684;&amp;#x5E25;&amp;#x7167;&amp;#xFF08;&amp;#x5DF2;&amp;#x7372;&amp;#x5F97;&amp;#x672C;&amp;#x4EBA;&amp;#x540C;&amp;#x610F;&amp;#x4F7F;&amp;#x7528;&amp;#xFF09;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;她非常大方的就答應我的訪問，我也整理了三個應該是大家最好奇的問題請教她，讓大家以後如果想要投稿，但又無法決定主題時可以參考：&lt;/p&gt;
&lt;h3&gt;一、議程的審核的方式與流程？&lt;/h3&gt;
&lt;div style=&quot;border-left: 4px solid #333; padding-left: 26px; margin: 20px 0px; font-size: 20px; font-style: italic; &quot;&gt;
&lt;p&gt;Brook：首先我們會依照該年的主題來組織議程委員會，委員們負責對投稿與推薦講者做內容品質的審核。雖然議程委員們都非常低調，但大家還是可以在官網的主辦社群看到各自年份的委員會成員。&lt;/p&gt;
&lt;p&gt;收到投稿之後議程組會進行初步整理，再送給議程委員審核投稿內容。在審查時議程委員們可能會針對特定的面向給予投稿意見或評審想法，並在結尾歸納出適合 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 與否的建議。&lt;/p&gt;
&lt;p&gt;基本上，每位議程委員著重的部分都不太一樣。有部分議程委員非常重視分享與社群交流的精神，如果在會後不能提供任何紀錄（簡報等資訊），讓後人參考學習會扣掉很多分數。也有一部份的議程委員對於喜愛的講題，會在表單上註記感覺很精彩、想聽這個議程之類的意見！&lt;/p&gt;
&lt;p&gt;最終不管有沒有通過審核，我們都會把委員們提出的寶貴建議與和投稿者較相關的意見，以匿名方式轉述給投稿人，希望能藉此讓獲選者能把講題修飾地更佳臻善、落選者也能藉此改進未來的投稿內容增加獲選可能，但如果沒有相關的意見可能就不會收到。&lt;/p&gt;
&lt;p&gt;最後，議程組才會依照審核結果，進一步以「 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 的會眾角度思考，組織出吸引人的精彩議程」為原則，來考量稿件的取捨。&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;二、什麼內容的投稿會比較受歡迎？&lt;/h3&gt;
&lt;div style=&quot;border-left: 4px solid #333; padding-left: 26px; margin: 20px 0px; font-size: 20px; font-style: italic; &quot;&gt;
&lt;p&gt;Brook：除了要符合該年主題外（通常會標註在投稿的頁面上），最重要的一點是一定要提供足夠的資訊，讓評審可以充分暸解，甚至能夠想像你大概會講什麼、怎麼講。&lt;/p&gt;
&lt;p&gt;以內容組成來說，根據過往的經驗，在講題中帶入故事會更吸引會眾。如果講題是偏理論、技術的內容，那藉由故事可以讓會眾更容易吸收與想像。另一方面，如果是偏應用的內容，也能以故事帶會眾進入那個情境、發現並解決痛點。&lt;/p&gt;
&lt;p&gt;所以推薦在投稿時規劃適合的故事，幫助評審更輕易地暸解內容。&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;三、哪些類型的主題容易一看就刷掉？&lt;/h3&gt;
&lt;div style=&quot;border-left: 4px solid #333; padding-left: 26px; margin: 20px 0px; font-size: 20px; font-style: italic; &quot;&gt;
&lt;p&gt;Brook：除非違反規則，否則絕大多數的投稿都不會直接刷掉，但誠如第一個回答所說，最重要的一點是避免提供過少或難以理解的內容，如果連稿件都寫得不清不楚，也很難說服這樣子的表達能力在台上能發揮多少。&lt;/p&gt;
&lt;p&gt;除此之外，也會評估這個講題是不是已經有非常多的資源（在網路或書籍等等），以及在這次是否有提出任何新意或經驗。&lt;/p&gt;
&lt;p&gt;沒想到在投稿之後，MOPCON 的議程委員與議程組還需要做那麼多的工作，在這裡微薄的對他們說聲辛苦了 🙌&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;會前準備&lt;/h2&gt;
&lt;p&gt;真正的考驗其實是在 Get 錄取通知後，不瞞各位說，在收到錄取通知後我就先跑日本玩個一趟（其實是早就規劃好了 XD），結果回來後才明白什麼叫做地獄，因為從來沒有演講經驗的我，第一次居然就登板 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 這種大場合，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;導致我在準備階段三天兩頭抱頭懊悔，恨不得回到過去阻止自己投稿。&lt;/div&gt;
&lt;p&gt;但通常過了幾分鐘後就又認命回到電腦桌前，繼續在 &lt;a href=&quot;https://hackmd.io/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;HackMD&lt;/a&gt; 上敲敲打打，一開始我是打算先把所有能講、瞭解的東西都打上去，最後再根據內容刪刪減減，並整理重點到簡報上。&lt;/p&gt;
&lt;p&gt;於是計畫 A 就真的讓我打了很多亂七八糟的東西 😂，後來想想這樣子好像不可行，我應該要有系統性的規劃自己要講什麼，而不是只把能講的說出來，於是我去打開當時投出的稿，想說從這裡下手，先把每個部分要講的東西放到簡報裡，之後擬出每一張簡報要講哪些內容&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;然後把它們通通背起來。&lt;/div&gt;
&lt;p&gt;對沒錯，就是真的那麼硬，沒有經驗的我只能這樣子土炮到底，所以下班後不是在擬講稿就是在背講稿，然後每次背的時候都會錄音下來自己聽一遍，而大概在 &lt;a href=&quot;https://mopcon.org/2019/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;MOPCON&lt;/a&gt; 開始前的那個禮拜四，我試講一遍給我朋友聽，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;結果他們居然聽到睡著 😭&lt;/div&gt;
&lt;p&gt;在當天晚上，雖然時間已經十萬火急，但我還是做了一件事情，就是把後面那些稿子都砍掉，不背也不講了，因為在沒有任何畫面的狀況下，要用說的去描述如何寫好測試案例，以及遇到的問題和怎麼修正真的太困難了，想到聽眾可能也沒見過測試案例（結果在議程中我有詢問大家有沒有寫過單元測試，結果大概 95% 的人都舉手哦！），就橫了心決定直接現場 Coding 了！&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;與其用說的讓大家聽懂，不如實作給大家看懂&lt;/div&gt;
&lt;p&gt;所以當天禮拜四又開始思考該以什麼樣的例子來帶入，在時間不多，希望一切從簡的狀況下，我準備了一個基本的 JavaScript 函式、計數器的 Component、還有 Mock 的應用這幾個例子（雖然最後時間還是來不及讓我全部講完，只能在 QA 時間補充 😭），隔天禮拜五我又請朋友再聽一次，回饋就都還不錯，只是 Live Coding 的劇本還要再練得更熟，而這時候也就已經是當時在議程上講的內容了！&lt;/p&gt;
&lt;p&gt;這裡附上一堆版本的 &lt;a href=&quot;https://hackmd.io/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;HackMD&lt;/a&gt; 😂&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/3224/1*IbWEwMXdKVMdzhRRS3gWOw.png&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2&gt;議程當天&lt;/h2&gt;
&lt;p&gt;當天真的緊張到爆炸，就算在講者休息室吃了一堆麵包餅乾（真的很好吃），也沒有辦法平復那緊張的心情，於是只好跑到會場內四處晃晃，然後聽聽其他人的議程（這時候一直常駐想吐胃液的狀態），到開講前五分鐘在台上準備時還是非常緊張（我很直白的告訴議程廳裡面的工作人員說我好緊張，他還安撫我 😂，真的很感謝）&lt;/p&gt;
&lt;p&gt;最後終於開始了，這時腦中是一片空白的，只想著把練習過的東西全部講出來，除此之外也沒有其他任何想法，而且不知何時場內已經坐滿人，後面也站著一排，其實很怕越講人越少（還好沒有，感謝各位捧場 ），另外很值得提的是，在議程中我看電腦或簡報的時間其實很少，眼神都忙著與台下的聽眾四目交接，特別感到很溫馨的是與我交流到眼神的聽眾都會給予肯定的點頭，讓我能越講越有自信，非常感謝 🙏&lt;/p&gt;
&lt;p&gt;到結束後，大家還是一直鼓勵我或是對我比大拇指，這瞬間，那些沸騰的胃液才開始平復下來，只能說&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;因為準備的足夠，還有許多人的幫忙，才能有這場成功的議程！&lt;/div&gt;
&lt;p&gt;只是到最後時間掌控的不太好，導致很多想講的都沒有講到，只能在 QA 時間補充，老實說因為我很怕結束後沒有人來找我，這樣會讓我在 QA 區孤單寂寞覺得冷，還特別拜託朋友當暗樁，要在 QA 時間過來和我聊天 😂，結果出乎意料非常多人，又多聊整整一場議程的時間！而在和大家討論的過程中本身也學到很多！會後也結交到許多新朋友 😃&lt;/p&gt;
&lt;p&gt;之後也有和朋友聊到這段議程經歷的酸甜苦辣，特別是抱著頭後悔自己為什麼要投稿、每個夜晚都擔心到底來不來得及準備完成等等，從一直擔心會不會失敗，到最後笑著走出會場的過程，只能說五月天唱出一句心聲：&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;感動總在衝動後，苦澀回憶都會溫柔 - 有些事現在不做一輩子都不會做了&lt;/div&gt;
&lt;p&gt;以上就是第一次成為講者所經歷的過程，也感謝那段時期自己付出的努力，讓我能繼續相信努力不會騙人！&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;cp t u fz ak&quot; src=&quot;https://miro.medium.com/max/2216/1*1S5mNOOgkH7NwaxpQul_-A.jpeg&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7576;&amp;#x5929;&amp;#x7D50;&amp;#x675F;&amp;#x5F8C;&amp;#x8D70;&amp;#x51FA;&amp;#x6703;&amp;#x5834;&amp;#x62CD;&amp;#x7684;&amp;#x7167;&amp;#x7247;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;在這裡當作番外篇亂聊一下好了 😂，文中提到說，在議程裡有找到機會詢問大家「有沒有在進行單元測試？」，其實在這之後還有接著問第二個問題：「有在進行前端單元測試的人嗎？」&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;結果居然是零啊！&lt;/div&gt;
&lt;p&gt;但是大家仍然願意選擇這場說明前端單元測試的議程，代表其實想嘗試的人是很多的！但是前端的單元測試牽扯到了介面、框架和各種函式庫，基本的測試也許還能夠找到一些 Example，換作比較新穎或特別的用法，就要再多花點時間專研測試方法及最佳實踐！&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;當遇到問題，又沒有人能夠討論，就會卻步而無法開啟前端測試之路&lt;/div&gt;
&lt;p&gt;因此議程結束後我一直在想，是不是能夠有個平台可以讓大家討論關於前端的單元測試呢？以 Facebook 的社團來說，大概就像是 &lt;a href=&quot;https://www.facebook.com/profile.php?id=521085554595481&amp;amp;ref=br_rs&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Front-End Developers Taiwan&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/profile.php?id=1439747729634154&amp;amp;ref=br_rs&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;ReactJS.tw&lt;/a&gt; 等等，但搜尋之下似乎沒有，於是&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;就自己辦一個吧！&lt;/div&gt;
&lt;p&gt;會有這個想法我必須感謝在講者晚宴中遇到的兩位大大，是 &lt;a href=&quot;https://www.facebook.com/GoodideasStudio/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;好想工作室&lt;/a&gt; 的 Chris，他讓我知道原來不是只有我一個人在前端單元測試沙漠中無助的摸索，還有 &lt;a href=&quot;https://www.facebook.com/profile.php?id=1190343134374259&amp;amp;ref=br_rs&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;遠距工作者在台灣 (work remotely in Taiwan)&lt;/a&gt; 的創建者艾霖，是她告訴我只要願意就能夠試著去改變環境！現在想起來真的覺得自己運氣很好！因為有了這一切的經歷，所以 &lt;a href=&quot;https://www.facebook.com/groups/F2EUnit.tw/&quot; class=&quot;at cg ho hp hq hr&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;F2EUnit.tw-單元測試在前端&lt;/a&gt; 就誕生了！歡迎大家可以加入一起討論 🙌&lt;/p&gt;
&lt;p&gt;最後本篇文章是依照我自己的想法打出來的！如果各位對講者背後的故事還有哪些想知道的，都可以留言告訴我，我很樂意嘰哩呱啦的分享一堆 😂，謝謝大家！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript | ES6 中最容易誤會的語法糖 Class - 基本用法]]></title><description><![CDATA[前言 Hi！本來在之前想和 Promise 、 Fetch 一起完成的 ES6 小小三部曲，一直拖到現在才真正動工，其實本來沒有想要另外學了，但因為最近讀 Refactor 發現善用 Class 也是很好的重構技巧之一，所以決定花點時間讓自己熟悉一下。 Class…]]></description><link>https://ms314006.github.io/js-class/</link><guid isPermaLink="false">https://ms314006.github.io/js-class/</guid><pubDate>Tue, 15 Oct 2019 03:39:26 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi！本來在之前想和 &lt;a class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/js-promise/&quot;&gt;Promise&lt;/a&gt; 、 &lt;a class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/js-fetch/&quot;&gt;Fetch&lt;/a&gt; 一起完成的 ES6 小小三部曲，一直拖到現在才真正動工，其實本來沒有想要另外學了，但因為最近讀 Refactor 發現善用 Class 也是很好的重構技巧之一，所以決定花點時間讓自己熟悉一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Class&lt;/h2&gt;
&lt;p&gt;先來解釋一下標題好了，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;Class 是 JavaScript 中最容易被誤會的語法糖了&lt;/div&gt;
&lt;p&gt;為什麼會被誤會？如果各位讀者有寫過其他像是 Java 的 Class-Based 物件導向語言，都會知道下面幾件事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;b1db&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix km kn ko&quot;&gt;分成 Class 和 Object 兩種。&lt;/li&gt;&lt;li id=&quot;3794&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;Class 內部會描述 Properties 和 Method。&lt;/li&gt;&lt;li id=&quot;a15f&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;Class 能建構出 Object ，也被稱作 Instance 。&lt;/li&gt;&lt;li id=&quot;7a00&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;Instance 能夠使用 Class 內的 Method，並藉由 Method 存取 Object 內的資料。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;咦？就算沒寫過，但這樣看起來似乎和 JavaScript 的 Constructor 及 Instance 差不多對吧？&lt;/p&gt;
&lt;p&gt;對！但是差別在於第一點所說的「分成 Class 和 Object 兩種」&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;擁有 Class 才能產生出對應的 Instance ，這是與 JavaScript 差別最大的地方。&lt;/div&gt;
&lt;p&gt;在 JavaScript 的 Prototype-Based 物件導向中，不區分 Class 和 Object 所有的東西都可以是 Object ，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;且不一定需要經過 Class 或 Constructor 才能建立 Instance，直接操作 Prototype 也能辦到。&lt;/div&gt;
&lt;p&gt;再來，如果在 Java 中要做 Class 間的繼承，得在&lt;strong class=&quot;im ku&quot;&gt;定義 Class 時指定要繼承的父類別&lt;/strong&gt;。在 JavaScript 中則是以&lt;strong class=&quot;im ku&quot;&gt;改變 Constructor 的 Prototype 來使用其他 Constructor 的 Method &lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這些差別都是取決於物件導向是基於 Class 或 Prototype ，因此就算 ES6 新增了一個 Class 保留字用來當 Constructor 創建 Instance ，也不代表它物件導向的方式會變成 Class-Based ，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;只是被 Class 包裝的 Prototype-Based 而已。&lt;/div&gt;
&lt;p&gt;所以千萬不要搞混囉！ Class 只是簡化了 JavaScript 中操作 Constructor 的語法糖而已。&lt;/p&gt;
&lt;h2&gt;Constructor&lt;/h2&gt;
&lt;p&gt;Constructor 是建構器，可以用它產生擁有相同 Properties 的 Object ，例如大家都熟悉的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// public properties&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// private value&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// privileged methods&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFrom&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; john &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { name: &apos;John&apos;, getFrom: [Function] }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// John from Taiwan.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Person 內裡面有三行程式碼，來看看它們分別是什麼：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;856e&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix km kn ko&quot;&gt;&lt;code class=&quot;hm kw kx ky kz b&quot;&gt;name&lt;/code&gt; 是經過 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 創建出來後會帶的 Own Properties （自有特性），會在呼叫 Constructor 時當作參數傳入。&lt;/li&gt;&lt;li id=&quot;53b5&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;&lt;code class=&quot;hm kw kx ky kz b&quot;&gt;state&lt;/code&gt; 是一個 Private value （私有值），它只存在於 Constructor 創建 Instance 時另外產生的環境。&lt;/li&gt;&lt;li id=&quot;0df3&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;雖然 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;state&lt;/code&gt; 不是 Instance 的 Own Properties ，但是透過 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;getForm&lt;/code&gt; 便能夠取得 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;state&lt;/code&gt; 的值，這種讀取 Private value 的方式稱作 Privileged Method （特權方法）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那接著進入 ES6 時期的 Constructor ， Class 版本又會是什麼樣子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; john &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { name: &apos;John&apos; }  public 方法不再顯露於物件裡&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// John from Taiwan.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有沒有煥然一新的感覺？用 Class 來宣告 Constructor 在語義上面會更清楚，不像之前只能透過字首的大小寫來判斷是否為 Constructor ，且還有可能會有未遵照規則導致使用錯誤的情況發生。&lt;/p&gt;
&lt;p&gt;透過 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;new&lt;/code&gt; 呼叫時傳入的參數會由 Class 內的 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;constructor&lt;/code&gt; 給接收，並在同一區塊建立 Public Properties ，而 Method 的部分則是在 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;constructor&lt;/code&gt; 外做描述或存取資料， Private Value 就存放在 Method 中，依然無法從 Instance 中取得。&lt;/p&gt;
&lt;p&gt;然後這邊是個很棒的時間，可以讓我們驗證 Class 的操作是否仍然為 Prototype ，如果是透過 Constructor 建立的 Instance ，應該會擁有相同的 Prototype ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2564/1*ge3r7mHcTm3sc-kETvMIGw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x900F;&amp;#x904E; Constructor &amp;#x5EFA;&amp;#x7ACB;&amp;#x7684; Instance &amp;#xFF0C;&amp;#x6703;&amp;#x64C1;&amp;#x6709;&amp;#x76F8;&amp;#x540C;&amp;#x7684; Prototype&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2&gt;Inheritance&lt;/h2&gt;
&lt;p&gt;繼承的話在 Class 上也變得方便許多，想當初如果要 Constructor 上處理繼承，就得使用 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;call&lt;/code&gt; 在 Constructor 創建 Instance 時來指定 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;this&lt;/code&gt; 呼叫另一個 Constructor，像是這樣子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFrom&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 將 this 送給 Person 建立 properties&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// public properties&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getPosition&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s position is a &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; luck &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Luck&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Front-end&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Luck from Taiwan.&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Luck&apos;s position is the Front-end.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起來有些複雜了對吧？但如果是 Class 只需要利用 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;extends&lt;/code&gt; 和 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;super&lt;/code&gt; 便可輕鬆處理 Constructor 間的 Inheritance ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 使用 extends 指定 parent class&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 用 super 呼叫 extends 指定的 class&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s position is a &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; luck &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Luck&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Front-end&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Luck from Taiwan.&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Luck&apos;s position is the Front-end.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方在定義 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Employee&lt;/code&gt; 時另外用了 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;extends&lt;/code&gt; 指定了 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; ，這麼一來就等於是繼承了 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 的 Properties 和 Method ，但為什麼在 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Employee&lt;/code&gt; 中的 constructor 中還要使用 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;super&lt;/code&gt; 把 name 傳給 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 呢？&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;因為 Employee 中也有 constructor&lt;/div&gt;
&lt;p&gt;當子類別自身也需要透過 constructor 建立 Properties 時，就需要使用 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;super&lt;/code&gt; 另外指定要送給父類別的值，否則就 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 來說，創建 Instance 時將兩個值送入 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Employee&lt;/code&gt; ， &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 根本不曉得哪一個才是要被指定成 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;name&lt;/code&gt; 的資料，這裡大家可以想像成是用 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;call&lt;/code&gt; 來呼叫另一個 Constructor 的感覺。&lt;/p&gt;
&lt;p&gt;也就是說了，如果當今天不需要透過 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Employee&lt;/code&gt; 創建 Properties ，僅僅是增加 Method，那 super 就可以省略，因為所有的參數都會是給 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello!I am &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; luck &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Luck&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Luck from Taiwan.&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Hello!I am Luck!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後記得那個可怕的 Super Call（超呼叫）嗎？當子類別的 Method 要呼叫父類別的 Method 執行就叫 Super Call ，在未有 Class 時，仍然是需要使用 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;call&lt;/code&gt; 將 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;this&lt;/code&gt; 指定給父類別 Prototype 的 Method 做執行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello!I am &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 進行 Super call&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;superCallSayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; luck &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Luck&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;superCallSayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Hello!I am Luck!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;儘管我已經將例子盡量簡化了，看起來還是很麻煩，且 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; 要被 Super Call 的 Method 也得另外設置在 Prototype 中。&lt;/p&gt;
&lt;p&gt;但是到 Class 時代後一切便不同了，答案就在運用上方提到的 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;super&lt;/code&gt; ，既然是透過傳送參數給它來創建 Properties ，那也可以透過 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;super&lt;/code&gt; 直接呼叫父類別中的Method ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s position is the &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// super call&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;superCallGetForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; luck &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Luck&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Front-end&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;luck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;superCallGetForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Luck from Taiwan.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是不是簡潔多了？透過 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;super&lt;/code&gt; 便不需要再手動處理 Prototype 。&lt;/p&gt;
&lt;p&gt;那依照慣例，在 Inheritance 這個段落的結尾也來驗證 Class 間的 Inheritance 是否也同樣是在操作 Constructor 的 Prototype ，如果是的話，那子類別 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Employee&lt;/code&gt; 的 Prototype 應該會等於父類別 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Person&lt;/code&gt; ，而 Instance 的 Prototype 依然指向 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;Employee&lt;/code&gt; ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2820/1*wI5vUS35imxzsSqzWVc82g.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7531; luck &amp;#x7E7C;&amp;#x627F;&amp;#x81EA; Employee &amp;#xFF0C; Employee &amp;#x53C8;&amp;#x7E7C;&amp;#x627F;&amp;#x81EA; Person &amp;#xFF0C;&amp;#x9019;&amp;#x7A31;&amp;#x70BA; Prototype chain &amp;#xFF08;&amp;#x539F;&amp;#x578B;&amp;#x93C8;&amp;#xFF09;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;到這裡應該可以清楚明白，&lt;/p&gt;
&lt;div style=&quot;font-size: 30px; color: #696969; font-style:italic; padding: 0px 60px;margin: 30px 0px;&quot;&gt;就算眼睛看見的是 Class ，寫下的也是 Class ，但骨子裡操作的卻還是 Prototype 。&lt;/div&gt;
&lt;p&gt;學會在 Class 中創建 Instance 、 Inheritance 、 Super Call 後，接著來看看 Class 提供的 Static Method （靜態方法）！&lt;/p&gt;
&lt;h2&gt;Static&lt;/h2&gt;
&lt;p&gt;在 Class 內的 Method 可以加上 static 前綴，使它變成 Static Method （靜態方法），被定義為 Static Method 可以直接以 Constructor 呼叫，但創建出來的 Instance 是無法使用它的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hi!&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Luck&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Hi!Luck!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Getter &amp;#x26; Setter&lt;/h2&gt;
&lt;p&gt;前綴詞其實不只有 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;static&lt;/code&gt; ，連存取器的 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;get&lt;/code&gt; 及 &lt;code class=&quot;hm kw kx ky kz b&quot;&gt;set&lt;/code&gt; 也可以在 Class 中作定義：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hi!&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_age &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; age is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_age&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Don&apos;t know &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s age.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Taiwan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; john &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Don&apos;t know John&apos;s age.&lt;/span&gt;
john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;john&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// John age is 18.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;經常用於不想 Instance 直接存取的狀況，所以利用 Getter 和 Setter 來假裝操作 Properties ，在設定及取值時都先經過一些邏輯判斷再決定怎麼處理。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上是對於 Class 的一些整理，上半部主要是在比較 Class 出現前後對 Constructor 及 Inheritance 的操作有什麼差別，結尾講解了 Static 和 存取器在 Class 中的使用方式。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考資料&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;5599&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix km kn ko&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes&quot; class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;03f1&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Details_of_the_Object_Model&quot; class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Details_of_the_Object_Model&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;8baf&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10185583&quot; class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://ithelp.ithome.com.tw/articles/10185583&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;1241&quot; class=&quot;ik il em at im b in kp ip kq ir kr it ks iv kt ix km kn ko&quot;&gt;&lt;a href=&quot;https://www.arthurtoday.com/2012/01/prototype-based-language.html&quot; class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.arthurtoday.com/2012/01/prototype-based-language.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[JavaScript | 關於 Object ，一口氣全說完]]></title><description><![CDATA[前言 原諒我用醜字做開版圖，首先讓筆者先恭喜一下自己從教召地獄中脫離，距離上一次才經過了一年半，在工作才剛換的時候，這通知實在是來的有點快和無奈，不過這次在出發前隨手將「 Speaking JavaScript 」放進行李，想說重新讀一遍 JavaScript 中的 Object…]]></description><link>https://ms314006.github.io/js-object/</link><guid isPermaLink="false">https://ms314006.github.io/js-object/</guid><pubDate>Sun, 04 Aug 2019 07:59:11 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;原諒我用醜字做開版圖，首先讓筆者先恭喜一下自己從教召地獄中脫離，距離上一次才經過了一年半，在工作才剛換的時候，這通知實在是來的有點快和無奈，不過這次在出發前隨手將「 &lt;a href=&quot;https://www.tenlong.com.tw/products/9789863478584&quot; class=&quot;dj by ij ik il im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Speaking JavaScript&lt;/a&gt; 」放進行李，想說重新讀一遍 JavaScript 中的 Object 知識，做下筆記，才讓這七天的精實（無聊）生活沒那麼無趣。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Object&lt;/h2&gt;
&lt;p&gt;本篇文章的內容都是從「 &lt;a href=&quot;https://www.tenlong.com.tw/products/9789863478584&quot; class=&quot;dj by ij ik il im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Speak JavaScript&lt;/a&gt; 」書中整理，會分成幾個部分講解：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;1970&quot; class=&quot;hv hw em at hx b hy jc ia jd ic je ie jf ig jg ii jh ji jj&quot;&gt;Object （物件）&lt;/li&gt;&lt;li id=&quot;72e6&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;this（物件執行環境）&lt;/li&gt;&lt;li id=&quot;a843&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;Property attributes（特性屬性）&lt;/li&gt;&lt;li id=&quot;abca&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;Prototypal inheritance （原型繼承）&lt;/li&gt;&lt;li id=&quot;7df3&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;Constructor （建構器）&lt;/li&gt;&lt;li id=&quot;e508&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;Constructor inheritance （建構器間的繼承）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那以上如果還有推薦多說明的部分，歡迎再留言告訴我！&lt;/p&gt;
&lt;h3&gt;Object 物件&lt;/h3&gt;
&lt;p&gt;在 JavaScript 中宣告一個 Object （物件）時使用首尾大括號建立範圍， Object 內的 Property （特性）為一個 key （鍵）搭配一個 value （值），並以逗號區隔每個 Property：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//宣告一個 Object 物件，搭配首尾大括號&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//每個 Property 間使用逗號區隔&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Property 的 value 可以是任何的型態值，包括 string 、 integer 、 function 又或是另一個 Object ，此外， Object 支援了在最後一個 Property 後加上逗號，即使它是最後，這個寫法可以讓之後要調整 Property 的時候比較不會出現錯誤，因為不必在意誰要擺在最後。&lt;/p&gt;
&lt;p&gt;使用 Object 中的 Property 方式有兩種：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;e446&quot; class=&quot;hv hw em at hx b hy jc ia jd ic je ie jf ig jg ii jh ji jj&quot;&gt;&lt;code class=&quot;hc kc kd ke kf b&quot;&gt;.&lt;/code&gt; 點號運算子，只要在 Object 名稱後使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;.&lt;/code&gt; 並指定 Property 的 key ，即可讀取該特性的值。&lt;/li&gt;&lt;li id=&quot;4e75&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;&lt;code class=&quot;hc kc kd ke kf b&quot;&gt;[]&lt;/code&gt; 中括號，在中括號裡可以是一個述句，會經由運算，並將值轉為字串後尋找對應的 key 值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下為兩種方式的使用範例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//使用 . 點號運算子&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token comment&quot;&gt;//印出 Mary&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//使用 [] 中刮號運算子&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; propertyNameA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;say&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; propertyNameB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;propertyNameA &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; propertyNameB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token comment&quot;&gt;//取出 function 後執行，印出 Hello Mary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hc kc kd ke kf b&quot;&gt;.&lt;/code&gt; 點號運算子應該沒有問題，而下方 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;[]&lt;/code&gt; 中刮號運算子中分別將 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;say&lt;/code&gt; 和 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Hello&lt;/code&gt; 存到兩個變數，再在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;[]&lt;/code&gt; 內運算兩個變數加起來的值，得到 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;sayHello&lt;/code&gt; 這個 key 並取出 Function 值執行。&lt;/p&gt;
&lt;p&gt;若要為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object&lt;/code&gt; 異動或新增一個 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;property&lt;/code&gt; ，也是以 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;.&lt;/code&gt; 號運算子加上 Property 的 key ，在指定新值：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//異動 Property 的值&lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; Louise&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//新增一個 Property &lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Jane&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Leda&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刪除的話可以使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;delete&lt;/code&gt; 加上 Object 的 Property 執行動作：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//賦予一個新的 Property &lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//刪除該 Property &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age
&lt;span class=&quot;token comment&quot;&gt;//成功時回傳 true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//該特性消失，在使用時回傳 undefuned&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;請注意！這與直接指定該 Property 的值為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;undefined&lt;/code&gt; 不同， &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;delete&lt;/code&gt; 會讓 Property 從 Object 中消失。&lt;/p&gt;
&lt;p&gt;另外，如果要判斷一個變數是否為 Object 可以使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;typeof&lt;/code&gt; 方法：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;ce23&quot; class=&quot;jp hj em at kf b fh ki kj r kk&quot;&gt;typeof {} // &amp;quot;object&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;但是要注意，除了真正的 Object 外， &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;null&lt;/code&gt; 、 Array 也都會回傳 Object ，因此在判斷時，記得先處理掉變數型態可能是 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;null&lt;/code&gt; 或Array 的可能性。&lt;/p&gt;
&lt;h3&gt;this 執行環境&lt;/h3&gt;
&lt;p&gt;以 Object &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 來看，在 Object 中建立的 Function 都會個隱含的參數 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 可以使用，而 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 的值則指向 Object 本身，因此上方的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this.name&lt;/code&gt; 其實就等於 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary.name&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不過這裡會有個隱藏的陷阱，當為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 這個物件加上印出所有 friend 的 Function ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFriends&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//取得 friends ，並用 forEach 將每個 friend 個別列出&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s friend has &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;friend&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;雖然執行後能夠列出 Object 中 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;friends&lt;/code&gt; 的資料，但會發現在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;forEach&lt;/code&gt; 內的 Function 無法用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 得到 mary 的 name Property ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1324/1*GqhG8Ovq1AuUMH77ZvafRA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;forEach &amp;#x5167;&amp;#x7684; Function &amp;#x7121;&amp;#x6CD5;&amp;#x53D6;&amp;#x5F97; Object &amp;#x7684; Property name&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;原因是在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;forEach&lt;/code&gt; 內執行的 Function 並不是建立在 mary 中，因此他之中的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 就不會指向 Object 本身，而是代表全域的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Window&lt;/code&gt; ，更多關於 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 可以參考「&lt;a href=&quot;https://blog.techbridge.cc/2019/02/23/javascript-this/&quot; class=&quot;dj by ij ik il im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂&lt;/a&gt;」，這篇文章講得非常清楚！&lt;/p&gt;
&lt;p&gt;當遇到 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 指向錯誤，而無法取得 Object 內的 Property 時，有下列三種解法：&lt;/p&gt;
&lt;p&gt;1.在使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;forEach&lt;/code&gt; 的情況下，它本身支援指定執行的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 做為參數：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFriends&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//將目前的 this 指定給 forEach 的第二個參數&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s friend has &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;friend&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.將 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 指定給另一個變數：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFriends&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;//將指向 Object 的 this 給 that&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; that &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//在 forEach 內直接使用 that&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;that&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s friend has &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;friend&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.在執行 Function 時使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;call&lt;/code&gt; 、 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;apply&lt;/code&gt; 、 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;bind&lt;/code&gt; 指定 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; ，以下先簡單介紹這三個的差別及用法：&lt;/p&gt;
&lt;p&gt;使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;call&lt;/code&gt; 時，只需將要指定的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 放入第一個參數，其餘從第二個開始傳入 Function 中，例如：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; say &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;talk&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//使用 call 對 writeSpeak 指定 this&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Mary say Hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hc kc kd ke kf b&quot;&gt;apply&lt;/code&gt; 的使用方式和 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;call&lt;/code&gt; 相同，只是在傳入要執行的 Function 需要的參數時，需將所有的參數放置於一個陣列中：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; say &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;talk&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//使用 apply 需要將傳入的參數都放進一個陣列中&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hc kc kd ke kf b&quot;&gt;bind&lt;/code&gt; 與 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;call&lt;/code&gt; 傳入參數的方式相同，但 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;bind&lt;/code&gt; 並不會馬上執行 Function ，而是會回傳一個新的 Function ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; say &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;talk&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//bind 會回傳一個新的 Function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; marySayHello &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//需另外執行&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;marySayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Mary say Hello&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//也可以不在一開始就給參數&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; marySay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeSpeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//執行時再給參數&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;marySay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Good bye&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Mary say Good bye&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;稍微暸解 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;call&lt;/code&gt; 、 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;apply&lt;/code&gt; 、 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;bind&lt;/code&gt; 的使用方法後，便可以依照情況修改 Function ，解決上方抓不到 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 的問題：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getFriends&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//為 forEach 內的 Function 使用 bind 來指定 this&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;s friend has &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;friend&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;經過 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;bind&lt;/code&gt; 指定 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; ， Function 內就抓得到 mary 的 Property 了：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1440/1*JypFv3we7uJeKoCdPDBhCg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4F7F;&amp;#x7528; bind &amp;#x7D81;&amp;#x5B9A; forEach &amp;#x7684; this&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;Property attributes 特性屬性&lt;/h3&gt;
&lt;p&gt;上方說明 Object 的時候有提到， Property 是由一個 key 及 value 定義的，但是嚴格來說， value 只是這個 Property key 的一個屬性而已，除了 value 外還有其他三個沒再露面的 Property attributes ，以下跟著 value 一同列出：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;330e&quot; class=&quot;hv hw em at hx b hy jc ia jd ic je ie jf ig jg ii jh ji jj&quot;&gt;value ：代表此 Property 的值，如同上方的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Mary&lt;/code&gt; 及 Function 等，預設是 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;undefined&lt;/code&gt; 。&lt;/li&gt;&lt;li id=&quot;0afc&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;writable ：代表此 Property 可否重新指定值，預設為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;false&lt;/code&gt;。&lt;/li&gt;&lt;li id=&quot;e257&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;enumerable ：代表此 Property 的可列舉性，受到影響的會有 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.keys()&lt;/code&gt; 及 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;for(key in obj)&lt;/code&gt; 等，預設為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;false&lt;/code&gt;。&lt;/li&gt;&lt;li id=&quot;fd30&quot; class=&quot;hv hw em at hx b hy jk ia jl ic jm ie jn ig jo ii jh ji jj&quot;&gt;configurable ： 代表此 Property 的可控制性，能夠讓物件的 Property 無法被刪除，預設為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;將上方四個 attributes 寫成描述器的樣子：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;801c&quot; class=&quot;jp hj em at kf b fh ki kj r kk&quot;&gt;{&lt;br&gt;    value: &amp;apos;&amp;apos;,&lt;br&gt;    writable: false,&lt;br&gt;    enumerable: false,&lt;br&gt;    configurable: false,&lt;br&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.defineProperty()&lt;/code&gt; 可以在定義一個新的 Property 時藉由描述器指定 Property attributes ，在定義 Property attributes 的時候，如果物件中有相同的 Property Key 那就只會去更新該 Property 的屬性，沒有才是定義一個新的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//分別傳入 Object 名稱 、 Property 名稱 、 Property attributes 描述器&lt;/span&gt;
Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    writable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    enumerable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    configurable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Mary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定義完成後，當想確認某 Property 的 attributes 會需要 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.getOwnPropertyDescriptor(Object,Property)&lt;/code&gt; ，這個 Function 會回傳該 Property 的 attributes 描述器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//第一個參數指定 Object ，第二個參數為 Property 的 Key&lt;/span&gt;
Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//會得到以下 Property 的描述內容&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/*
{ 
value: &quot;Mary&quot;, 
writable: false, 
enumerable: false, 
configurable: false
}
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下方透過將 value 以外的屬性都改為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;false&lt;/code&gt; 確認使用上的差別：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//將 mary 的 name Property attributes 都設為 false&lt;/span&gt;
Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    writable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    enumerable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    configurable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Mary&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//writable 為 false 將無法再次指定值&lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//仍然印出 Mary&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//enumerable 為 false 將無法被 Object.keys 列出&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//列出空陣列 []&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//configurable 為 false 將無法刪除&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
&lt;span class=&quot;token comment&quot;&gt;//回傳 false&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//仍然印出 Mary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下為實際執行狀況：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1216/1*Z5T-19zg4Kahq3yMDTahXA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7576;&amp;#x4E00;&amp;#x500B; Property &amp;#x4E0D;&amp;#x53EF;&amp;#x4FEE;&amp;#x6539;&amp;#x3001;&amp;#x5217;&amp;#x8209;&amp;#x3001;&amp;#x63A7;&amp;#x5236;&amp;#x6642;&amp;#x7684;&amp;#x64CD;&amp;#x4F5C;&amp;#x72C0;&amp;#x614B;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;另外在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;enumerable&lt;/code&gt; 為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;false&lt;/code&gt; 的狀態下，還是可以使用其他方式列出不可列舉的 Property ：&lt;/p&gt;
&lt;p&gt;1.使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;for(key in obj)&lt;/code&gt; 對剛剛的 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 下迴圈，會把 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;enumerable&lt;/code&gt; 為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;false&lt;/code&gt; 的資料給列出：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; mary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//會將 name 列出&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.使用 Function &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.getOwnPropertyNames(obj)&lt;/code&gt; ，可以列出物件中所有「自有特性」：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//會得到陣列 [&apos;name&apos;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後，如果只是單純不想讓變數被改變為另一個 Object 的話，也能使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;ES6&lt;/code&gt; 提供的宣告語句 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;const&lt;/code&gt; ，雖然它無法阻止 Property 被改變或刪除，但是如果使用情況不需那麼嚴謹的話，還是可以考慮它：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 用 const 宣告一個 &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Mary&lt;/span&gt;

mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Jack&lt;/span&gt;

mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 20&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 重新指定會出錯： Assignment to constant variable.&lt;/span&gt;
mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Prototypal inheritance 原型繼承&lt;/h3&gt;
&lt;p&gt;一個物件裡除了上方稍微提到的「自有特性」外，還有由原型繼承而來的「繼承特性」，原型繼承的意思是當兩個物件間有相同或類似的 Function 時，可以將它取出放置 Prototype （原型）中，讓兩個物件在建立時以 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.create(prototype)&lt;/code&gt; 繼承自該 Prototype ，便可以不必在建立物件時做多餘的定義：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//建立一個 Prototype object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; personPrototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//透過 Object.create 建立兩個個繼承自 personPrototype 的 object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;personPrototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; kitty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;personPrototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//為兩個物件建立「自有特性」&lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;
kitty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Kitty&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//使用從 personPrototype 繼承而來的 Function&lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Hello Mary&lt;/span&gt;

kitty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Hello Kitty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的例子在建立 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 及 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;kitty&lt;/code&gt; 時，都使用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.create&lt;/code&gt; 讓他們繼承自 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;personPrototype&lt;/code&gt; ，這時候就可以說 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;personPrototype&lt;/code&gt; 是 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 及 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;kitty&lt;/code&gt; 的 Prototype。&lt;/p&gt;
&lt;p&gt;那如果現在有三個 Object 分別為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;a&lt;/code&gt; 、 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;b&lt;/code&gt; 、 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;c&lt;/code&gt; ， &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;b&lt;/code&gt; 繼承自 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;a&lt;/code&gt; ，而 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;c&lt;/code&gt; 又繼承自 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;b&lt;/code&gt; ，這種情況就可以說這三個 Object 在同一個原型關係上，也被稱為 Prototype chain （原型鏈）。&lt;/p&gt;
&lt;p&gt;再接著說下去之前，先來提提在物件中呼叫 Property 的流程，當 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;obj.key&lt;/code&gt; 取出一個 Property 時，會先確認當前的 Object 是否擁有相同 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;key&lt;/code&gt; 的 Property ，如果沒有，便會由當前物件向繼承的 Object 中繼續尋找，一直到找到為止，而在找到該 Property 的那個 Object 也被稱為 Home Object。&lt;/p&gt;
&lt;p&gt;既然知道在呼叫 Property 時會以 Home Object 為主，那當為某個 Object 新增一個與 Prototype 同名的 property 時，該 Object 便會成為呼叫 Property 的 Home Object ，當然這個操作也不會使 Prototype 中的同名 Property 受影響，只是它不是該 Property 的 Home Object 而已。&lt;/p&gt;
&lt;p&gt;繼承後，也有 Function 可以檢查 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 的 Prototype 是否為 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;personPrototype&lt;/code&gt; ，或是直接取得 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;kitty&lt;/code&gt; 的 Prototype 為何：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//確認 personPrototype 是否為 mary 的 prototype&lt;/span&gt;
personPrototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//回傳 true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//取得 kitty 的 prototype Object&lt;/span&gt;
Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kitty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//回傳 personPrototype&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以透過 Object 的隱藏屬性 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;&lt;strong&gt;proto&lt;/strong&gt;&lt;/code&gt; 得到 Prototype ，經過繼承後的 Object 都會將原型放在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;&lt;strong&gt;proto&lt;/strong&gt;&lt;/code&gt; 中，以 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 為例：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1512/1*OMTx08gvXtZ-ss9ohahqwg.png&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;提到這裡，已經可以知道一個 Object 會由 Property 及 Prototype 兩個重要的元素組成，因此當要複製另一個相同的 Object 時，就應該要把 Property 及 Prototype 都在新的 Object 上設定正確，如同下方操作：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;copyObj&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;originObj&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//取得 originObj 的 prototype&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originPrototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//以 originPrototype 為原型建立一個物件&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originPrototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;//取得所有「自有特性」&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arrOwnProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//下迴圈處理每個 prototype&lt;/span&gt;
    arrOwnProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//取得 Prototype attributes 的描述器&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prototypeDesc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originObj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//將 prototype 與描述器一同指定給新 Object&lt;/span&gt;
        Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newObj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;prototypeDesc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;//最後回傳新物件&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newObj
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行結果：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1360/1*VF6Ht61ZLlxn2BeUSd43Jg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x65B0; Object &amp;#x7684; Property &amp;#x548C; Prototype &amp;#x90FD;&amp;#x548C;&amp;#x539F;&amp;#x672C;&amp;#x7684;&amp;#x76F8;&amp;#x540C;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;Constructor 建構器&lt;/h3&gt;
&lt;p&gt;Constructor （建構器）是一個 Function ，可以利用它來建立一些相似的 Object ，被 Constructor 建立出來的 Object 被稱為它的 Instance （實體）， Constructor 在使用時與一般 Function 不同，是藉由 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;new&lt;/code&gt; 來呼叫，也就是說，它只有再藉由 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;new&lt;/code&gt; 的狀態下使用才會是 Constructor 。&lt;/p&gt;
&lt;p&gt;下方建立一個 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Person&lt;/code&gt; 作為 Constructor ，並利用它建立 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 及 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;kitty&lt;/code&gt; 物件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Constructor 第一個字母通常大寫&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//設定 this 的 name property 值為傳進來的參數， this 為建立的物件&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//用 new 呼叫 Person 使它成為一個 Constructor ，替 mary 及 kitty 設定 name&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; kitty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Kitty&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name 
&lt;span class=&quot;token comment&quot;&gt;// Mary&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//每個 Instance 的 constructor 屬性都會指向 Constructor 本身&lt;/span&gt;
kitty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; Person
&lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上方的例子中，就可以說 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;mary&lt;/code&gt; 和 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;kitty&lt;/code&gt; 是 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Person&lt;/code&gt; 的 Instance ，也可以發現 Constructor 能協助建立擁有基本資料的 Object ，而要處理這些 Object 的 Function 便能放在 Prototype 中，以達成資料在 Constructor 的 Instance ， 方法在 Prototype 的關注點分離原則。&lt;/p&gt;
&lt;p&gt;但是藉由 Constructor 建立的 Object 就不會再經過 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Object.create&lt;/code&gt; ，該如何對那些 Instance 設定 Prototype 呢？答案在 Constructor 中，每一個 Constructor 都擁有 Prototype 的屬性，可以把方法設定在 Prototype 中，如此一來，只要是透過該 Constructor 建立的 Instance ，也都會擁有相同的 Prototype ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Constructor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//設定 Prototype&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; kitty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Kitty&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//印出 Hello Mary&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Prototype 會指向 constructor 的 prototype&lt;/span&gt;
Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kitty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
&lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;關於 Constructor 的 Prototype 也會有一個屬性為 constructor ，正常來說該屬性的值會指向 Constructor 自身，雖然在設計時，不會有非得使用該屬性的情況，但將它維持原有的樣子是個好習慣，因此在上方的例子中才沒有直接覆蓋 Prototype ，而是使用擴充的方式將 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;sayHello&lt;/code&gt; 定義到 Prototype 中，當然如果要直接覆蓋 Prototype ，也只需把 constructor 的值指向 Constructor 就行了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//先將 constructor 設置好&lt;/span&gt;
    constructor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Person&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Constructor inheritance 建構器間的繼承&lt;/h3&gt;
&lt;p&gt;Constructor 間的繼承有點類似「父類別」及「子類別」的關係，這裡要思考的是，如何在使用一個 Constructor 的時候去呼叫另一個 Constructor 建立 Property ，聽起來很複雜，但簡單來說，可以利用 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;call&lt;/code&gt; 在 Constructor 建立物件時將 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;this&lt;/code&gt; 指定給另一個 Constructor 設定 Property ，實作如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;dept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//將 this 指定給 Person 設定 &lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dept
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;IT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; kitty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Kitty&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;HR&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//擁有 name Property&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//Mary&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//也有 dept&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kitty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//HR&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;負責資料面的 Property 會比較好處理，但是方法類的 Prototype 該怎麼做呢？其實就和 Object 的繼承一樣，以父類別的 Prototype 為原型指定給子類別的 Prototype 就行了，但需要注意的是，因為直接指定父類別 Prototype 的關係，所以要重新把子類別的 constructor 屬性值指定給自己：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;dept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dept
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//將 prototype 的 constructor 屬性指回自身&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Employee

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;IT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; kitty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Kitty&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;HR&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//繼承自 Person.prototype 的 function&lt;/span&gt;
mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Hello Mary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後來了解一下 Super call （超呼叫），它的意思是在子類別的 Function 中，去呼叫父類別的 Function ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;dept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dept
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Employee
&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;selfIntroduction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//在呼叫時要指定 this ，因為他的執行環境 Person.prototype 中沒有 name Property&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;In the &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; department&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;IT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

marry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;selfIntroduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//會同時列出&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/*
Hello Mary
In the IT department
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但從 Property 到 Prototype 為止的處理，在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Employee&lt;/code&gt; 中都是把 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Person&lt;/code&gt; 給寫死，在實務上可以將 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Person&lt;/code&gt; 存在 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;Employee&lt;/code&gt; 的 Property 中，維持更有彈性的寫法：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;dept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// construcotr 的 prototype 的 constructor 會指會自己&lt;/span&gt;
    Employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;_super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dept
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;selfIntroduction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//改成從 Property 中去讀&lt;/span&gt;
    Employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_super&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;In the &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dept&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; department&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;subclass&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;subC&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;superC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//處理prototype&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; subProto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;superC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//將原本 subC.prototype 的 Property 定義給 subProto (這裡和複製物件時用的方式相同)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arrOwnProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    arrOwnProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prototypeDesc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subProto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;prototypeDesc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//將處理完後的 prototype 給 subC 的 protoype&lt;/span&gt;
    subC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subProto
    &lt;span class=&quot;token comment&quot;&gt;//定義 _super Property 為父類別的 prototype&lt;/span&gt;
    subC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_super &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; superC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//設定 Person 和 Employee 為父子類別&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;subclass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Employee&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;IT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

mary&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;selfIntroduction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//會同時列出&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/*
Hello Mary
In the IT department
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hc kc kd ke kf b&quot;&gt;subclass&lt;/code&gt; 內做的事情和複製物件有點像，主要是在處理 Prototype 及 Property ，其實在 JavaScript 中，關於物件的使用及繼承，也只需搞懂這兩個屬性就行了！如上方，通過 &lt;code class=&quot;hc kc kd ke kf b&quot;&gt;subclass&lt;/code&gt; 便能將父子類別都設定好，透過將父類別的 Prototype 存在子類別的 Property 裡，在使用上也就更有彈性及簡單。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇文章從解召後就開始整理在軍中做的筆記撰寫，但是根據當兵定律，只要一回到家就一定會感冒，這兩天筆者貌似也得了流感，因此才拖了兩天才打完，希望這篇文章能對想了解 JavaScript 中 Object 的人有所幫助。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;89d3&quot; class=&quot;hv hw em at hx b hy jc ia jd ic je ie jf ig jg ii jh ji jj&quot;&gt;&lt;a href=&quot;https://www.tenlong.com.tw/products/9789863478584&quot; class=&quot;dj by ij ik il im&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.tenlong.com.tw/products/9789863478584&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Design Pattern | 從復仇者看策略模式（ Strategy Pattern ） feat. TypeScript]]></title><description><![CDATA[前言 Hi！大家好，我是神 Q 超人。其實設計模式是我一直想要講的主題，從一開始看到書的時候，就一直想講，但要補的基礎實在是滿多的，所以才會拖到現在才生出第一篇，好不容易讓我抓到機會，趁著前幾天剛講完 Class 和 Interface ，就來看看它們能在 Design…]]></description><link>https://ms314006.github.io/design-pattern-strategy-pattern/</link><guid isPermaLink="false">https://ms314006.github.io/design-pattern-strategy-pattern/</guid><pubDate>Tue, 23 Jul 2019 07:08:26 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi！大家好，我是神 Q 超人。其實設計模式是我一直想要講的主題，從一開始看到書的時候，就一直想講，但要補的基礎實在是滿多的，所以才會拖到現在才生出第一篇，好不容易讓我抓到機會，趁著前幾天剛講完 &lt;a class=&quot;cx ga iz ja jb jc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/enjoy-life-enjoy-coding/typescript-從-ts-開始學習物件導向-class-用法-20ade3ce26b8&quot;&gt;Class&lt;/a&gt; 和 &lt;a class=&quot;cx ga iz ja jb jc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/enjoy-life-enjoy-coding/typescript-從-ts-開始學習物件導向-interface-用法-77fd0959769f&quot;&gt;Interface&lt;/a&gt; ，就來看看它們能在 Design Pattern 中做出怎樣的精彩共演吧！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Strategy Pattern 策略模式&lt;/h2&gt;
&lt;br/&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;Strategy Pattern 主要在處理各種既相同，但做起來又不太一樣的行為。將行為抽離後，視情況隨意組合切換。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;將行為抽離後，視情況隨意組合切換。&lt;/p&gt;
&lt;h3&gt;設計時的狀況情境&lt;/h3&gt;
&lt;p&gt;下方先介紹造成系統設計變得複雜的例子，最後再展示 Strategy Pattern 是如何優雅解決這個問題。&lt;/p&gt;
&lt;p&gt;上方提到既相同又不太一樣的行爲似乎有點矛盾，但是仔細想想，就像「飛」這個動作好了，索爾、鋼鐵人、幻視、蜘蛛人都會飛，但是它們飛的方法都不一樣對吧？&lt;/p&gt;
&lt;p&gt;也許大家可以想到將「飛的行為」寫到 Inheritance （繼承） &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;TheAvengers&lt;/code&gt; 的 Child Class （子類別）中，例如索爾、鋼鐵人等等…但是&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;這個「飛」的行為實現就會重複分佈在各個 Child Class （子類別）中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;這麼做顯然不是很好維護，因此你又將「飛」的主要行為「脫離地心引力」給提到了「復仇者」這個 Parent Class （父類別），然後把每個人實現「飛」的方式用 Inheritance 做 Override ，但是&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;你絕對不會想看見浩克在天上飛對吧？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;於是你開始檢查繼承了 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;TheAvengers&lt;/code&gt; 的所有 Child Class ，找到了浩克、黑寡婦，等等不會飛的復仇者，將它們的「飛」寫成不做任何事的空 Function ，來 Override 在 Parent Class 中的行為，像這樣子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hulk&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TheAvengers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;天啊！看著這些 Code 你心裡會有什麼想法？但身為工程師的直覺正告訴你，「絕對不會是這麼一回事。」對吧？於是 Google 後，你的瞳孔映射出的 Strategy Pattern 正閃著光芒。&lt;/p&gt;
&lt;h3&gt;Strategy Pattern 實作流程&lt;/h3&gt;
&lt;p&gt;有解決問題的方法，那就一定會有解決的流程，以下將解決的流程分成幾項。&lt;/p&gt;
&lt;h3&gt;找出實作不同的相同行為&lt;/h3&gt;
&lt;p&gt;以復仇者的例子來說，相同的行為是「飛」，於是我們將「飛」給抽出來，設計成 Interface ，並實作出幾種 Class ，代表各種「達成行為的方式」：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFlyBehavior&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CanNotFly&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFlyBehavior&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 不會飛&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlyWithHammer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFlyBehavior&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 用錘子飛&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlyWithArmor&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFlyBehavior&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 穿著鋼鐵裝飛&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;在 Parent Class 中透過 Interface 執行行為&lt;/h3&gt;
&lt;p&gt;將飛的方式抽成 Interface ，並用不同的 Class 實現後，要能夠在 Parent Class 中去執行，因此得將實現行為的 Class 放進 Parent Class 的屬性裡。&lt;/p&gt;
&lt;p&gt;這時候接口就派上用場了，因為不論是哪種飛的方式，都是 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;IFly&lt;/code&gt; 的實現，所以可以透過 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;IFly&lt;/code&gt; 定義屬性的型別，再直接以該接口執行行為：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TheAvengers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; flyBehavior&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IFlyBehavior&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; flyBehavior&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IFlyBehavior&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flyBehavior &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; flyBehavior&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flyBehavior&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的第 4 行就是定義 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;flyBehavior&lt;/code&gt; 屬性，並將它的型別指定為接口 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;IFlyBehavior&lt;/code&gt; ，如此一來不論是實現何種飛的 Class ，都可以在 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;constructor&lt;/code&gt; 時放進 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;flyBehavior &lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;第 11 行的 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;fly()&lt;/code&gt; 裡沒有任何「飛的邏輯」在裡面，而是透過 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;flyBehavior&lt;/code&gt; 去執行「飛」。&lt;/p&gt;
&lt;p&gt;最後還有繼承了 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;TheAvengers&lt;/code&gt; 的 Child Class ，它們除了要處理各自的屬性外，還要在 Constructor 中將剛剛建立的行為給 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;TheAvengers&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 下方三個 Child Class 繼承了 TheAvengers ，並將飛的行為用 super 送給 TheAvengers&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hulk&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TheAvengers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;浩克&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CanNotFly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thor&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TheAvengers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;索爾&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlyWithHammer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IronMan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TheAvengers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;鋼鐵人&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlyWithArmor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 建立 instance&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hulk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hulk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; thor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ironMan &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IronMan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 各自執行飛的動作&lt;/span&gt;
theHulk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 浩克 不會飛&lt;/span&gt;
thor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 索爾 用錘子飛&lt;/span&gt;
ironMan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 穿著鋼鐵人裝飛&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意哦！這時候所有的 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;fly&lt;/code&gt; 行為都是委託 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;IFly&lt;/code&gt; 接口執行，在 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;TheAvengers&lt;/code&gt; 裡根本就不需要知道是怎麼辦到的，&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;只要知道它接收了 IFly 接口類型，一定會有這個 fly Method 存在，不論他到底會做什麼，把執行飛的邏輯與 TheAvengers 拆開，只透過接口執行，就是把行為給封裝起來，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;封裝後再利用組合的方式處理不同的飛行方式，因為每個飛行方式都是一個實現了 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;IFly&lt;/code&gt; 的獨立 Class ，所以說，如果當我在 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;TheAvengers&lt;/code&gt; 中再加上 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;setFlyBehavior&lt;/code&gt; 這個 Method ，重新設定 &lt;code class=&quot;hp ku kv kw kx b&quot;&gt;flyBehavior&lt;/code&gt; 屬性：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TheAvengers&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;/*其餘省略*/&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setFlyBehavior&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flyBehavior&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IFlyBehavior&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flyBehavior &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; flyBehavior&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這麼一來，當有天浩克在路上撿到索爾的錘子，那他也就飛的起來：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hulk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hulk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
hulk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 浩克 不會飛&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 重新對浩克設定飛的行為&lt;/span&gt;
hulk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setFlyBehavior&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlyWithHammer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

hulk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 浩克 用錘子飛&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;結論&lt;/h3&gt;
&lt;p&gt;以下整理幾點關於 Strategy Pattern 的好處：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;77f5&quot; class=&quot;il im ea ar in b io kp iq kq is kr iu ks iw kt iy lt lu lv&quot;&gt;所有用不同方式實現的同一行為，都可以藉由 Interface 定義型別，所以不會綁定某個 Class ，造成耦合性太高。&lt;/li&gt;&lt;li id=&quot;aad1&quot; class=&quot;il im ea ar in b io lw iq lx is ly iu lz iw ma iy lt lu lv&quot;&gt;因為是用 Interface 的關係，所以不論遇到什麼樣的狀況，都能夠自由切換不同的實現方式，只要它也是同一個 Interface 的實現。&lt;/li&gt;&lt;li id=&quot;2b8d&quot; class=&quot;il im ea ar in b io lw iq lx is ly iu lz iw ma iy lt lu lv&quot;&gt;比起用 Inheritance 控制，將行為抽出後便能統一管理各個實現行為的邏輯，而不是讓這些邏輯重複且分散在各個 Child Class 中。&lt;/li&gt;&lt;li id=&quot;1bd5&quot; class=&quot;il im ea ar in b io lw iq lx is ly iu lz iw ma iy lt lu lv&quot;&gt;因為行為被封裝起來了，所以 Class 只需要針對 Interface 做處理，而不是那些實現的行為。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果大家看完文章，對 Strategy Pattern 有興趣的話，可以到筆者練習的 &lt;a href=&quot;https://github.com/ms314006/Design-Pattern-With-TypeScript/blob/master/StrategyPattern/README.md&quot; class=&quot;cx ga iz ja jb jc&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;GitHub&lt;/a&gt; ，裡面有很多在練習時到處玩的例子，可以一起交流！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本篇文章打起來的感覺很新奇，因為第一次不是介紹作法，而是講解怎麼應用，因此在開始時試著用一些情境，讓大家了解在開發時遇到的問題，再帶出 Design Pattern ，如果文章中有任何可以改進的地方、或是問題，再麻煩留言告訴我，感激不盡 🙇。&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;a319&quot; class=&quot;il im ea ar in b io kp iq kq is kr iu ks iw kt iy lt lu lv&quot;&gt;&lt;a href=&quot;https://www.tenlong.com.tw/products/9789867794529&quot; class=&quot;cx ga iz ja jb jc&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;深入淺出設計模式 (Head First Design Patterns)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Jest | 再一次測試你的 Component-feat.react-testing-library 基本用法]]></title><description><![CDATA[前言 Hi ！大家好，雖然之前有使用 Enzyme 講解如何搭配 Jest 對 React 的Component 做測試，但是幾個禮拜前偶然在某個討論串中看到有大神推薦另一套測試 Component 的套件 react-testing-library ，功能和 Enzyme…]]></description><link>https://ms314006.github.io/again-test-your-component/</link><guid isPermaLink="false">https://ms314006.github.io/again-test-your-component/</guid><pubDate>Sun, 16 Jun 2019 07:12:09 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Hi ！大家好，雖然之前有使用 &lt;a href=&quot;https://github.com/airbnb/enzyme&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Enzyme&lt;/a&gt; 講解如何搭配 &lt;a href=&quot;https://jestjs.io/&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Jest&lt;/a&gt; 對 &lt;a href=&quot;https://reactjs.org/&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;React&lt;/a&gt; 的Component 做測試，但是幾個禮拜前偶然在某個討論串中看到有大神推薦另一套測試 Component 的套件 &lt;a href=&quot;https://github.com/testing-library/react-testing-library&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;react-testing-library&lt;/a&gt; ，功能和 Enzyme 相同，兩者都是在測試時 Render Component 的 DOM 下斷言測試，如果是剛接觸 Enzyme 的朋友，不妨可以參考看看兩者的不同，來選擇愛用套件 😃 。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;react-testing-library&lt;/h2&gt;
&lt;h3&gt;SUT （測試目標）&lt;/h3&gt;
&lt;p&gt;在開始測試之前，仍然需要一個小助手，這裡請出之前常露面的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Counter&lt;/code&gt; 來擔任 SUT：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; changeCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-testid&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;display_count&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;點了&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;下&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;add_button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changeCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        點我加 1
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;add_button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changeCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        點我加 2
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Counter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;安裝 react-testing-library&lt;/h3&gt;
&lt;p&gt;因為只有在開發時的 Test 上用得到套件，因此安裝在 devDependencies 裡：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;fca4&quot; class=&quot;jw ig em at kl b fp kp kq r kr&quot;&gt;npm install --save-dev react-testing-library&lt;/span&gt;&lt;/pre&gt;
&lt;div style=&quot;border-left: 4px solid #333; padding-left: 26px; margin: 20px 0px; font-size: 20px; font-style: italic; &quot;&gt;
6 / 16 更新：要注意哦！ react-testing-library 似乎在版本 8 的時候將套件換成 @testing-library/react 了，目前筆者還不曉得差異在哪裡，使用來也沒有感到差別，所以如果文章中有問題再麻煩留言告知，感激不盡！&lt;/div&gt;
&lt;pre&gt;&lt;span id=&quot;9c73&quot; class=&quot;jw ig em at kl b fp kp kq r kr&quot;&gt;//新版本：&lt;br&gt;npm install --save-dev &lt;!-- --&gt;@testing-library/react&lt;/span&gt;&lt;/pre&gt;
&lt;h3&gt;常用 API&lt;/h3&gt;
&lt;p&gt;撰寫測試前，先簡單說明幾個常用的 API ：&lt;/p&gt;
&lt;h3&gt;render&lt;/h3&gt;
&lt;p&gt;react-testing-library 的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 類似於 Enzyme 中的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Mount&lt;/code&gt; ，意思是它會將所有的子組件都 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 出來成為 DOM 節點。&lt;/p&gt;
&lt;h3&gt;getByTestId 、 getByText&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 後會回傳的 Method ，兩個都是用來搜尋 DOM ， &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByTestId&lt;/code&gt; 是以 DOM 中的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;data-testid&lt;/code&gt; 值取要斷言的 DOM ， &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByText&lt;/code&gt; 則是以該 DOM 內呈現的內容，獲取到 DOM 後便能以 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;textContent&lt;/code&gt; 再取得內容。&lt;/p&gt;
&lt;h3&gt;container&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;hu ki kj kk kl b&quot;&gt;container&lt;/code&gt; 也是 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 所回傳的，等於取得整包 DOM 物件，甚至是能夠直接對它使用 &lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/API/Document/querySelector&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;query​Selector&lt;/a&gt; 來搜尋節點，通常我會在搞不清楚到底 Render 了什麼的時候，用 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;innerHTML&lt;/code&gt; 來偷看 😆。&lt;/p&gt;
&lt;h3&gt;fireEvent&lt;/h3&gt;
&lt;p&gt;這個 Method 可以觸發 DOM 的事件，例如 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;onClick&lt;/code&gt; 、 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;onChange&lt;/code&gt; 等等。&lt;/p&gt;
&lt;h3&gt;開始測試&lt;/h3&gt;
&lt;p&gt;其實只要了解上述幾個簡單的 API ，就能夠輕鬆對 Component 的節點做測試，下方先 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 出 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Counter&lt;/code&gt; ，並對 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;span&lt;/code&gt; 的內容做斷言，確認是否 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 正確：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fireEvent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cleanup &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-testing-library&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../src/component/Countera/Counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test &amp;lt;Counter /&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 每次測試後將 render 的 DOM 清空&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cleanup&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;測試是否正常 render &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// render Component&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getByTestId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getByText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; container&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Counter &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 下方三個方法都可以找到顯示計數的 &amp;lt;span /&gt;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;display_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了0下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了0下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了0下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;span&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了0下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方用了三種方式去取得 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;span&lt;/code&gt; 來確認 Component 顯示的是否正確， &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByTestId&lt;/code&gt; 就是直接抓取相同 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;data-testid&lt;/code&gt; 的 DOM，然後如果不幸有兩個 DOM 同時用了一樣的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;data-testid&lt;/code&gt; 那測試就會發生錯誤：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hq ak&quot; src=&quot;https://miro.medium.com/max/3752/1*1czrETEUgqfUeGtqzA9N1w.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x986F;&amp;#x793A;&amp;#x627E;&amp;#x5230;&amp;#x8907;&amp;#x6578;&amp;#x7684;&amp;#x932F;&amp;#x8AA4;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;但錯誤的提示還滿不錯的，如果真的必須要取同樣的名稱，也可以用 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getAllByTestId&lt;/code&gt; ，來獲得一個陣列，當然它也是由 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 回傳的 Method 之一。&lt;/p&gt;
&lt;p&gt;第二種方式是以 DOM 的內容來獲取，因為一開始 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Counter&lt;/code&gt; 中 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;State&lt;/code&gt; 的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;count&lt;/code&gt; 值是 0 ，所以可以知道 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;span&lt;/code&gt; 的內容會是 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;點了0下&lt;/code&gt; ，這個 Mtehod 可以用在內容不會改變的地方，像是登入按鈕的字就永遠是登入，儲存就永遠是儲存，不會有變化，這種情況就能用 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByText&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;第三種的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;container&lt;/code&gt; 就把它當成 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;JavaScript&lt;/code&gt; 取得的物件就好，但通常不會使用它來查找 DOM ，但為什麼？不是很方便嗎？這個是有原因的，文章的最後會整理一些結論。&lt;/p&gt;
&lt;p&gt;接著，要來確認的是按鈕的事件，點擊時會不會讓 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;count&lt;/code&gt; 值加上一或二，這時候就能用到剛剛提及的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByText&lt;/code&gt; 因為按鈕的文字是不會改變的，找到按鈕後就能使用 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;fireEvent&lt;/code&gt; 觸發點擊：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;測試點擊功能是否正常&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// render 畫面&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getByText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getByTestId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Counter &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 首先找到 +1 button&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; addButton &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點我加 1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addButton&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;display_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了1下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 接著找到 +2 button&lt;/span&gt;
  addButton &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點我加 2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addButton&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;display_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了3下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;change&lt;/code&gt; 也是一樣的方式，只需將改變的值放在 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;fireEvent&lt;/code&gt; 的第二個參數，要注意的是改變的值仍然要模擬觸發事件本身的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;event&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;apos&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;apos&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;測試結果如下：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hq ak&quot; src=&quot;https://miro.medium.com/max/2020/1*RBHGTr7uZK43TLMPjesUnA.png&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;感覺上寫起來是不是直觀許多了？而且在這之前一直故意不去提，不曉得大家有沒有發現，上述的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Counter&lt;/code&gt; 是透過 Hooks 的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;useState&lt;/code&gt; 管理 State ，也就是說 react-testing-library 百分之百完美相容 Hooks ，測試起來絕對不會有問題！&lt;/p&gt;
&lt;p&gt;顯然這是個令人開心的消息，但 Redux 呢？會不會相對變得複雜？&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;你的考量，我看得見！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下方就持續講解該如何在 Redux 專案中進行測試！&lt;/p&gt;
&lt;h2&gt;Redux&lt;/h2&gt;
&lt;p&gt;這裡先將小助手 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Counter&lt;/code&gt; 申裝上 Redux ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;prop-types&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; addCounter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../../actions/Counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; addCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-testid&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;display_count&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;點了&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;下&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;add_button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;點我加 1&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;add_button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;點我加 2&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  addCount&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;defaultProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;mapDispatchToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;addQuantity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;addQuantity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapStateToProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mapDispatchToProps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也少不了 Redux 的標配 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;actions&lt;/code&gt; 、 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;reducer&lt;/code&gt; 、 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;store&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ADD_COUNTER&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ADD_COUNTER&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addCounter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;addQuantity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ADD_COUNTER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  payload&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; addQuantity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;開始測試&lt;/h3&gt;
&lt;p&gt;欸等等？不需要再裝些什麼其他 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;redux-mock-store&lt;/code&gt; 嗎？&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;完全不用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;貫徹 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Mount&lt;/code&gt; 的精神，就直接用正式的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Reducer&lt;/code&gt; 正式的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;store&lt;/code&gt; 來測試，把覆蓋率蓋好蓋滿，以下會示範三種在 Redux 中玩轉測試的方法。&lt;/p&gt;
&lt;h3&gt;直接使用 Reducer 創建 Store&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Provider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fireEvent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cleanup &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-testing-library&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Counter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../src/component/CounterWithRedux/Counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; reducer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../src/reducer/Counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test &amp;lt;Counter /&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cleanup&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;直接用目前的 reducer render&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 用 import 的 reducer createStore&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 做 render&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getByText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getByTestId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Counter &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 印出 store 保管的 state 狀態&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點我加 1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;display_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了1下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 印出 store 保管的 state 狀態&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 的時候就直接帶入 Store 了，而且例子中有特別印了關於 Store 的兩段 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;console.log&lt;/code&gt; ，可以清楚看見 Store 會隨著測試改變 State 的值：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hq ak&quot; src=&quot;https://miro.medium.com/max/1868/1*0FMm6JI58juOtMbOG22KkQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Store &amp;#x7684;&amp;#x503C;&amp;#x6703;&amp;#x96A8;&amp;#x8457;&amp;#x6E2C;&amp;#x8A66;&amp;#x7684;&amp;#x904E;&amp;#x7A0B;&amp;#x6539;&amp;#x8B8A;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;如此一來也能更方便的知道，觸發某個 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;dispatch&lt;/code&gt; 後， Store 內的 State 變化是不是在預料之中。&lt;/p&gt;
&lt;h3&gt;指定 Reducer 的預設值&lt;/h3&gt;
&lt;p&gt;除了用原有的 Reducer 外，也能另外指定 State 取代 Reducer 自身的初始 State ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;預設 reducer 的初始值，從 2 開始&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 另外設定初始 State&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; initialState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 將 initialState 與 Reducer 一同 createStore&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getByText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getByTestId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Counter &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// +1&lt;/span&gt;
  fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點我加 1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;display_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了3下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;自訂 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;renderWithRedux&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;這個 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 方式不是 react-testing-library 原有的 Method ，而是官方用了一些小技巧另外寫的，它長這樣子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;renderWithRedux&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ui&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; initialState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ui&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起來有點複雜，但其實內部的原理就是將上方例子 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 的步驟簡化成 Method ，回傳的結果也和 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;render&lt;/code&gt; 後的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;Component&lt;/code&gt; 一樣，只是會多傳一個 Store ，實際用起來如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;直接預設 store ，保管的 state 從 -3 開始&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;token comment&quot;&gt;// 使用 renderWithRedux 回傳 render 後的結果&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getByText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getByTestId &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderWithRedux&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Counter &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;token comment&quot;&gt;// +2&lt;/span&gt;
   fireEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點我加 2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByTestId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;display_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;點了-1下&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;筆者也建議可以直接使用 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;renderWithRedux&lt;/code&gt; ，讓測試的畫面看起來比較乾淨俐落，不會定義一堆重複的東西，上方關於 Redux 的例子也都會改成 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;renderWithRedux&lt;/code&gt; 重新寫在&lt;a href=&quot;https://github.com/ms314006/Reac-Test-With-react-testing-library&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;筆者的 GitHub 上&lt;/a&gt;，可以再參考看看。&lt;/p&gt;
&lt;h2&gt;使用心得&lt;/h2&gt;
&lt;p&gt;react-testing-library 的基本方法大家都應該了解了，最後就來談談使用的心得。&lt;/p&gt;
&lt;p&gt;一開始最困惑的點是 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByTestId&lt;/code&gt; 和 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;getByText&lt;/code&gt; ，根本就不曉得到底為什麼要這樣子做，因此大量了使用 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;container&lt;/code&gt; 搭配 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;querySelector&lt;/code&gt; 抓取想斷言的 DOM ，初期用得很開心，但是最後突然發現，如果節點的位置發生改變，或多了另一個 DOM ，都有可能會讓 Test Case 錯誤，但其實不是錯在邏輯，而是因為原本的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;querySelector&lt;/code&gt; 已經取不到更改前的 DOM 。&lt;/p&gt;
&lt;p&gt;這裡 react-testing-library 的開發者 Kent C. Dodds&lt;strong class=&quot;is ly&quot;&gt; &lt;/strong&gt;，也有在他的 &lt;a href=&quot;https://kentcdodds.com/blog&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Blog&lt;/a&gt; 寫了&lt;a href=&quot;https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;一篇文章&lt;/a&gt;提出對 UI 面對測試時的看法&lt;/p&gt;
&lt;p&gt;文章裡有個最簡單的例子，當假設 Component 中有一個按鈕：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button_style&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;點我&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那 Test Case 會這樣子得到它：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;container&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button[class=&quot;button_style&quot;]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起來一切正常，但是當對 Component 做了異動：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button_style&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;想不到吧&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button_style&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;點我&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原本 Test Case 中的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;querySelector&lt;/code&gt; 就取成第一個新增的按鈕，而不是原有的 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;點我&lt;/code&gt; 按鈕。&lt;/p&gt;
&lt;p&gt;再來，若是有天 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;button&lt;/code&gt; 們都不再需要依賴 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;button_style&lt;/code&gt; 這個樣式，那是否應該要為了 Test Case 而將這沒有任何用的 ClassName 屬性留下？答案應該很明顯。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;
            font-size: 30px;
            color: rgb(105, 105, 105);
            font-style: italic;
            padding: 0px 60px;
            margin: 30px 0px;
          &quot;&gt;因此，提升 UI 在測試時的適應力非常重要！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果考量到 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;data-testid&lt;/code&gt; 被 build 後會被看見，也可以透過 &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-react-remove-properties&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;babel-plugin-react-remove-properties&lt;/a&gt; 將 &lt;code class=&quot;hu ki kj kk kl b&quot;&gt;data-testid&lt;/code&gt; 移除。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文用了一些例子講解 react-testing-library ，因為筆者大約是今年三月多才開始玩測試，所以 Enzyme 及 react-testing-library 體感上會偏好使用後者，因為寫起來還滿方便的而且又支援 Hooks 😅，不過如果有不同看法，也歡迎提出一起討論！&lt;/p&gt;
&lt;p&gt;最後對於文章中講解有任何不清楚或是覺得有需要補充的地方，再麻煩留言指教，謝謝！&lt;/p&gt;
&lt;p&gt;參考文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;3ae2&quot; class=&quot;iq ir em at is b it kw iv kx ix ky iz kz jb la jd lz ma mb&quot;&gt;&lt;a href=&quot;https://github.com/testing-library/react-testing-library&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://github.com/testing-library/react-testing-library&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;d96f&quot; class=&quot;iq ir em at is b it mc iv md ix me iz mf jb mg jd lz ma mb&quot;&gt;&lt;a href=&quot;https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change&quot; class=&quot;dj by je jf jg jh&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Jest | 跨越同步執行的 Jest 測試]]></title><description><![CDATA[前言 上一篇「讓 Jest 為你的 Code 做測試-基礎用法教學」中提到了如何使用 Jest 做單元測試，但是 JavaScript 是屬於同步執行的程式碼，這種特性會使 Jest…]]></description><link>https://ms314006.github.io/jest-async/</link><guid isPermaLink="false">https://ms314006.github.io/jest-async/</guid><pubDate>Wed, 27 Mar 2019 00:06:20 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;上一篇「&lt;a class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/jest-base-tutorial/&quot;&gt;讓 Jest 為你的 Code 做測試-基礎用法教學&lt;/a&gt;」中提到了如何使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Jest&lt;/code&gt; 做單元測試，但是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 是屬於同步執行的程式碼，這種特性會使 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Jest&lt;/code&gt; 在測試結果出現問題，本篇會針對這點來講解關於異步測試的方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;異步測試&lt;/h2&gt;
&lt;h3&gt;測試流程&lt;/h3&gt;
&lt;p&gt;首先建立一個用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;setTimeout&lt;/code&gt; 的延遲模擬請求獲取資料的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;function&lt;/code&gt; ，獲取後再將資料傳到 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;callBack&lt;/code&gt; 中執行。&lt;/p&gt;
&lt;p&gt;這裡將函式 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;fetchData&lt;/code&gt; 放在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;./func/async.js&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//傳入一個 callBack 函數，在獲取資料時執行&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;callBack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token function&quot;&gt;callBack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//將該 fetchData 函式匯出&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    fetchData&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fetchData
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建立測試檔案 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;./&lt;strong&gt;test&lt;/strong&gt;/async.test.js&lt;/code&gt; ，在檔案中匯入 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;fetchData&lt;/code&gt; ，並在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;callBack&lt;/code&gt; 函式內設定斷言，測試 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;fetchData&lt;/code&gt; 回傳的資料是否符合期望值：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/async.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//建立測試&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//callBack 會在 fetchData 取得資料後執行&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callBack&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;//將上方的 callBack 函式傳入 fetchData 中&lt;/span&gt;
    async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成以上設置後，便可以執行測試了，這裡使用能夠產生覆蓋率報告的測試指令，會得到以下結果：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2348/1*MHX0_s7j43ZOskPYi7k9sQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6E2C;&amp;#x8A66;&amp;#x7D50;&amp;#x679C;&amp;#x986F;&amp;#x793A;&amp;#x6B63;&amp;#x78BA;&amp;#xFF0C;&amp;#x4F46;&amp;#x8986;&amp;#x84CB;&amp;#x7387;&amp;#x537B;&amp;#x4E0D;&amp;#x662F; 100 %&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;可以看到結果是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;PASS&lt;/code&gt; ，也就是說 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;callBack&lt;/code&gt; 接收到的斷言和我們期望的值相同，但是卻發現測試的覆蓋率卻不是 100 %，代表在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;fetchData&lt;/code&gt; 中有些地方沒有執行到，測試就已經結束了，這時可以點開 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;./coverage/Icov-report&lt;/code&gt; 內關於 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;async.js&lt;/code&gt; 的執行報告來看：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2356/1*_l_TlHzblrccb6_q-5Hwqg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5728;&amp;#x6E2C;&amp;#x8A66;&amp;#x6642;&amp;#x6839;&amp;#x672C;&amp;#x6C92;&amp;#x8DD1;&amp;#x9032; callBack &amp;#x4E2D;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;發現問題&lt;/h3&gt;
&lt;p&gt;經過上方的操作，可以發現就算在測試中 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 也是一如既往同步執行，不會等到 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;callBack&lt;/code&gt; 執行，也不會到設定的斷言，整個測試就已經結束了。&lt;/p&gt;
&lt;p&gt;這裡可以將代碼改為更直接的方式測試：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/async.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callBack&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//將斷言中的結果傳入空值，期望值為 &apos;getData&apos; 不變&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有興趣可以試試上方的測試，結果依然會是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;PASS&lt;/code&gt; ，因為 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;callBack&lt;/code&gt; 函式根本就沒有執行到。&lt;/p&gt;
&lt;h3&gt;解決問題&lt;/h3&gt;
&lt;p&gt;雖然在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 中，處理同步問題一直不是輕鬆的事情，但是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Jest&lt;/code&gt; 在執行測試的時候可以透過 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;done()&lt;/code&gt; 來應付這個狀況。&lt;/p&gt;
&lt;p&gt;簡單來說，如果在測試裡有加入 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;done()&lt;/code&gt; ，那只要還沒執行到 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;done()&lt;/code&gt; 就不算結束測試，因此可以將它加入上方的程式裡：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/async.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//將 done 傳入測試中&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callBack&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//在 callBack 函式內的斷言後加上 done&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加入 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;done()&lt;/code&gt; 後重新執行測試，就可以看到報告呈現了完美的一片綠光。&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2308/1*TL0MzoVpZW0FAPvgG-5QAg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6E2C;&amp;#x8A66;&amp;#x8986;&amp;#x84CB;&amp;#x7387;&amp;#x5DF2;&amp;#x9054; 100 %&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;需要注意的是，如果測試中有傳入 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;done&lt;/code&gt; 但卻未執行它，那麼該測試結果就會出現 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;FAIL&lt;/code&gt; 失敗：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/async.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callBack&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行測試結果如下：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2852/1*iJSfXFmId2Ci-_RkDAICxw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6E2C;&amp;#x8A66;&amp;#x6642;&amp;#x64C1;&amp;#x6709;&amp;#x53C3;&amp;#x6578; done &amp;#x537B;&amp;#x672A;&amp;#x57F7;&amp;#x884C;&amp;#xFF0C;&amp;#x6E2C;&amp;#x8A66;&amp;#x6703;&amp;#x7522;&amp;#x751F;&amp;#x932F;&amp;#x8AA4;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;使用 Promise&lt;/h3&gt;
&lt;p&gt;如果既有的程式碼已使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 處理同步，便不必再使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;done&lt;/code&gt; ，直接以 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.then&lt;/code&gt; 接收 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 物件傳進 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;resolve&lt;/code&gt; 的結果即可：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;promiseFetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    promiseFetchData&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; promiseFetchData
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; async &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/async.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test promise async&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//return 是必須的，否則不會執行 .then 的內容&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;promiseFetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，在測試的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;function&lt;/code&gt; 中必須加上 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;return&lt;/code&gt; ，否則測試不會跑進 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.then&lt;/code&gt; 中，只會在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 將結果送進 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;resolve&lt;/code&gt; 時就結束了，另外！當 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 中的結果跑進 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;reject&lt;/code&gt; 那測試也會產生錯誤。&lt;/p&gt;
&lt;p&gt;測試結果得到 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;PASS&lt;/code&gt; ，覆蓋率也是 100 %：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/3676/1*ADb294uKDf2j0PmxraDOHA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4F7F;&amp;#x7528; Promise &amp;#x6E2C;&amp;#x8A66;&amp;#x7684;&amp;#x7D50;&amp;#x679C;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;上述說明了成功的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;resolve&lt;/code&gt; 在測試中用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.then&lt;/code&gt; 接收，而失敗的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;reject&lt;/code&gt; 則是使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.catch&lt;/code&gt; 處理接下來的動作，這部分和 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 的操作都相同，就不再闡述，如果對 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 不熟，可以參考「&lt;a class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/js-promise/&quot;&gt;JacaScript | 從Promise開始承諾的部落格生活&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hm jc jd je jf b&quot;&gt;Jest&lt;/code&gt; 在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;expect&lt;/code&gt; 內還另外擁有兩個內建屬性來針對 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 做處理，分別為 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;resolves&lt;/code&gt; 及 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;rejects&lt;/code&gt; ，他們會直接捕捉 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 傳進&lt;code class=&quot;hm jc jd je jf b&quot;&gt;resolve&lt;/code&gt; 或 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;reject&lt;/code&gt; 的資料判斷是否符合期望值，這裡以 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;rejects&lt;/code&gt; 作為例子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;promiseErrorFetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    promiseErrorFetchData&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; promiseErrorFetchData
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;測試時，直接將 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;promiseErrorFetchData&lt;/code&gt; 作為參數傳遞給 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;expect&lt;/code&gt; ，並透過 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;expect&lt;/code&gt; 的內建屬性 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;rejects&lt;/code&gt; 取得 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;promiseErrorFetchData&lt;/code&gt; 中 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 傳進 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;reject&lt;/code&gt; 的資料下斷言：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test rejects in promise&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//return 是必須的，否則不會等 Promise 執行到 reject 測試就結束了&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;promiseErrorFetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rejects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個方式筆者認為能夠更直覺性的使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 的測試，得到的結果也都和上方一樣，但主要還是配合團隊使用其中一種，才不會讓測試代碼顯得雜亂，當然！個人開發也是一樣。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文針對異步請求在測試內產生的問題舉了幾個例子解決，但其實官網上還有提出一種使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;async/await&lt;/code&gt; 的方式，不過筆者還未學習到 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 中關於 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;async&lt;/code&gt; 及 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;await&lt;/code&gt; 的用法，因此怕現階段會誤導大家，就等日後使用到再回來補充文章內容。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;223c&quot; class=&quot;ik il em at im b in kg ip kh ir ki it kj iv kk ix kw kx ky&quot;&gt;&lt;a href=&quot;https://jestjs.io/docs/en/asynchronous#async-await&quot; class=&quot;dj by iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://jestjs.io/docs/en/asynchronous#async-await&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Jest | 替測試設置分類（describe）及作用域（scoping）]]></title><description><![CDATA[前言 關於 describe ，在進行測試時其實是很基本的分類，但是因為 describe 牽扯到了作用域，而在作用域內的 beforeAll 和 afterAll 等 Function 又和 async 異步測試有關，所以本篇文章的內容可能會需要先了解「Unit Test…]]></description><link>https://ms314006.github.io/jest-describe-and-scoping/</link><guid isPermaLink="false">https://ms314006.github.io/jest-describe-and-scoping/</guid><pubDate>Tue, 26 Mar 2019 00:05:48 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;關於 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; ，在進行測試時其實是很基本的分類，但是因為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; 牽扯到了作用域，而在作用域內的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 和 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; 等 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 又和 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;async&lt;/code&gt; 異步測試有關，所以本篇文章的內容可能會需要先了解「&lt;a class=&quot;dj by jc jd je jf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/jest-async/&quot;&gt;Unit Test | 跨越同步執行的 Jest 測試&lt;/a&gt;」裡所提到的幾個用法，如果有任何問題再麻煩留言告訴我，謝謝！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;describe&lt;/h2&gt;
&lt;p&gt;在講解之前，可以先看一些基本的測試：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; intX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; intX &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; intX
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test default return zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test 3 plus 5 is 8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pass when value is NaN can return zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pass 3 can return 9&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pass when value is String can return zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;efg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方對 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;sum&lt;/code&gt; 做了三次測試， &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;square&lt;/code&gt; 做了一次，通過測試後得到了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;PASS&lt;/code&gt; 的結果：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1984/1*CNW23_5VkUjlswDrswj6fw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6240;&amp;#x6709;&amp;#x6E2C;&amp;#x8A66;&amp;#x5167;&amp;#x5BB9;&amp;#x6DF7;&amp;#x5728;&amp;#x4E00;&amp;#x8D77;&amp;#xFF0C;&amp;#x4E0D;&amp;#x5BB9;&amp;#x6613;&amp;#x770B;&amp;#x51FA;&amp;#x662F;&amp;#x5728;&amp;#x6E2C;&amp;#x8A66;&amp;#x4EC0;&amp;#x9EBC; Function&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;所有的測試內容都會條列顯示，雖然可以清楚的知道在每一項測試中做了什麼事情，但卻無法曉得該測試是對哪個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 做的，而就一般來說，測試檔案裡也不會只需測試一個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 而已。&lt;/p&gt;
&lt;p&gt;因此，需要把測試用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; 分類，讓測試者可以一眼就能知道哪些測試內容是對哪個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 使用。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; 的使用方法很簡單，就像 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;test&lt;/code&gt; 一樣，它會接收兩個參數，第一個是對 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; 的描述，第二個是 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; ，屬於此 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;test&lt;/code&gt; 都放在該 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;將上方的例子做分類會得到：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*函式部份省略*/&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test sum&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test default return zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test 3 plus 5 is 8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pass when value is NaN can return zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test square&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pass 3 can return 9&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pass when value is String can return zero&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;efg&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;經過分類後再進行測試，會更清楚每一項測試是在哪個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 身上：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1848/1*LwsQWirkFZuvuchOEjl9bQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7D93;&amp;#x904E;&amp;#x5206;&amp;#x985E;&amp;#x5F8C;&amp;#x6703;&amp;#x66F4;&amp;#x6E05;&amp;#x695A;&amp;#x6BCF;&amp;#x4E00;&amp;#x9805;&amp;#x6E2C;&amp;#x8A66;&amp;#x662F;&amp;#x5728;&amp;#x54EA;&amp;#x500B; Function &amp;#x8EAB;&amp;#x4E0A;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2&gt;scoping&lt;/h2&gt;
&lt;p&gt;每個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;.test.js&lt;/code&gt; 測試檔案的內容就如一般的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;JavaScript&lt;/code&gt; ，依照 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function&lt;/code&gt; 的範圍分成全域及區域的執行。&lt;/p&gt;
&lt;p&gt;在測試中，執行範圍會影響到的除了變數外還有另外幾個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Jest&lt;/code&gt; 提供的函式：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;ae81&quot; class=&quot;ik il em at im b in jv ip jw ir jx it jy iv jz ix ke kf kg&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; ：所在區域內會第一個執行。&lt;/li&gt;&lt;li id=&quot;e90e&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix ke kf kg&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeEach&lt;/code&gt; ：每一次的測試前會先執行。&lt;/li&gt;&lt;li id=&quot;b303&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix ke kf kg&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; ：所在區域內最後一個執行。&lt;/li&gt;&lt;li id=&quot;e15a&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix ke kf kg&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterEach&lt;/code&gt; ：每一次的測試後會馬上執行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可由以下例子更清楚它們的執行順序：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;全域 beforeAll ：全域的第一個順序執行&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;全域 beforeEach ：每次測試前都會執行，優先度大於區域的&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;afterAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;全域 afterAll ：全域的最後一個順序執行&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;全域 afterEach ：每次測試後都會執行，優先度低於區域的&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;區域 beforeAll ：區域的第一個順序執行&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;區域 beforeEach ：每次測試前都會執行，優先度低於全域的&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;afterAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;區域 afterAll ：區域的最後一個順序執行&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;區域 afterEach ：每次測試後都會執行，優先度大於全域的&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行結果：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1968/1*atbUx-IqZaj7E_iz6KLrxw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;beforeAll , afterAll , beforeEach , afterEach &amp;#x5728;&amp;#x5168;&amp;#x57DF;&amp;#x53CA;&amp;#x5340;&amp;#x57DF;&amp;#x5167;&amp;#x7684;&amp;#x57F7;&amp;#x884C;&amp;#x9806;&amp;#x5E8F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 和 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; 一定是全域和區域內的第一個執行，而 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeEach&lt;/code&gt; 和 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterEach&lt;/code&gt; 則會夾住 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;test&lt;/code&gt; ，分別會在單一測試的前後執行，只要記住全域的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;before&lt;/code&gt; 一定是最先， &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;after&lt;/code&gt; 是最後。&lt;/p&gt;
&lt;p&gt;在測試裡，可以利用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 或 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeEach&lt;/code&gt; 初建立測試資料，並在測試完後以 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; 或 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterEach&lt;/code&gt; 將資料給移除。&lt;/p&gt;
&lt;p&gt;接著透過實際運用來理解這四個函式的使用方法：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//模擬資料庫的資料&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userDB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;小明&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;小華&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//新增測試資料&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;insertTestData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    userDB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//移除測試資料&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;deleteTestData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; findIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userDB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; id
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findIndex &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        userDB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//查詢測試資料&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getUserData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; goalData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userDB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; id
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; goalData
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//全部測試完後確認資料狀態&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;afterAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userDB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test about user data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//開始前新增測試資料&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;insertTestData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;測試人員&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//結束時清除測試資料&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;afterAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;deleteTestData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//確認是否回傳正確的資料&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test get user data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;測試人員&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方例子使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;userDB&lt;/code&gt; 模擬資料庫的資料，並在測試前透過 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 新增一筆測試資料，測試完後再以 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; 將測試資料清除，最後利用全域 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; 最後執行的特性確認 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;userDB&lt;/code&gt; 是否回到初始狀態：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1788/1*fOf48xRm7IgokN9rL3gp6Q.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6E2C;&amp;#x8A66;&amp;#x6210;&amp;#x529F;&amp;#xFF0C;&amp;#x4E14;&amp;#x6700;&amp;#x5F8C;&amp;#x5168;&amp;#x57DF;&amp;#x7684; afterAll &amp;#x57F7;&amp;#x884C;&amp;#x6642;&amp;#xFF0C; userDB &amp;#x5DF2;&amp;#x7121;&amp;#x6E2C;&amp;#x8A66;&amp;#x8CC7;&amp;#x6599;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;既然是模擬資料庫，一定會有一些延遲時間，所以替 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;insertTestData&lt;/code&gt; 增加 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;setTimeout&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;a7d2&quot; class=&quot;ks hy em at jb b fh kt ku r kv&quot;&gt;//在新增測試資料增加 Timeout&lt;br&gt;const insertTestData = data=&amp;gt; {&lt;br&gt;    setTimeout(() =&amp;gt; {&lt;br&gt;        userDB.push(data)&lt;br&gt;    },3000)&lt;br&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;其餘不變的狀況下再進行測試一次：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2512/1*VQBUluqX5FPkKPBaYuCvJg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Received &amp;#x7684;&amp;#x503C;&amp;#x662F; undefined &amp;#xFF0C;&amp;#x4E0D;&amp;#x7B26;&amp;#x5408;&amp;#x671F;&amp;#x671B;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;因為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Timeout&lt;/code&gt; 延遲的關係，對 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;getUserData&lt;/code&gt; 執行測試的時候，測試資料還沒有被 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;push&lt;/code&gt; 進 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;userDB&lt;/code&gt; 裡面，因此在找不到資料的情況下函式就回傳 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;undefined&lt;/code&gt; ，這個結果並不是測試所期望的。&lt;/p&gt;
&lt;p&gt;在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 等函數中，處理異步執行有幾種方法：&lt;/p&gt;
&lt;p&gt;第一種是當 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;insertTestData&lt;/code&gt; 中含有 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;callBack&lt;/code&gt; 函式時，可以使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;done&lt;/code&gt; 來設置 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 的完成點，只要沒有執行到 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;done&lt;/code&gt; 就不會離開 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; ，例如將 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;insertTestData&lt;/code&gt; 和 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 改成下方：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//傳入 done 參數&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//callBack 函式，會在 Timeout 後執行&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callBack&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//當執行完 Timeout ，進入 callBack 後就能結束&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//將 callBack 函式傳入 insertTestData&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;insertTestData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;測試人員&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callBack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這麼一來，就能確保是在新增資料後才會接著測試，結果就會正確。&lt;/p&gt;
&lt;p&gt;第二個方式是，在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;insertTestData&lt;/code&gt; 本身就回傳一個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Promise&lt;/code&gt; 物件的情況，只需要在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 中回傳從 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;insertTestData&lt;/code&gt;得到的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Promise&lt;/code&gt; 就可以了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//藉由 return 接收到的 Promise 處理異步請求&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;insertTestData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;測試人員&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的兩種方式都能為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 等函式處理同步執行產生的問題，得到結果也相同，測試過程當然就不會出錯！&lt;/p&gt;
&lt;p&gt;關於處理同步執行更詳細說明可以參考「&lt;a class=&quot;dj by jc jd je jf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/jest-async/&quot;&gt;Unit Test | 跨越同步執行的 Jest 測試&lt;/a&gt;」，裡面會有更清楚的例子。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本篇文章主要是在整理測試的程式內容，能夠使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;describe&lt;/code&gt; 為相同函式的測試內容做分類，並使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeAll&lt;/code&gt; 、 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterAll&lt;/code&gt; 、 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;beforeEach&lt;/code&gt; 、 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;afterEach&lt;/code&gt; 等函式建構及清除測試環境。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;ce4e&quot; class=&quot;ik il em at im b in jv ip jw ir jx it jy iv jz ix ke kf kg&quot;&gt;&lt;a href=&quot;https://jestjs.io/docs/en/setup-teardown&quot; class=&quot;dj by jc jd je jf&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://jestjs.io/docs/en/setup-teardown&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Jest | 讓 Jest 為你的 Code 做測試-基礎用法教學]]></title><description><![CDATA[前言 單元測試是進入前端工程後一直很想學的技能，主要是做過測試能讓自己的程式碼維持一定的水準，尤其在團隊開發時，更不會在上線時因為沒注意到某個細節而產生 Bug ，導致專案出現問題。 單元測試 單元測試是指為專案中每個單一行為做測試，通常專案裡的最小單位都是一個 function…]]></description><link>https://ms314006.github.io/jest-base-tutorial/</link><guid isPermaLink="false">https://ms314006.github.io/jest-base-tutorial/</guid><pubDate>Mon, 25 Mar 2019 00:06:45 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;單元測試是進入前端工程後一直很想學的技能，主要是做過測試能讓自己的程式碼維持一定的水準，尤其在團隊開發時，更不會在上線時因為沒注意到某個細節而產生 Bug ，導致專案出現問題。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;單元測試&lt;/h2&gt;
&lt;p&gt;單元測試是指為專案中每個單一行為做測試，通常專案裡的最小單位都是一個 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;function&lt;/code&gt; ，當每個 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;function&lt;/code&gt; 經過測試，確保邏輯是正確的，那當他在專案裡運行時也就比較不會發生問題，且留下的測試文件也可以在團隊討論或交接時更清楚。&lt;/p&gt;
&lt;h2&gt;Jest&lt;/h2&gt;
&lt;p&gt;用於前端的測試框架不是只有 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; ，選擇原因是因為筆者較擅長使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;React&lt;/code&gt; ，而 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 在測試方面和 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;React&lt;/code&gt; 的整合度較佳。除了 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 以外，常聽到的測試框架還有 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;mocha&lt;/code&gt; 。&lt;/p&gt;
&lt;h3&gt;建立專案&lt;/h3&gt;
&lt;p&gt;首先到專案資料夾的目錄下，在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;node.js&lt;/code&gt; 環境下創建 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;npm&lt;/code&gt; 專案：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;59a2&quot; class=&quot;jq hy em at jp b fh ke kf r kg&quot;&gt;npm init -y&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;這時候在專案資料夾內會產生記錄著專案開發設定的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;package.json&lt;/code&gt; ，如果還不曉得如何安裝 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;node.js&lt;/code&gt; 可以參考「&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199058&quot; class=&quot;dj by km kn ko kp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;第一次建置node.js開發環境和安裝npm就上手！&lt;/a&gt;」的說明。&lt;/p&gt;
&lt;h3&gt;下載套件&lt;/h3&gt;
&lt;p&gt;透過 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;npm&lt;/code&gt; 套件管理工具下載 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 測試框架到專案的執行環境中：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;8fa8&quot; class=&quot;jq hy em at jp b fh ke kf r kg&quot;&gt;npm install jest --save-dev&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;h3&gt;設定測試指令&lt;/h3&gt;
&lt;p&gt;打開 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;package.json&lt;/code&gt; ，可以看到剛剛下載的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 已經被記錄在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;devDependencies&lt;/code&gt; 中了：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2480/1*1zlNw85HMsBERXDIm1iWIw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4E0B;&amp;#x8F09;&amp;#x5728;&amp;#x958B;&amp;#x767C;&amp;#x74B0;&amp;#x5883;&amp;#x7684; Jest &amp;#x6703;&amp;#x88AB;&amp;#x8A18;&amp;#x9304;&amp;#x5728; package.json &amp;#x4E2D;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;在上圖第一行的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;scripts&lt;/code&gt; 是在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;npm&lt;/code&gt; 的開發環境中設定執行指令的地方，上方的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;test&lt;/code&gt; 便是預設的指令之一，可以直接把他的內容改掉，如下：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;c3b1&quot; class=&quot;jq hy em at jp b fh ke kf r kg&quot;&gt;scripts: {&lt;br&gt;    &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;&lt;br&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;設定好後，只需在終端機中使用以下方式輸入，便能執行設定好的對應指令：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;d671&quot; class=&quot;jq hy em at jp b fh ke kf r kg&quot;&gt;npm run test //對應指令&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;需要注意的是，如果是使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;npm&lt;/code&gt; 的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;scripts&lt;/code&gt; 執行指令，那他的執行環境就是專案本身，尋找執行環境中的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 或其他套件執行。&lt;/p&gt;
&lt;p&gt;換個說法，直接在終端機中輸入 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;jest&lt;/code&gt; ，執行環境就不會在專案內，而是以全域為主，但是全域環境下並沒有安裝 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 便會出錯，除非將 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 安裝在全域中：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;483c&quot; class=&quot;jq hy em at jp b fh ke kf r kg&quot;&gt;npm install jest -g  // -g 代表全域&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;h3&gt;建立測試&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 在執行測試時，會尋找專案中副檔名為 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;.test.js&lt;/code&gt; 結尾的檔案，但不限制要放在哪個資料夾，所以在根目錄新增一個 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;index.test.js&lt;/code&gt; 建立第一個測試：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check the result of 5 + &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把上方的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;test&lt;/code&gt; 當作一個函式，負責描寫一個單元測試，他擁有兩個參數：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;30c7&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix kt ku kv&quot;&gt;第一個參數為「測試名稱」，能夠簡單描述這部分是在測試什麼邏輯或功能。&lt;/li&gt;&lt;li id=&quot;8008&quot; class=&quot;ik il em at im b in kw ip kx ir ky it kz iv la ix kt ku kv&quot;&gt;第二個參數是一個函式，又稱斷言，函式內的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;expect&lt;/code&gt; 用來描述被測試的內容， &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; 是測試內容的回傳值是否符合期望值，例如上方的測試內容為「5加上2期望會等於7」。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;執行測試&lt;/h3&gt;
&lt;p&gt;在終端機中輸入在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;scripts&lt;/code&gt; 中設定好的指令：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;af77&quot; class=&quot;jq hy em at jp b fh ke kf r kg&quot;&gt;npm run test&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;執行後會顯示測試的結果：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2052/1*AWs8n889ow5TGARGJfTYFA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x901A;&amp;#x904E; Jest &amp;#x6E2C;&amp;#x8A66;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;結果內會顯示 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 測試了哪些 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;.test.js&lt;/code&gt; 檔案，還有每個測試（ &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;expect&lt;/code&gt; ）內的結果（ &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; ）是否正確符合，符合的話會輸出 PASS。&lt;/p&gt;
&lt;p&gt;現在把 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; 內的數字改成 8 ，再進行一次測試：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2096/1*4SvI51e4bnaGhwpRKnguoA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x672A;&amp;#x901A;&amp;#x904E; Jset &amp;#x6E2C;&amp;#x8A66;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;當測試失敗時， &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 會再結果中顯示哪個檔案內的測試有問題，並會提示正確的結果 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Received&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;這就是使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 測試的基本方法，但實際上需要測試的函式都已經寫好了，並不會在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;expect&lt;/code&gt; 中寫下邏輯，因此可以直接在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;expect&lt;/code&gt; 中呼叫函式，測試結果的正確性，例如：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//要測試的函式&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check the result of 5 + 2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//在 expect 中呼叫函式測試結果&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;其他斷言&lt;/h3&gt;
&lt;p&gt;斷言的種類有很多，上方的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; 只是其中一種測試方式，除此之外還有以下的斷言可以使用：&lt;/p&gt;
&lt;p&gt;除了 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; 外，對字串還可以用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toMatch&lt;/code&gt; 搭配正規表達式檢查：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Use toMatch test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//搭配正規表達式&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Happy new year.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;/new/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確認物件是否等於期望值需使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toEqual&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Check the object type&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; peopleA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GQSM&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    peopleA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//測試字串&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;peopleA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;GQSM&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//測試物件&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;peopleA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GQSM&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;預防函式回傳某個結果可以使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;not&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Use not&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; peopleA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GQSM&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//確認 name 不等於空&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;peopleA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    peopleA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//如果 name 是空的&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;peopleA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的第 9 行 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;peopleA.name&lt;/code&gt; 是空的，而在使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;not&lt;/code&gt; 的情況下結果需不等於期望值，所以不會通過測試：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1880/1*FTrtUdy0rQ3DyLfgVu3YYg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4F7F;&amp;#x7528; not &amp;#x6E2C;&amp;#x8A66;&amp;#x4EE3;&amp;#x8868;&amp;#x7D50;&amp;#x679C;&amp;#x9700;&amp;#x4E0D;&amp;#x7B49;&amp;#x65BC;&amp;#x671F;&amp;#x671B;&amp;#x503C;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;確認數字結果的斷言：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test integer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//整數可以使用 toBe 或 toEqual 斷言&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//測試輸出值是否大於期望值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeGreaterThan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//測試輸出值是否大於等於期望值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeGreaterThanOrEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//測試輸出值是否小於期望值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeLessThan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//測試輸出值是否小於期望值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeLessThanOrEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;JavaScript&lt;/code&gt; 中的小數點運算會產生誤差，因此浮點數需要使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBeCloseTo&lt;/code&gt; 做斷言，他會捨棄掉些微的誤差：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Test float&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//會忽略些微的誤差&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCloseTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//需完全相等&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; 會不通過測試，因為 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toBe&lt;/code&gt; 需要完全符合：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1852/1*_RriFb170IYrCpf53cyPhA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;JavaScript &amp;#x7684;&amp;#x6D6E;&amp;#x9EDE;&amp;#x6578;&amp;#x6703;&amp;#x51FA;&amp;#x73FE;&amp;#x8AA4;&amp;#x5DEE;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;對陣列可以用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;toContain&lt;/code&gt; 判斷陣列內是否含有某值，或搭配迴圈對每個位置做斷言：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;For array test in jest&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arrA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//檢查陣列內是否含有某值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toContain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;//搭配迴圈檢查每個位置都不等於空&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; arrA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrA&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後是用來判斷特殊值的斷言，例如 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;undefined&lt;/code&gt; 、 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;null&lt;/code&gt; 、 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;true&lt;/code&gt; 等等：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Special value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//期望值為 true&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeTruthy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;//期望值為 false&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeFalsy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//期望值為 null&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//期望值為 undefined&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeUndefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//期望值為 undefined 之外的值&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeDefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;產生覆蓋率報告&lt;/h3&gt;
&lt;p&gt;在測試的時候，會使用各種斷言來確認結果是否與期望值符合，但是如果測試的內容遺漏了某個條件分支，便無法確認該分支的邏輯性是否正確。&lt;/p&gt;
&lt;p&gt;覆蓋率就是用來統計被測試的函式，程式碼的執行比例，當函式內所有程式都被測試過，那覆蓋率就會呈現 100% 。&lt;/p&gt;
&lt;p&gt;另外， &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 內建的覆蓋率會以每個 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;JavaScript&lt;/code&gt; 檔案統計，因此在產生前還需要將「函式」與「測試」檔案分開，如下：&lt;/p&gt;
&lt;p&gt;建立 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;./funcs/func.js&lt;/code&gt; 放要測試的函式：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sum&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; sum
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm jm jn jo jp b&quot;&gt;func.js&lt;/code&gt; 中的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;sum&lt;/code&gt; 有兩個分支，一個是在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;b&lt;/code&gt; 有值的時候回傳 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;a + b&lt;/code&gt; ，另一個是在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;b&lt;/code&gt; 沒有值的情況下直接回傳 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;a&lt;/code&gt; ，最後使用 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;module.exports&lt;/code&gt; 將 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;sum&lt;/code&gt; 匯出。&lt;/p&gt;
&lt;p&gt;接著建立測試檔案 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;./&lt;strong&gt;test&lt;/strong&gt;/index.test.js&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; func &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/func.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test sum&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後到 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;package.json&lt;/code&gt; 中在 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;test&lt;/code&gt; 的指令後加上 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;—coverage&lt;/code&gt; ，讓 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 執行完時同步產生測試報告，當然也可以另外設定新指令：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1236/1*oBshRyEA7MqE6bcTy0EJWQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5728; jest &amp;#x5F8C;&amp;#x65B9;&amp;#x52A0;&amp;#x4E0A; &amp;#x2014; coverage&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;執行測試後，除了測試結果外，還會產生覆蓋率統計資訊：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2240/1*mySKJq81O_yJNiXG2TO0uw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x8986;&amp;#x84CB;&amp;#x7387;&amp;#x7684;&amp;#x7D71;&amp;#x8A08;&amp;#x8CC7;&amp;#x8A0A;&amp;#xFF0C;&amp;#x7531;&amp;#x5DE6;&amp;#x81F3;&amp;#x53F3;&amp;#x5206;&amp;#x5225;&amp;#x70BA;&amp;#xFF1A;&amp;#x8A9E;&amp;#x6CD5;&amp;#x3001;&amp;#x5206;&amp;#x652F;&amp;#x3001;&amp;#x51FD;&amp;#x5F0F;&amp;#x6578;&amp;#x3001;&amp;#x884C;&amp;#x6578;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;也可以發現在專案目錄下多了一個叫做 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;converage&lt;/code&gt; 的資料夾，裡面的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Icov-report&lt;/code&gt; 內有個 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;index.html&lt;/code&gt; ，打開後也可以看到相同的資訊：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2956/1*x6FX-dAQ9ASKyYQo1MI02w.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;./converage/Icov-report/index.html&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;透過點擊 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;func.js&lt;/code&gt; 可以確認更詳細的測試過程，包含是哪一行沒有執行，或每行各執行了幾次：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2544/1*FAqRZa5Y7pkZVNsPjMI4cQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7D05;&amp;#x8272;&amp;#x5340;&amp;#x584A;&amp;#x4EE3;&amp;#x8868;&amp;#x672A;&amp;#x57F7;&amp;#x884C;&amp;#xFF0C;&amp;#x4E5F;&amp;#x5C31;&amp;#x662F;&amp;#x672A;&amp;#x8986;&amp;#x84CB;&amp;#x7684;&amp;#x5730;&amp;#x65B9;&amp;#xFF0C;&amp;#x884C;&amp;#x6578;&amp;#x4E0A;&amp;#x7684; 1x &amp;#x4EE3;&amp;#x8868;&amp;#x6E2C;&amp;#x8A66;&amp;#x4E2D;&amp;#x57F7;&amp;#x884C;&amp;#x6B21;&amp;#x6578;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;現在為 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;./funcs/func.js&lt;/code&gt; 內的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;sum&lt;/code&gt; 增加一個斷言句，讓 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 在測試時進入 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;sum&lt;/code&gt; 的另一個分支：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; func &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../funcs/func.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test sum&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//增加斷言&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行測試後再一次點開 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;converage&lt;/code&gt; 內的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;html&lt;/code&gt; 測試報告：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2932/1*jKGnnS2NRRclsCww5AjS9g.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x8986;&amp;#x84CB;&amp;#x7387;&amp;#x5DF2;&amp;#x9054; 100%&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;hm jm jn jo jp b&quot;&gt;func.js&lt;/code&gt; 的詳細執行資訊，在判斷 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;b&lt;/code&gt; 是否有值的地方執行了兩次，且已經沒有還未覆蓋的區塊：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2636/1*S2KyOyMRuo6_5ZkPGAa2yw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5DF2;&amp;#x7D93;&amp;#x6C92;&amp;#x6709;&amp;#x672A;&amp;#x8986;&amp;#x84CB;&amp;#x7684;&amp;#x5340;&amp;#x584A;&amp;#x4E86;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;本文解釋了基本的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 測試，並簡單描述斷言庫和產生覆蓋率報告，今後的文章會繼續解釋 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Jest&lt;/code&gt; 提供的其他功能，一直到用於測試 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;React&lt;/code&gt; 的 &lt;code class=&quot;hm jm jn jo jp b&quot;&gt;Component&lt;/code&gt; 組件。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都歡迎留言告訴我，謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;7c06&quot; class=&quot;ik il em at im b in kh ip ki ir kj it kk iv kl ix kt ku kv&quot;&gt;&lt;a href=&quot;https://jestjs.io/docs/en/getting-started&quot; class=&quot;dj by km kn ko kp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://jestjs.io/docs/en/getting-started&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;5158&quot; class=&quot;ik il em at im b in kw ip kx ir ky it kz iv la ix kt ku kv&quot;&gt;&lt;a href=&quot;http://blog.404mzk.com/jest.html&quot; class=&quot;dj by km kn ko kp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;http://blog.404mzk.com/jest.html&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;547d&quot; class=&quot;ik il em at im b in kw ip kx ir ky it kz iv la ix kt ku kv&quot;&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28247899&quot; class=&quot;dj by km kn ko kp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://zhuanlan.zhihu.com/p/28247899&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[React | 在 React 中使用 WebSocket - feat. Socket.io 基本教學]]></title><description><![CDATA[前言 這次的標題有點複雜和騙人，文章內主要是在 React 中搭配 Socket.io 做使用，而 Socket.io 是一個現成的 WebSocket 套件，儘管它不是真正的 webSocket 協定，但 socket.io 還是實現了 webSocket…]]></description><link>https://ms314006.github.io/use-websocket-by-react-socket-io/</link><guid isPermaLink="false">https://ms314006.github.io/use-websocket-by-react-socket-io/</guid><pubDate>Fri, 08 Mar 2019 17:35:55 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這次的標題有點複雜和騙人，文章內主要是在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;React&lt;/code&gt; 中搭配 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Socket.io&lt;/code&gt; 做使用，而 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Socket.io&lt;/code&gt; 是一個現成的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; 套件，儘管它不是真正的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 協定，但 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 還是實現了 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 及增加許多方便的功能。&lt;/p&gt;
&lt;p&gt;如果還不了解 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; 的讀者，可以先參考「&lt;a class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;http://localhost:8000/js-websocket/&quot;&gt;JavaScript | WebSocket 讓前後端沒有距離&lt;/a&gt;」文章內解說的原生使用方式，當然也能直接選擇學習 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Socket.io&lt;/code&gt; 就好，但文中的例子都會以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;React&lt;/code&gt; 的&lt;code class=&quot;hf ip iq ir is b&quot;&gt;Function Component&lt;/code&gt; 配合 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Hooks&lt;/code&gt; 撰寫，就不再另外列舉在一般 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;HTML&lt;/code&gt; 的用法。&lt;/p&gt;
&lt;p&gt;另外， Server 方面會以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Node.js&lt;/code&gt; 建置，還沒碰過 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Node.js&lt;/code&gt; 的話也能參考「&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199058&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;[筆記][node.js]第一次建置node.js開發環境和安裝npm就上手！&lt;/a&gt;」建置環境，有任何問題再麻煩留言告訴我，謝謝！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Socket.io&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 分成兩個主要的部分，一個是負責在 Server 端啟動 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; 服務的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 和在 Client 端做連結處理的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io-client&lt;/code&gt; ，因此使用時便不需要再尋找 Server 及 Client 各需要哪些套件，一切都交給 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 就行了。&lt;/p&gt;
&lt;h3&gt;基本溝通方式解說&lt;/h3&gt;
&lt;p&gt;下方會先從建立 Server 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 開始敘述，再解釋兩邊的互動方式。&lt;/p&gt;
&lt;h3&gt;Server&lt;/h3&gt;
&lt;p&gt;以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;npm init&lt;/code&gt; 建立一個專案後，透過下列指令安裝 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;express&lt;/code&gt; 和 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;b296&quot; class=&quot;jq hr ea ar is b fd ke kf r kg&quot;&gt;npm install express&lt;br&gt;npm install socket.io&lt;/span&gt;&lt;/pre&gt;&lt;/br&gt;
&lt;p&gt;安裝完後在專案內建立一個 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;server.js&lt;/code&gt; ，用來做專案的進入點運行 Server：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//將 express 放進 http 中開啟 Server 的 3000 port ，正確開啟後會在 console 中印出訊息&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;open server!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//將啟動的 Server 送給 socket.io 處理&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; io &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;socket.io&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*上方為此寫法的簡寫：
  const socket = require(&apos;socket.io&apos;)
  const io = socket(server)
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//監聽 Server 連線後的所有事件，並捕捉事件 socket 執行&lt;/span&gt;
io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//經過連線後在 console 中印出訊息&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;success connect!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//監聽透過 connection 傳進來的事件&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//回傳 message 給發送訊息的 Client&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hf ip iq ir is b&quot;&gt;server.js&lt;/code&gt; 內有幾點需要注意的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;6525&quot; class=&quot;ib ic ea ar id b ie it ig iu ii iv ik iw im ix io ki kj kk&quot;&gt;如果是使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 套件，因為它不是真正的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 協定，所以還是得使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;http&lt;/code&gt; 啟動 Server ，再把 Server 物件送給 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; ，處理過後會得到一個物件 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;io&lt;/code&gt; ，可以用它的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;on&lt;/code&gt; 監聽開啟連線後的設定。&lt;/li&gt;&lt;li id=&quot;9a62&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;如果 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;io&lt;/code&gt; 監聽到有訊息從 Client 傳到 Server 時，會將捕捉到的事件內容 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket&lt;/code&gt; 物件傳至 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;connection&lt;/code&gt; 後的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;function&lt;/code&gt; 中。&lt;/li&gt;&lt;li id=&quot;a0d3&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;被傳入 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;connection&lt;/code&gt; 中的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket&lt;/code&gt; 也可以自訂監聽 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;message&lt;/code&gt; 的類型，例如上方的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;getMessage&lt;/code&gt; 就是筆者自行設定的類型名稱， &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 只會觸發對應的監聽 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Function&lt;/code&gt;。&lt;/li&gt;&lt;li id=&quot;f844&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;&lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.emit&lt;/code&gt; 為回覆訊息給 Client 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Function&lt;/code&gt; ，它第一個參數為訊息類型，這個和 Server 的監聽名稱一樣，在 Client 端也只有設定監聽類型為 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;getMessage&lt;/code&gt; 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;Function&lt;/code&gt; 才會觸發，而第二個為訊息內容。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果上方有不了解的部分，可以先大略看過，配合 Client 的運作一起看會更清楚。&lt;/p&gt;
&lt;p&gt;完成 Server 的部分後可以先輸入以下指令運行：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;0cc1&quot; class=&quot;jq hr ea ar is b fd ke kf r kg&quot;&gt;node server.js //server.js 為檔名&lt;/span&gt;&lt;/pre&gt;&lt;/br&gt;
&lt;p&gt;如果程式沒有問題，那應該會在運行後出現 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;open server!&lt;/code&gt;：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;s t u hb ai&quot; src=&quot;https://miro.medium.com/max/1896/1*d8HW5xzPhctTK9EDDJIT-g.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5728; 3000 port &amp;#x4E0A;&amp;#x57F7;&amp;#x884C; server&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;Client&lt;/h3&gt;
&lt;p&gt;Client 端另外開一個專案， &lt;code class=&quot;hf ip iq ir is b&quot;&gt;React&lt;/code&gt; 的環境就不再另外講解，可以參考「&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10200329&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;webpack&amp;#x26;React開發環境篇(1)&lt;/a&gt;」和「&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10200459&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;webpack&amp;#x26;React開發環境篇(2)&lt;/a&gt;」上下兩篇搭建，那除了 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;React&lt;/code&gt; 的部分還需要下載 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io-client&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;120a&quot; class=&quot;jq hr ea ar is b fd ke kf r kg&quot;&gt;npm install socket.io-client&lt;/span&gt;&lt;/pre&gt;&lt;/br&gt;
&lt;p&gt;下載後，就能開始實做一個連結 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 並能夠發送及接收訊息的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;component&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDom &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; webSocket &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;socket.io-client&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ws&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;setWs&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;connectWebSocket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//開啟&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setWs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;webSocket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http://localhost:3000&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ws&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;//連線成功在 console 中打印訊息&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;success connect!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;//設定監聽&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;initWebSocket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ws&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;initWebSocket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//對 getMessage 設定監聽，如果 server 有透過 getMessage 傳送訊息，將會在此被捕捉&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sendMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//以 emit 送訊息，並以 getMessage 為名稱送給 server 捕捉&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;只回傳給發送訊息的 client&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;連線&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;connectWebSocket&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;送出訊息&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sendMessage&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

ReactDom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Main &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;關於此 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;component&lt;/code&gt; 的架構可以分為幾下幾塊：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;87f2&quot; class=&quot;ib ic ea ar id b ie it ig iu ii iv ik iw im ix io ki kj kk&quot;&gt;使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;useState&lt;/code&gt; 在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;component&lt;/code&gt; 內建立一個 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;state&lt;/code&gt; &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; ，當使用者點擊「連線」按鈕時觸發 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;connectWebSocket&lt;/code&gt; ，觸發後透過從 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io-client&lt;/code&gt; 套件中 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;import&lt;/code&gt; 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 連線至剛剛執行 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;server.js&lt;/code&gt; 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;http://localhost:3000&lt;/code&gt; ，最後 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 連線成功後會藉由 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;setWs&lt;/code&gt; 將 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; 物件寫到 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; 。&lt;/li&gt;&lt;li id=&quot;6abb&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;連線後 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;component&lt;/code&gt; 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;state&lt;/code&gt; &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; 就會改變，生命週期 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;useEffect&lt;/code&gt; 也會被觸發，觸發時先判斷 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; 內是否真的有值，因為 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;useEffect&lt;/code&gt; 在組件第一次 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;render&lt;/code&gt; 時就會先執行，但那時候 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; 還沒有連線所以是 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;null&lt;/code&gt; ，這時候還去執行 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;initWebSocket&lt;/code&gt; 就會發生錯誤，所以如果 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; 還是初始值 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;null&lt;/code&gt; 就不執行接下來的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;initWebSocket&lt;/code&gt; 。&lt;/li&gt;&lt;li id=&quot;4b89&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;initWebSocket&lt;/code&gt; 中替 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws&lt;/code&gt; 增加了監聽 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;getMessage&lt;/code&gt; 的訊息，當 Server 有發送以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;getMessage&lt;/code&gt; 為名稱的訊息，就會在這裡被捕捉到，並在第二個參數中接收訊息，將訊息內容打印到 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;console&lt;/code&gt; 中。&lt;/li&gt;&lt;li id=&quot;9f12&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;當我按下「送出訊息」按鈕時， &lt;code class=&quot;hf ip iq ir is b&quot;&gt;sendMessage&lt;/code&gt; 中會以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws.emit&lt;/code&gt; 送出訊息，而送出的除了訊息內容外，還有辨別他的名稱 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;getMessage&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在第一點中需要注意的是 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws://localhost:3000&lt;/code&gt; 是無法正確與 Server 做&lt;code class=&quot;hf ip iq ir is b&quot;&gt;connection&lt;/code&gt; 的，因為 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 本身是 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;http&lt;/code&gt; 協定而不是 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; ，如果要看更多協議可以參考 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;&lt;a href=&quot;https://github.com/socketio/socket.io-protocol#socketio-protocol&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;socket.io&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;https://github.com/socketio/socket.io-protocol#socketio-protocol&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt; 的協議&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;看到這裡，就能夠將剛剛 Server 的程式碼拿來與 Client 一起講解兩邊溝通的流程了：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;257d&quot; class=&quot;ib ic ea ar id b ie it ig iu ii iv ik iw im ix io ki kj kk&quot;&gt;由 Client 以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws.emit(&amp;apos;getMessage&amp;apos;,&amp;apos;訊息內容&amp;apos;)&lt;/code&gt; 將訊息送到 Server。&lt;/li&gt;&lt;li id=&quot;4b9e&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;Server 藉由 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.on(&amp;apos;getMessage&amp;apos;,message=&amp;gt;{/*執行動作*/})&lt;/code&gt; 捕捉到訊息。&lt;/li&gt;&lt;li id=&quot;cffd&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;Server 處理完訊息內容後再透過 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.emit(&amp;apos;getMessage&amp;apos;,&amp;apos;訊息內容&amp;apos;)&lt;/code&gt; 將訊息傳給 Client 。&lt;/li&gt;&lt;li id=&quot;ecb0&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;最後 Client 會從 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;ws.on(&amp;apos;getMessage&amp;apos;,message=&amp;gt;{/*執行動作*/})&lt;/code&gt; 的監聽取得 Server 傳來的訊息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的過程都是以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;getMessage&lt;/code&gt; 為該訊息取名字去送出及監聽捕捉，因此就不會像原生的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; ，如果要為訊息做分類就還得多做判斷，當然用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 的方便不只有這樣子而已，先看看上方程式碼的執行畫面，再講解更多有趣的地方：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;s t u hb ai&quot; src=&quot;https://miro.medium.com/max/1404/1*TY9WH2CwfJVaT_77Z-sSBg.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Server &amp;#x56DE;&amp;#x50B3;&amp;#x5F9E; Client &amp;#x4E2D;&amp;#x6536;&amp;#x5230;&amp;#x7684;&amp;#x8A0A;&amp;#x606F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;進階用法 - 群發&lt;/h3&gt;
&lt;p&gt;就上方的例子而言，眼尖的讀者應該有發現，筆者在使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.emit()&lt;/code&gt; 將訊息從 Server 傳給 Client 的時候，訊息內容為「只回傳給發送訊息的 client 」，這也代表這段訊息不會同時讓其他連接著該 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;WebSocket&lt;/code&gt; 的 Client 收到，那該怎麼做才能讓所有 Client 都收到訊息呢？&lt;/p&gt;
&lt;p&gt;其實 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 針對要發送的對象，提供了其他方式：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*只回傳給發送訊息的 client*/&lt;/span&gt;
socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*回傳給所有連結著的 client*/&lt;/span&gt;
io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sockets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageAll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*回傳給除了發送者外所有連結著的 client*/&lt;/span&gt;
socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;broadcast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageLess&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每種方式也都會固定帶著一個名稱被 Client 端監聽接收，如果沒有給名稱就不會被監聽給捕捉到，以下實作呈現這三種發送訊息的方式：&lt;/p&gt;
&lt;h3&gt;Server&lt;/h3&gt;
&lt;p&gt;在 Server 端要因應不同的名稱來判斷回傳的方式，因此為幾個不同的名稱做加入監聽：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;/*只回傳給發送訊息的 client*/&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/*回傳給所有連結著的 client*/&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageAll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sockets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageAll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/*回傳給除了發送者外所有連結著的 client*/&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageLess&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;broadcast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageLess&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Client&lt;/h3&gt;
&lt;p&gt;在 Client 中，下方更改了 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;sendMessage&lt;/code&gt; 的內容，在呼叫的時候傳入 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;name&lt;/code&gt; 作為發送訊息的名稱，並在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;initWebSocket&lt;/code&gt; 中多為幾個名稱設定監聽，以捕獲 Server 發送的訊息，最後在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;return&lt;/code&gt; 裡添加了幾個按鈕分別發送不同名稱的訊息：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;initWebSocket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//對 getMessage 設定監聽，如果 server 有透過 getMessage 傳送訊息，將會在此被捕捉&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageAll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageLess&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sendMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;收到訊息囉！&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;連線&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;connectWebSocket&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;送出訊息，只有自己收到回傳&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessage&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;送出訊息，讓所有人收到回傳&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageAll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;送出訊息，除了自己外所有人收到回傳&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getMessageLess&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;調整完兩邊的程式後，執行結果如下：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;s t u hb ai&quot; src=&quot;https://miro.medium.com/max/1460/1*SCKCp3eNCR2l0sGNz4637g.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x900F;&amp;#x904E;&amp;#x4E0D;&amp;#x540C;&amp;#x7684;&amp;#x767C;&amp;#x9001;&amp;#x65B9;&amp;#x5F0F;&amp;#x9054;&amp;#x5230;&amp;#x4E0D;&amp;#x540C;&amp;#x7684;&amp;#x7D50;&amp;#x679C;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;進階用法 - 分組 ( room )&lt;/h3&gt;
&lt;p&gt;分組的意思就是為 Client 設定聊天室，在遊戲裡就像「頻道」、「分流」的概念， &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 能讓 Server 可以針對某個 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 傳送訊息，也可以自由地將 Client 加入或移除某個 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; ，而在一般沒有設定 room 的狀態下，都會為每個 Client 預設一個 id 作為 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 。&lt;/p&gt;
&lt;h3&gt;Client&lt;/h3&gt;
&lt;p&gt;這次從 Client 開始，在程式中加上一個下拉選單讓使用者選擇房間，選擇時會送出房間名稱給 Server ，並且為 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;webSocket&lt;/code&gt; 增加一個監聽，以接收從 Server 傳送過來的新訊息：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;initWebSocket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;/*其餘程式碼省略*/&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;//增加監聽&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//選擇聊天室時觸發，如果有選擇那就將房間 id 送給 Server&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changeRoom&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//增加下拉選單選擇房間&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;select onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;changeRoom&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;option value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;請選擇房間&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;option&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;option value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;room1&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;房間一&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;option&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;option value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;room2&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;房間二&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;option&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;select&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*其餘程式碼省略*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;     

    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Server&lt;/h3&gt;
&lt;p&gt;當 Server 端接收到訊息時，可以使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.join&lt;/code&gt; 將房間 id 加到該 Client 的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 物件中，並發送訊息給相同房間 id 的 Client ，而發送的訊息又有分成兩種：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/*其餘程式碼省略*/&lt;/span&gt;
    
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//(1)發送給在同一個 room 中除了自己外的 Client&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;已有新人加入聊天室！&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//(2)發送給在 room 中所有的 Client&lt;/span&gt;
        io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sockets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;已加入聊天室！&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下分別展示兩種傳遞的結果：&lt;/p&gt;
&lt;p&gt;發送給在同一個 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 中除了自己外的 Client ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;s t u hb ai&quot; src=&quot;https://miro.medium.com/max/1460/1*2SLEXrfZbJkbot7m5t6c3A.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x767C;&amp;#x9001;&amp;#x7D66;&amp;#x5728;&amp;#x540C;&amp;#x4E00;&amp;#x500B; &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; &amp;#x4E2D;&amp;#x9664;&amp;#x4E86;&amp;#x81EA;&amp;#x5DF1;&amp;#x5916;&amp;#x7684; Client&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;發送給在 room 中所有的 Client ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;s t u hb ai&quot; src=&quot;https://miro.medium.com/max/1460/1*LcsYqAEQ584FPmH7OqHAFQ.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x767C;&amp;#x9001;&amp;#x7D66;&amp;#x5728; room &amp;#x4E2D;&amp;#x6240;&amp;#x6709;&amp;#x7684; Client&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;需要注意的是如上方所說，一開始連線的時候 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 會為每個 Client 預設 id 在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 裡，所以取出 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 的時候不會只有 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.join&lt;/code&gt; 進去的房間 id ，還會有預設的 id ，因此下方的程式將對 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 物件所有的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;key&lt;/code&gt; 做迴圈，取出原本 id 以外的值就是另外 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.join&lt;/code&gt; 的房間 id 了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//取得 rooms 物件，包含了預設 id 及另外 join 的資料&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rooms &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rooms

&lt;span class=&quot;token comment&quot;&gt;//將值取出來，尋找預設 id 外的值就能取到 join 的 id&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rooms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外再補充 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.join&lt;/code&gt; 是非同步的事件，因此如果要在確定 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;join&lt;/code&gt; 後再執行某些事得這麼做：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//do something...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後，當 Client 更換或離開聊天室時，得使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.leave&lt;/code&gt; 移除在 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.rooms&lt;/code&gt; 的 id ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//加入前檢查是否已有所在房間&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nowRoom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rooms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//有的話要先離開&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nowRoom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;leave&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nowFoom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//再加入新的&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sockets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;addRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;已有新人加入聊天室！&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;中斷連線&lt;/h3&gt;
&lt;p&gt;當 Client 要與 Server 中斷連線時，可以在 Client 端使用 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;.close()&lt;/code&gt; 這個函式，中斷後會觸發在 Server 端的 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;disconnect&lt;/code&gt; 這個名稱的事件，但是中斷後便無法再透過此連結送出訊息到其他 Client 通知「某使用者已離開」，因此下方先透過送出一個訊息到 Server ，等通知完其他 Client 後，再送訊息到提出中斷連線的 Client 執行 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;.close()&lt;/code&gt; ，以下實作：&lt;/p&gt;
&lt;h3&gt;Server&lt;/h3&gt;
&lt;p&gt;以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;disConnection&lt;/code&gt; 監聽申請中斷的事件，再以 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;leaveRoom&lt;/code&gt; 通知 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;room&lt;/code&gt; 裡的所有 Client 及 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;disConnection&lt;/code&gt; 向提出中斷的 Client 送出訊息請它做 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;.close()&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;/*其餘程式碼省略*/&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//送出中斷申請時先觸發此事件&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disConnection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rooms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;room&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; room &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//先通知同一 room 的其他 Client&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;room&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;leaveRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 已離開聊天！&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//再送訊息讓 Client 做 .close()&lt;/span&gt;
        socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disConnection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//中斷後觸發此監聽&lt;/span&gt;
    socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disconnect&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disconnection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Client&lt;/h3&gt;
&lt;p&gt;新增一個「斷線」的按鈕觸發 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;disConnectWebSocket&lt;/code&gt; ，讓它送訊息給 Server 告知要斷線， &lt;code class=&quot;hf ip iq ir is b&quot;&gt;leaveRoom&lt;/code&gt; 及 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;disConnection&lt;/code&gt; 分別用來接收某個 Client 離開的通知及通知完後關閉連線：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;disConnectWebSocket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//向 Server 送出申請中斷的訊息，讓它通知其他 Client&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disConnection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;XXX&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;initWebSocket&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/*其餘程式碼省略*/&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;//以 leaveRoom 接收有使用者離開聊天的訊息&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;leaveRoom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Server 通知完後再傳送 disConnection 通知關閉連線&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;disConnection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*其餘省略*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;斷線&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;disConnectWebSocket&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*其餘省略*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行結果如下：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;s t u hb ai&quot; src=&quot;https://miro.medium.com/max/1460/1*VSJkaD7JHrO_IfnCX5o8nw.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4E2D;&amp;#x65B7;&amp;#x9023;&amp;#x7DDA;&amp;#x5F8C;&amp;#x4FBF;&amp;#x7121;&amp;#x6CD5;&amp;#x518D;&amp;#x8207; Server &amp;#x6E9D;&amp;#x901A;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;本文不知不覺就打了有點多，提到了 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 的基本用法、群發、聊天室，這些都是在實務上都滿有機會會碰到的技術，也搭配了 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;React&lt;/code&gt; 做使用，希望這篇文章能夠讓各位對 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;socket.io&lt;/code&gt; 或搭配 &lt;code class=&quot;hf ip iq ir is b&quot;&gt;React&lt;/code&gt; 時的使用方式有些概念。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;7fe4&quot; class=&quot;ib ic ea ar id b ie it ig iu ii iv ik iw im ix io ki kj kk&quot;&gt;&lt;a href=&quot;https://socket.io/docs/server-api/&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://socket.io/docs/server-api/&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;ca63&quot; class=&quot;ib ic ea ar id b ie kl ig km ii kn ik ko im kp io ki kj kk&quot;&gt;&lt;a href=&quot;https://socket.io/docs/client-api/#socket-connected&quot; class=&quot;cx ga iy iz ja jb&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://socket.io/docs/client-api/#socket-connected&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[JavaScript | WebSocket 讓前後端沒有距離]]></title><description><![CDATA[前言 最近因為工作的關係接觸到 WebSocket ， WebSocket 是網路協定的一種， Client 可以透過此協定與 Server 做溝通，而他和一般 http 或 https 不同的是， WebSocket…]]></description><link>https://ms314006.github.io/js-websocket/</link><guid isPermaLink="false">https://ms314006.github.io/js-websocket/</guid><pubDate>Sat, 23 Feb 2019 13:45:54 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最近因為工作的關係接觸到 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; ， &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 是網路協定的一種， Client 可以透過此協定與 Server 做溝通，而他和一般 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;http&lt;/code&gt; 或 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;https&lt;/code&gt; 不同的是， &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 協定只需透過一次連結便能保持連線，不必再透過一直發送 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Request&lt;/code&gt; 來與 Server 互動！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;WebSocket&lt;/h2&gt;
&lt;p&gt;如前言所說， &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 只需開啟連結便能和 Server 做溝通，且 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Websocket&lt;/code&gt; 傳送資料的方式是雙向的， Client 端可以像 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Ajax&lt;/code&gt; 一樣做請求， Server 端也能主動發送 Client 所需要的資料。&lt;/p&gt;
&lt;p&gt;一般的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 請求網址會長這個樣子：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;eaa9&quot; class=&quot;is gm em at hq b fh it iu r iv&quot;&gt;ws://example.com&lt;/span&gt;&lt;span id=&quot;7253&quot; class=&quot;is gm em at hq b fh iw ix iy iz ja iu r iv&quot;&gt;//經過 &lt;!-- --&gt;SSL&lt;!-- --&gt; 加密後，前方的 &lt;!-- --&gt;ws&lt;!-- --&gt; 會變成 &lt;!-- --&gt;wss&lt;!-- --&gt; &lt;br&gt;wss://example.com&lt;/span&gt;&lt;/pre&gt;
&lt;br /&gt;
### Server 端 - 搭建 WebSocket 環境
&lt;p&gt;&lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 的 Server 部分，本文會以 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Node.js&lt;/code&gt; 建置，如果電腦上還沒有安裝 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Node.js&lt;/code&gt; 可以先參考「&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199058&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;[筆記][node.js]第一次建置node.js開發環境和安裝npm就上手！&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;處理好安裝環境後還需要在下載兩個套件，分別是用來開發 Web 框架的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;express&lt;/code&gt; 和負責處理 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 協定的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;ws&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;ca26&quot; class=&quot;is gm em at hq b fh it iu r iv&quot;&gt;npm install express&lt;br&gt;npm install ws&lt;/span&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;安裝完後可以到專案中的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;package.json&lt;/code&gt; 中確認是否成功：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/2108/1*EgbqxHT8iSGFbikO5oRVSg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4E0B;&amp;#x8F09;&amp;#x5B8C;&amp;#x5F8C;&amp;#x7684;&amp;#x5957;&amp;#x4EF6;&amp;#x6703;&amp;#x88AB;&amp;#x8A18;&amp;#x9304;&amp;#x5230; package.json &amp;#x4E2D;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;接著在專案裡新增一個 JavaScript 檔案 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;server.js&lt;/code&gt; 當作專案的進入點：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//import express 和 ws 套件&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SocketServer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ws&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Server

&lt;span class=&quot;token comment&quot;&gt;//指定開啟的 port&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//創建 express 的物件，並綁定及監聽 3000 port ，且設定開啟後在 console 中提示&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening on &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//將 express 交給 SocketServer 開啟 WebSocket 的服務&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wss &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SocketServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; server &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//當 WebSocket 從外部連結時執行&lt;/span&gt;
wss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//連結時執行此 console 提示&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Client connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//當 WebSocket 的連線關閉時執行&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;close&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Close connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;沒問題後便可以輸入以下指令執行 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;server.js&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;6c86&quot; class=&quot;is gm em at hq b fh it iu r iv&quot;&gt;node server.js&lt;/span&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;當本機 Server 的指定 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Port&lt;/code&gt; 被打開時，會先執行我們監聽指定的事件：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/1756/1*VAiVKJFcfHjAIll0WDRCxg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x958B;&amp;#x555F;&amp;#x6210;&amp;#x529F;&amp;#x5F8C;&amp;#x6703;&amp;#x5728; console &amp;#x4E2D;&amp;#x6253;&amp;#x5370;&amp;#x63D0;&amp;#x793A;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;Client 端 - 連接 WebSocket Server&lt;/h3&gt;
&lt;p&gt;Server 端處理完後，就換到 Client 端來連結剛剛開啟的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 服務，這裡另外建一個專案，在專案裡只需一個 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;index.html&lt;/code&gt; 及 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;index.js&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hm hn ho hp hq b&quot;&gt;index.html&lt;/code&gt; 的部分先簡單處理，只需引用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;index.js&lt;/code&gt; 就可以了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;./index.js&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm hn ho hp hq b&quot;&gt;index.js&lt;/code&gt; 的部分會用來處理與 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 的連結：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//使用 WebSocket 的網址向 Server 開啟連結&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ws &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ws://localhost:3000&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//開啟後執行的動作，指定一個 function 會在連結 WebSocket 後執行&lt;/span&gt;
ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;open connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//關閉後執行的動作，指定一個 function 會在連結中斷後執行&lt;/span&gt;
ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onclose&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;close connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;url&lt;/code&gt; 為剛剛使用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;node.js&lt;/code&gt; 在本機上執行的 Server ，另外的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;onopen&lt;/code&gt; 及 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;onclose&lt;/code&gt; 分別為他們指定一個 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Function&lt;/code&gt; ，在開啟和關閉連線時執行，執行結果：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/3324/1*8CvZuLeH3jKwJ8_7gc8sHQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x958B;&amp;#x555F;&amp;#x9023;&amp;#x7D50;&amp;#x5F8C;&amp;#x6703;&amp;#x57F7;&amp;#x884C; onopen &amp;#x7684;&amp;#x4E8B;&amp;#x4EF6;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;執行結果中可以看到 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;onopen&lt;/code&gt; 中在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;console&lt;/code&gt; 打印的提示，除此之外，也可以從剛剛執行 Server 的地方觀察開啟連結後的訊息：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/1772/1*y6Ivv4bi2kjIws-GxmTVYQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5728; Server &amp;#x4E0A;&amp;#x57F7;&amp;#x884C;&amp;#x6642;&amp;#x8A18;&amp;#x9304;&amp;#x7684;&amp;#x8A0A;&amp;#x606F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;上方也列出 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 的物件有哪些屬性，比較重要的還有 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;onmessage&lt;/code&gt; ， Client 就是靠它在接收由 Server 發送的資料，但在提到它之前，得先回到 Server 了解如何和 Client 做溝通。&lt;/p&gt;
&lt;h3&gt;回到 Server 端 - 處理接收發送訊息&lt;/h3&gt;
&lt;p&gt;提到溝通，過程一定是有來有往，在開啟 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 後， Server 端會使用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; 發送訊息，接收則是如同在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;connection&lt;/code&gt; 內監聽 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;close&lt;/code&gt; 一樣，只是換成對 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;message&lt;/code&gt; 設定監聽，並接收一個參數 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;data&lt;/code&gt; ，捕獲 Client 端發送的訊息：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;wss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Client connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//對 message 設定監聽，接收從 Client 發送的訊息&lt;/span&gt;
    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;message&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//data 為 Client 發送的訊息，現在將訊息原封不動發送出去&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;close&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Close connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;回到 Client 端 - 處理接收發送訊息&lt;/h3&gt;
&lt;p&gt;剛剛處理完 Server ，要換回 Client 端使用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;onmessage&lt;/code&gt; 處理接收及 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; 送出訊息：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ws &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ws://localhost:3000&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;open connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onclose&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;close connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//接收 Server 發送的訊息&lt;/span&gt;
ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm hn ho hp hq b&quot;&gt;onmessage&lt;/code&gt; 指定的函式中多了一個參數 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;event&lt;/code&gt; ，裡面會有這次溝通的詳細訊息，從 Server 回傳的資料會在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;event&lt;/code&gt; 的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;data&lt;/code&gt; 屬性中。&lt;/p&gt;
&lt;p&gt;但是上方的程式碼還沒有增加在 Client 中發送訊息的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; ，因此下方在連接到 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 後直接在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;console&lt;/code&gt; 中發送，並確認回傳訊息：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/3832/1*oL40RiJz591Lbn4vrSBOHg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Server &amp;#x63A5;&amp;#x6536; Client &amp;#x767C;&amp;#x9001;&amp;#x7684;&amp;#x8A0A;&amp;#x606F;&amp;#x5F8C;&amp;#x518D;&amp;#x56DE;&amp;#x50B3;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;不過上面看起來還是以 Client 做 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; 發送訊息給 Server 處理過才得到回傳資料，該怎麼從 Server 上直接發送呢？很簡單，只需要透過 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;setInterval&lt;/code&gt; 就能讓 Server 在固定時間發送資料給 Client ，例如下方的例子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;wss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Client connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//固定送最新時間給 Client&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sendNowTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;message&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;close&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//連線中斷時停止 setInterval&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sendNowTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Close connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Client 連結後的結果如下：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/2076/1*AHKxAKEo8YuDePJjzDNtmQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4E0D;&amp;#x65B7;&amp;#x63A5;&amp;#x6536; Server &amp;#x4E3B;&amp;#x52D5;&amp;#x50B3;&amp;#x905E;&amp;#x7684;&amp;#x8A0A;&amp;#x606F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;最後一次回到 Server - 多人連線&lt;/h3&gt;
&lt;p&gt;通常 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 都會運用在聊天室，但是就剛剛的使用方式來說，今天 ClientA 和 ClientB 都連結同一個 Server ，而他們各自在 Client 使用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; 發送資料給 Server ， 在這個情況下 Server 只會依據兩個 Client 各自發送的內容，再分別回傳給 ClientA 和 ClientB ，並無法讓 ClientB 能夠在 ClientA 發送訊息時也收到回傳的資料。&lt;/p&gt;
&lt;p&gt;例如以下例子，用兩個視窗開啟 Client 並各自發送請求：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/1276/1*ZIy6Qp5D3qkUWhpstPdKTg.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5BA2;&amp;#x6236;&amp;#x7AEF;&amp;#x7121;&amp;#x6CD5;&amp;#x5171;&amp;#x4EAB; Server &amp;#x767C;&amp;#x9001;&amp;#x7684;&amp;#x8A0A;&amp;#x606F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;那該怎麼像廣播一樣，當我在某一個 Client 發送訊息時，讓 Server 告知所有其他同時連接中的 Client 都知道我對 Server 發送這個訊息，也同時接收到 Server 回傳的資料呢？&lt;/p&gt;
&lt;p&gt;答案就在一開始下載的套件 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;ws&lt;/code&gt; 中，它可以使用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;clients&lt;/code&gt; 找出當前所有連結中的 Client 資訊，並透過迴圈將訊息發送至每一個 Client 中：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;wss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;connection&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Client connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;message&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//取得所有連接中的 client&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; clients &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clients

        &lt;span class=&quot;token comment&quot;&gt;//做迴圈，發送訊息至每個 client&lt;/span&gt;
        clients&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;close&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Close connected&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這麼一來，不論是哪個 Client 端發送訊息， Server 都會將訊息回覆給所有連接中的 Client ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/1276/1*9ETT853cZxzHKDcBfBCyqA.gif&quot; role=&quot;presentation&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;補充內容&lt;/h3&gt;
&lt;p&gt;雖然在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 的協定上 Client 和 Server 不需再通過 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Request&lt;/code&gt; ，因此在開發人員工具中的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Network&lt;/code&gt; 中就看不到 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Request&lt;/code&gt; 的資料，但是取而代之的是，那些傳遞過程可以透過第一次要求連接時的 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;Request&lt;/code&gt; 中觀察：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u jy ak&quot; src=&quot;https://miro.medium.com/max/2124/1*b-CROiddSOb1YWQnbUHJTA.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x89C0;&amp;#x5BDF;&amp;#x5728; WebSocket &amp;#x5354;&amp;#x5B9A;&amp;#x7684;&amp;#x50B3;&amp;#x8F38;&amp;#x65B9;&amp;#x5F0F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;關於 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 從 Client 或是 Server 在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; 資料時，除了字串外還可以使用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/USVString&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;USVString&lt;/a&gt;&lt;/code&gt; 、 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/code&gt; 、 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Blob&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Blod&lt;/a&gt;&lt;/code&gt; 和 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;ArrayBufferView&lt;/a&gt;&lt;/code&gt; 等型態（這部分感謝 &lt;a class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/@cgh20xx?source=responses---------0---------------------&quot;&gt;Hank Hsiao&lt;/a&gt; 留言提醒）。&lt;/p&gt;
&lt;p&gt;另外，要傳送 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;JSON&lt;/code&gt; 的資料的時，記得在 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;send&lt;/code&gt; 中做 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;JSON.stringify&lt;/code&gt; ，接收到時再用 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;JSON.parse&lt;/code&gt; 轉成物件處理即可！&lt;/p&gt;
&lt;p&gt;如果想找個伺服器部署 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; ，可以參考「&lt;a class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/heroku-deploy/&quot;&gt;Heroku | 搭配 Git 在 Heroku 上部署網站的手把手教學&lt;/a&gt;」&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文介紹了 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;WebSocket&lt;/code&gt; 的基本使用方式及一些例子，希望能夠減少各位研究的時間，這幾天還會接著研究如何搭配 &lt;code class=&quot;hm hn ho hp hq b&quot;&gt;React&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;0fc8&quot; class=&quot;gy gz em at ha b hb ig hd ih hf ii hh ij hj ik hl la lb lc&quot;&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/node-websockets&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://devcenter.heroku.com/articles/node-websockets&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;0839&quot; class=&quot;gy gz em at ha b hb ld hd le hf lf hh lg hj lh hl la lb lc&quot;&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/websocket.html&quot; class=&quot;dj by jm jn jo jp&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;http://www.ruanyifeng.com/blog/2017/05/websocket.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Heroku | 搭配 Git 在 Heroku 上部署網站的手把手教學 feat. NodeJs]]></title><description><![CDATA[前言 最早接觸到 Heroku 這個伺服器是在去年某個午後，那時候不知道發生什麼事，突然想用 Python 做一個有簡單功能的 Line 機器人，才發現這個好用的雲端伺服器，當初有將實作過程隨手記錄在 Trello…]]></description><link>https://ms314006.github.io/heroku-deploy/</link><guid isPermaLink="false">https://ms314006.github.io/heroku-deploy/</guid><pubDate>Thu, 21 Feb 2019 15:49:59 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;最早接觸到 Heroku 這個伺服器是在去年某個午後，那時候不知道發生什麼事，突然想用 Python 做一個有簡單功能的 Line 機器人，才發現這個好用的雲端伺服器，當初有將實作過程隨手記錄在 &lt;a href=&quot;https://trello.com/home&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Trello&lt;/a&gt; 上，一直到這幾天比較有空才分享上來。&lt;/p&gt;
&lt;p&gt;哦對了！文章內容或許會提到一些關於 Git 的使用方法，但是就算不會也沒關係，因為去年的我也還不會 😆。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Heroku&lt;/h2&gt;
&lt;p&gt;Heroku 不只支援 Python ，還有待會會以他做範例的 Node.js 及其他 Ruby 、 PHP 、 Go 等等，相關說明可以直接看&lt;a href=&quot;https://www.heroku.com/what&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;官方介紹&lt;/a&gt;或是&lt;a href=&quot;https://zh.wikipedia.org/wiki/Heroku&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;維基百科&lt;/a&gt;，因為這些都不是本篇文章的重點。&lt;/p&gt;
&lt;h3&gt;收費標準&lt;/h3&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/4760/1*GtPQ_M7EJxKMDtrDGznWtw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x622A;&amp;#x5716;&amp;#x81EA; Heroku &amp;#x5B98;&amp;#x65B9;&amp;#x7DB2;&amp;#x7AD9;&amp;#xFF08; &lt;a href=&quot;https://www.heroku.com/pricing&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://www.heroku.com/pricing&lt;/a&gt; &amp;#xFF09;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;以個人用途而言， Heroku 會提供免費帳戶每個月 450 個小時的運行時間，如果開通信用卡，還會額外增加 550 個小時的免費時數，一個月以 720 小時計算，在只有一個 server 的情況下，免費帳戶的時數就能夠保持一整個月的運作了。&lt;/p&gt;
&lt;p&gt;唯一的缺點是免費版每 30 分鐘未使用都會休眠一次，因此如果隔了一段時間未使用，需等待他從休眠時間中甦醒，時間大約 30 秒左右。&lt;/p&gt;
&lt;h3&gt;申辦帳號（&lt;a href=&quot;https://signup.heroku.com/&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;申辦網址&lt;/a&gt;）&lt;/h3&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/3800/1*Gw28XbQzcWRudNDY1K21yg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x622A;&amp;#x5716;&amp;#x81EA; Heroku &amp;#x5B98;&amp;#x65B9;&amp;#x7DB2;&amp;#x7AD9;&amp;#xFF08; &lt;a href=&quot;https://signup.heroku.com/&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://signup.heroku.com/&lt;/a&gt; &amp;#xFF09;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;個人認為還不錯的地方大概是在申辦帳號的時候還不需要先綁定信用卡，當然，如果沒綁定的話一個月就是 450 小時。&lt;/p&gt;
&lt;h3&gt;建立應用程式&lt;/h3&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/2848/1*oOPRmiP82aeJdwBG6oExuQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Heroku &amp;#x767B;&amp;#x5165;&amp;#x5F8C;&amp;#x500B;&amp;#x4EBA;&amp;#x4ECB;&amp;#x9762;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;登入後的個人的介面非常簡潔，沒有多餘的資訊，接下來可以透過右上角「 New 」中的「 Create new app 」建立第一個應用程式：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1676/1*FywvbEFn5TSB0-cRdtAVgg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x9EDE;&amp;#x64CA; Create new app &amp;#x5EFA;&amp;#x7ACB;&amp;#x7B2C;&amp;#x4E00;&amp;#x500B;&amp;#x61C9;&amp;#x7528;&amp;#x7A0B;&amp;#x5F0F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;在建立的過程中，需要注意的是應用程式名稱僅能使用小寫英文，且需未使用過的，如果有重複會像下圖出現警告文字，而、伺服器的地區僅能選擇美國或歐洲，填寫完畢後按下「Create app」建立：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/2852/1*xtk9yhfhJMfv8EhzVZJNIA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5982;&amp;#x679C;&amp;#x6709;&amp;#x4EBA;&amp;#x4F7F;&amp;#x904E;&amp;#x8A72;&amp;#x540D;&amp;#x7A31;&amp;#x4FBF;&amp;#x7121;&amp;#x6CD5;&amp;#x518D;&amp;#x4F7F;&amp;#x7528;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;建立專案&lt;/h3&gt;
&lt;p&gt;既然已經在 Heroku 上創建好空間了，接著就要將本機上的專案上傳，這裡筆者使用 Node.js 作為示例，專案可以到筆者的&lt;a href=&quot;https://gitlab.com/GQSM/for-medium/tree/master/uploadHerokuNodeApp&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt; GitLab 上下載&lt;/a&gt;，若本身已有專案可以直接跳過這個步驟，或是電腦上還沒建置 Node.js 的開發環境也能參考「&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199058&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;[筆記][node.js]第一次建置node.js開發環境和安裝npm就上手！&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;完成上方文章的內容後，應該會得到一個專案，如果是從 GitHub 上下載的就不需要再修改：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/3028/1*giobSBfFdKSrpyI0oxwiHQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6839;&amp;#x64DA;&amp;#x300C;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10199058&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;[&amp;#x7B46;&amp;#x8A18;][node.js]&amp;#x7B2C;&amp;#x4E00;&amp;#x6B21;&amp;#x5EFA;&amp;#x7F6E;node.js&amp;#x958B;&amp;#x767C;&amp;#x74B0;&amp;#x5883;&amp;#x548C;&amp;#x5B89;&amp;#x88DD;npm&amp;#x5C31;&amp;#x4E0A;&amp;#x624B;&amp;#xFF01;&lt;/a&gt;&amp;#x300D;&amp;#x6587;&amp;#x7AE0;&amp;#x5B8C;&amp;#x6210;&amp;#x7684;&amp;#x5C08;&amp;#x6848;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;因為接下來要上傳至 Heroku ，因此要將本機端的設定都拿掉，將上方的內容改為下方：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//引用&apos;http&apos;模組&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//設定server網址，因為在本機端測試，所以輸入127.0.0.1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//const hostname = &apos;127.0.0.1&apos;  //上傳至伺服器需拿掉&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//port 號會由 Heroku 給予，因此不再自行指定&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//新增一個server並指定他的頁面資訊，內容為&apos;Hello World!&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Content-Type&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;text/plain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hello World!\n&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//監聽得到的 port 號開啟&lt;/span&gt;
server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening on &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外一點是 Heroku 並不曉得專案的入口由哪裡開始，所以在該專案目錄下輸入指令：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;d5c4&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;npm init -y&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;執行成功後目錄中會多一個檔案 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;package.json&lt;/code&gt; ，檔案內有專案的資訊，在該文件內的 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;scripts&lt;/code&gt; 目前擁有一個屬性為 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;test&lt;/code&gt; ，現在為他再新增第二個屬性 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;start&lt;/code&gt; ，並指定專案的執行指令：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/2852/1*kUaVof4S0OuKDYLPXNsAsg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5728; scripts &amp;#x4E2D;&amp;#x52A0;&amp;#x4E0A; start &amp;#x4E26;&amp;#x6307;&amp;#x5B9A;&amp;#x5C08;&amp;#x6848;&amp;#x5167;&amp;#x57F7;&amp;#x884C;&amp;#x7684;&amp;#x6A94;&amp;#x6848;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;創建 Git&lt;/h3&gt;
&lt;p&gt;處理完專案要開始進行上傳，這裡需要先安裝 Git 的執行環境，可以參考&lt;a href=&quot;https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-Git-%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;官網上的安裝教學&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安裝 Git 後，先設定基本資料，會記錄在上傳資訊中：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;0074&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;git config --global user.name &amp;quot;上傳人名字&amp;quot;&lt;br&gt;git config --global user.email 上傳mail&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;設定完基本資料，即可在專案下輸入指令建立版本控管：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;6dc0&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;git init&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;使用 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;add&lt;/code&gt; 來增加要上傳至 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;Heroku&lt;/code&gt; 的檔案，下方的 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;.&lt;/code&gt; 代表所有檔案，如果需要挑選也可以在 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;add&lt;/code&gt; 後輸入專案內的檔案名稱：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;1c66&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;git add .&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;寫入版本中， &lt;code class=&quot;hc kq kr ks km b&quot;&gt;-m&lt;/code&gt; 後方為該次版本的註解，可以記錄這一次的版本做了哪些事情：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;4c7c&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;git commit -m &amp;apos;the first upload&amp;apos;&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;完成 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;Git&lt;/code&gt; 後要設定 Heroku 的部分，在這之前得先下載 &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Heroku-cli&lt;/a&gt; ，可以從官網中選擇符合電腦系統版本下載（&lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot; class=&quot;dj by hn ho hp hq&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;任意門&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;下載完後回到專案輸入指令，分別依提示輸入帳號及密碼登入 Heroku ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;d156&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;heroku login&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;驗證完身份後，就可以將 Heroku 上的應用程式和 Git 做連結：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;b7b0&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;heroku git:remote -a 這裡輸入各自 Heroku 的 App 名稱&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;例如筆者上方建立在 Heroku 上的 App 名稱為 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;gqtestfirstapp&lt;/code&gt; ，那指令就如下：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;15d7&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;heroku git:remote -a gqtestfirstapp&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/2060/1*bpRLPTUOfx3Ae4DAg8iOTg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x63D0;&amp;#x793A;&amp;#x9023;&amp;#x7D50;&amp;#x6210;&amp;#x529F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;最後以 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;push&lt;/code&gt; 指令將專案上傳至 Heroku 上：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/2136/1*93vMRC9Fpv9w8MMVZNnbtw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Heroku &amp;#x7684;&amp;#x4E0A;&amp;#x50B3;&amp;#x904E;&amp;#x7A0B;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;開啟網站&lt;/h3&gt;
&lt;p&gt;回到 Heroku 上的應用程式，在上方的頁籤點選 &lt;code class=&quot;hc kq kr ks km b&quot;&gt;Settings&lt;/code&gt; ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/4840/1*9YwjG8hsTqv7zBznUVjdIg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x61C9;&amp;#x7528;&amp;#x7A0B;&amp;#x5F0F;&amp;#x5167;&amp;#x7684; Settings &amp;#x9801;&amp;#x7C64;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;滑到該頁的最下面，會看到 Domain ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/4900/1*M7ZNcc3akaarzZsdSjky_A.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5728; Settings &amp;#x4E0B;&amp;#x7684; Domain &amp;#x8CC7;&amp;#x8A0A;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;點擊該網址就可以瀏覽剛剛上傳的專案：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u gy ak&quot; src=&quot;https://miro.medium.com/max/1680/1*rqucwJ4CLGq8ibfP61iJmQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x900F;&amp;#x904E;&amp;#x8A72; Domain &amp;#x986F;&amp;#x793A;&amp;#x7684;&amp;#x7DB2;&amp;#x9801;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;之後如果專案有修改需要重新上傳的話，只需要執行「增加異動檔案」、「寫入一次版本」、「上傳至 Heroku」 三行指令即可：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;ca7c&quot; class=&quot;jl hs em at km b fh kn ko r kp&quot;&gt;git add .&lt;br&gt;git commit -m &amp;apos;版本訊息&amp;apos;&lt;br&gt;git push heroku master&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;p&gt;本文主要介紹了如何將專案上傳至 Heroku ，因為不想讓讀者感受到太大的壓力，因此盡量用了最簡單的方式講解過程，如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React | 為了與 Hooks 相遇 - Function Components 升級記]]></title><description><![CDATA[前言 前幾天 React 釋出 16.8 版本的消息在各群組上傳得沸沸揚揚，理由是因為這一次的改版新增了 Hooks ，讓 Function Components 變得和以往不同！ 什麼是 Hooks ？ 在提到 Hooks 前，必須先理解 React 在 16.…]]></description><link>https://ms314006.github.io/react-hook-useState-useEffect/</link><guid isPermaLink="false">https://ms314006.github.io/react-hook-useState-useEffect/</guid><pubDate>Thu, 14 Feb 2019 05:33:38 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;前幾天 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 釋出 16.8 版本的消息在各群組上傳得沸沸揚揚，理由是因為這一次的改版新增了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; ，讓 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 變得和以往不同！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;什麼是 Hooks ？&lt;/h2&gt;
&lt;p&gt;在提到 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 前，必須先理解 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 在 16.8 版本前撰寫 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Component&lt;/code&gt; 的兩種方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;c14a&quot; class=&quot;ik il em at im b in jq ip jr ir js it jt iv ju ix jv jw jx&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; ：使用一般的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;function&lt;/code&gt; 來宣告，作為函式他接收 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;props&lt;/code&gt; 做參數，並回傳一個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;DOM&lt;/code&gt; 元素。&lt;/li&gt;&lt;li id=&quot;7cef&quot; class=&quot;ik il em at im b in jy ip jz ir ka it kb iv kc ix jv jw jx&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class Components&lt;/code&gt; ：使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;ES6&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class&lt;/code&gt; 語法糖創建一個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 下的子類別，也可藉由 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 內的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 函式回傳 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;DOM&lt;/code&gt; 元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本上兩種方式創建出來的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;DOM&lt;/code&gt; 沒有不同，差別在於 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class Components&lt;/code&gt; 擁有自身的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; （狀態）及 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Lifecycle&lt;/code&gt; （生命週期）。&lt;/p&gt;
&lt;p&gt;但記得嗎？就像我上方提到的，這是 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 在 16.8 版本前的事情了， &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 的出現，改變了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; ，讓他擁有專屬的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 和 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 來管理狀態及的生命週期。&lt;/p&gt;
&lt;h2&gt;Hooks 使用&lt;/h2&gt;
&lt;h3&gt;安裝/更新最新版本&lt;/h3&gt;
&lt;p&gt;首先將原有或新專案的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 版本升級為 16.8 版本，可透過以下指令安裝最新版本：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;97e5&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;npm install react&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;或者將原有版本升級：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;20d9&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;npm update react&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;升級後便可以在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;react&lt;/code&gt; 中使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 的新功能：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;ca1c&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;import React, { useState, useEffect } from &amp;apos;react&amp;apos;&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;h3&gt;管理 State&lt;/h3&gt;
&lt;p&gt;就如上所說，新版加入的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 可以為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 申裝 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 的功能，這個其中一個核心全都歸咎於 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在以往的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class Components&lt;/code&gt; 中管理 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; ，需在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;constructor&lt;/code&gt; 中做初始設置，之後便可使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;this.setState&lt;/code&gt; 更新 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 的內容，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;//設置 state&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            listName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;default value&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changeListName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;changeListName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;changeListName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//改變 state&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changeListName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 後的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 則以 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 進行管理， &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 版本：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//設置 state&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setListName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;default value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//改變 state&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changeListName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setListName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;changeListName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;兩種版本呈現的結果都一樣，差別在於設置及修改 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 的部分使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 創建，需要注意 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 是 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 專屬的功能，在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class Components&lt;/code&gt; 中無法使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;460b&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;const [listName, setListName] = useState(&amp;apos;default value&amp;apos;)&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 會回傳一個陣列，陣列中分別是「保管 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 值的變數（ &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;listName&lt;/code&gt; ）」和「更新 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 的函式（ &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;setListName&lt;/code&gt; ）」，因此在接收回傳的值時， &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 選擇使用了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;ES6&lt;/code&gt; 解構賦值的方式處理。&lt;/p&gt;
&lt;p&gt;如果使用一個變數去接收的話，則會變成：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;f38a&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;const listName = useState(&amp;apos;default&amp;apos;)&lt;/span&gt;&lt;span id=&quot;d8f3&quot; class=&quot;kd hy em at jb b fh kv kw kx ky kz ks r kt&quot;&gt;listName[0] //listName 的值&lt;/span&gt;&lt;span id=&quot;3c18&quot; class=&quot;kd hy em at jb b fh kv kw kx ky kz ks r kt&quot;&gt;listName[1] //上方的 setListName 函式&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 可以多次使用，也可各種型態設置 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; ，包含「物件」、「陣列」等等：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//string&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setListName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;default value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//object&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setList&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;預設事項&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//array&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTodoList&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;預設事項&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;預設事項2&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 時，不需以 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;this.state.listName&lt;/code&gt; 來取值，在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 中直接以 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;listName&lt;/code&gt; 就可以取到 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 值了。&lt;/p&gt;
&lt;p&gt;更新時也不必像 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;this.setState({listName:value})&lt;/code&gt; 使用物件做更新，因為每個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 都由一個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 創建，因此只需要直接把要更新的值給對應的更新函式處理，例如 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;setListName(value)&lt;/code&gt; 。&lt;/p&gt;
&lt;h3&gt;了解 Lifecycle&lt;/h3&gt;
&lt;p&gt;既然有了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; ，那當 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 改變時能不能同時執行些事件，當然！ &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 另一個核心功能 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; ，在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 中，可以利用它創建生命週期。&lt;/p&gt;
&lt;p&gt;在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class Components&lt;/code&gt; 中，有以下幾種方式可以在各個週期的時候執行額外的事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;0b08&quot; class=&quot;ik il em at im b in jq ip jr ir js it jt iv ju ix jv jw jx&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentDidMount&lt;/code&gt; ：在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;component&lt;/code&gt; 將 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;DOM&lt;/code&gt; 給 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 至畫面後執行。&lt;/li&gt;&lt;li id=&quot;4dab&quot; class=&quot;ik il em at im b in jy ip jz ir ka it kb iv kc ix jv jw jx&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentDidUpdate&lt;/code&gt; ：當 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;component&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 改變時執行。&lt;/li&gt;&lt;li id=&quot;1bb6&quot; class=&quot;ik il em at im b in jy ip jz ir ka it kb iv kc ix jv jw jx&quot;&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentWillUnmount&lt;/code&gt; ：當 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;component&lt;/code&gt; 被移除時執行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 裡只需要一個 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; ，就可以將三個願望一次滿足：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//設置 state&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setListName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;default value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//改變 state&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changeListName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setListName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//設置 lifecycle&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//componentDidMount 及 componentDidUpdate&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;更新後的 State &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;listName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//componentDidUpdate 及 componentWillUnmount&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;更新前的 State &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;listName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;changeListName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這裡可能會有許多人對 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 感到困惑，它到底是怎麼運作的？可以先看上方的執行結果後再接著解釋：&lt;/p&gt;
&lt;p&gt;在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Function Components&lt;/code&gt; 執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 後便會先執行一次 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/800/1*QukjCT6pg98Gy2TcG6gPcA.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x9996;&amp;#x6B21; render &amp;#x6642;&amp;#x57F7;&amp;#x884C;&amp;#x7684;&amp;#x751F;&amp;#x547D;&amp;#x9031;&amp;#x671F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;接著當 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 改變時會先執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 中 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;return&lt;/code&gt; 的內容後，再執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; ：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/812/1*6NNxs1cP237i17DYZW3y7Q.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;State &amp;#x6BCF;&amp;#x6B21;&amp;#x6539;&amp;#x8B8A;&amp;#x90FD;&amp;#x89F8;&amp;#x767C; useEffect&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;由上方的 gif 可以發現，當每一次改變 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 時都會執行兩次生命週期內的事件，先是執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;return&lt;/code&gt; ，再執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 內的。&lt;/p&gt;
&lt;p&gt;經過實測，可以把 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 分成三個部分：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2824/1*mdpEpDBXIUJKQniMOpf3iA.jpeg&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;Function Components &amp;#x7684;&amp;#x751F;&amp;#x547D;&amp;#x9031;&amp;#x671F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;ol&gt;
&lt;li id=&quot;0236&quot; class=&quot;ik il em at im b in jq ip jr ir js it jt iv ju ix jv jw jx&quot;&gt;橘色框框的內容為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentDidMount&lt;/code&gt; ，會在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 後執行。&lt;/li&gt;&lt;li id=&quot;7762&quot; class=&quot;ik il em at im b in jy ip jz ir ka it kb iv kc ix jv jw jx&quot;&gt;綠色框框的內容為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentWillUnmount&lt;/code&gt; ，會在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;components&lt;/code&gt; 移除時執行。&lt;/li&gt;&lt;li id=&quot;5c5d&quot; class=&quot;ik il em at im b in jy ip jz ir ka it kb iv kc ix jv jw jx&quot;&gt;紅色框框的內容為 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentDidUpdate&lt;/code&gt; ，會在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 改變時執行，執行順序為綠色框框到橘色框框。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是如果 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Component&lt;/code&gt; 中只需在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 後執行一次獲取資料的動作，該怎麼像 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Class Components&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentDidMount&lt;/code&gt; 一樣呢？&lt;/p&gt;
&lt;p&gt;其實 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 可以有第二個參數，只需要在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 的第二個參數中設置一個空陣列 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;[]&lt;/code&gt; ，且不需要加入 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;return&lt;/code&gt; 的函式，便可以讓 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 只在第一次的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 後執行，就如同 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;componentDidMount&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;b953&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;useEffect(()=&amp;gt;{&lt;br&gt;    console.log(`只執行第一次`)&lt;br&gt;},[])&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;&lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 的第二個參數不只是能傳空陣列，在陣列中可以設置一個以上的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 名稱，讓生命週期只觸發在特定的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;State&lt;/code&gt; 改變時：&lt;/p&gt;
&lt;pre&gt;&lt;span id=&quot;677d&quot; class=&quot;kd hy em at jb b fh kr ks r kt&quot;&gt;useEffect(()=&amp;gt;{&lt;br&gt;    console.log(`只執行第一次和 listName 改變的時候`)&lt;br&gt;},[listName])&lt;/span&gt;&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;也就是說，當 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;listName&lt;/code&gt; 的值為 ‘Default value’ ，而下一個值也是 ‘Default value’ 時，那 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 就不會被觸發，因為修改前後的值都相同，除非 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;listName&lt;/code&gt; 被更改為 ‘Default value’ 外的值。&lt;/p&gt;
&lt;p&gt;最後，筆者使用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 創建一個簡單的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;todolist&lt;/code&gt; ，當中包含了 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 及 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setListName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTodoList&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;預設事項&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTime&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; todoList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; todoList&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTodoList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; newKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; listName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setListName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;removeTodo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;listKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foundIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; todoList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; listKey
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        todoList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foundIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTodoList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; timer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tickTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;tickTime&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;listName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setListName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;新增&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;addTodo&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;todoList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;移除&apos;&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;removeTodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Todo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方以 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useState&lt;/code&gt; 設置 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;listName&lt;/code&gt; 管理待辦事項的名稱、 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;todoList&lt;/code&gt; 為事項內容、 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;setTodoList&lt;/code&gt; 用來新增/移除代辦事項，時間顯示則是用 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useEffect&lt;/code&gt; 在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Todo&lt;/code&gt; 第一次 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;render&lt;/code&gt; 的時候執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;setInterval&lt;/code&gt; 每秒更新，且會在移除 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;components&lt;/code&gt; 時執行 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;return&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;cleanInterval&lt;/code&gt; 來停止：&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/868/1*5GJkchsZZHquwU2smY8LmQ.gif&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;useState &amp;#x589E;&amp;#x52A0;/&amp;#x79FB;&amp;#x9664;&amp;#x4E8B;&amp;#x9805;&amp;#xFF0C;useEffect &amp;#x70BA;&amp;#x986F;&amp;#x793A;&amp;#x6642;&amp;#x9593;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;本文介紹了在 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;React&lt;/code&gt; 新版本中增加的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; 其中兩個功能，在閱讀官方文件的時候還有許多滿有趣的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; ，包括相似 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Redux&lt;/code&gt; 的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;useReducer&lt;/code&gt; 和自定義的 &lt;code class=&quot;hm iy iz ja jb b&quot;&gt;Hooks&lt;/code&gt; ，今後會再持續分享一些學習的過程。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;698b&quot; class=&quot;ik il em at im b in jq ip jr ir js it jt iv ju ix jv jw jx&quot;&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-state.html&quot; class=&quot;dj by li lj lk ll&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://reactjs.org/docs/hooks-state.html&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;f3bd&quot; class=&quot;ik il em at im b in jy ip jz ir ka it kb iv kc ix jv jw jx&quot;&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot; class=&quot;dj by li lj lk ll&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://reactjs.org/docs/hooks-effect.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[JavaScript | Fetch 讓 ES6 擁有一對翅膀-基礎教學]]></title><description><![CDATA[前言 「使用 Jquery 框架中的 Ajax 就能輕鬆做到了！」 莫約幾年前，在 ES6 已推出卻又還沒有普及的時候，如果有人提到：「如何用 JavaScript 向 server 請求資料？」，一定會有人這麼留言回答。 沒錯！ $.ajax…]]></description><link>https://ms314006.github.io/js-fetch/</link><guid isPermaLink="false">https://ms314006.github.io/js-fetch/</guid><pubDate>Wed, 06 Feb 2019 22:02:10 GMT</pubDate><content:encoded>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 26px; color: #696969; font-style:italic; line-height: 20px&quot;&gt;「使用 Jquery 框架中的 Ajax 就能輕鬆做到了！」&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;莫約幾年前，在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;ES6&lt;/code&gt; 已推出卻又還沒有普及的時候，如果有人提到：「如何用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 向 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;server&lt;/code&gt; 請求資料？」，一定會有人這麼留言回答。&lt;/p&gt;
&lt;p&gt;沒錯！ &lt;code class=&quot;hm jc jd je jf b&quot;&gt;$.ajax&lt;/code&gt; 幾乎是最簡單又容易上手的請求方式了，不只在底層做了許多處理，也不必再向原生 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 中又臭又長的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;XMLHttpRequest()&lt;/code&gt; 請求物件低頭，甚至還幫忙處理了同步執行的模式，使用起來就像這樣：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;get&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    url&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://httpbin.org/get&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起來很棒！對吧？但那都是幾年前了。&lt;/p&gt;
&lt;h2&gt;模組化（NPM &amp;#x26; Module）&lt;/h2&gt;
&lt;p&gt;近年前端工程在網頁上越來越吃重，投入前端框架的開發者（Developer）變多，讓以前一黨獨大的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JQuery&lt;/code&gt; 開始被多個許多小功能的框架給取代，因為 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JQuery&lt;/code&gt; 擁有太多網站中用不到的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;function&lt;/code&gt; ，但他們依然會被載入到網頁中。&lt;/p&gt;
&lt;p&gt;面臨上述供給大於需求的情況，許多人便紛紛選擇只擁有自己需要功能的小框架，減少在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Client&lt;/code&gt; 端載入過多多餘的程式碼。&lt;/p&gt;
&lt;p&gt;這些趨勢間接讓撰寫原生 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JavaScript&lt;/code&gt; 的人直線增長，從 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;ES6&lt;/code&gt; 開始出現的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 、 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Class&lt;/code&gt; 許多新原生的語法出現，終於有一天， &lt;code class=&quot;hm jc jd je jf b&quot;&gt;XMLHttpRequest()&lt;/code&gt; 請求開始走入歷史了（或是根本沒人認識他XD）…&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Fetch&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;ES6&lt;/code&gt; 的新語法，主要是搭配 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; （&lt;a class=&quot;dj by ka kb kc kd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/js-promise/&quot;&gt;Promise 的基本用法&lt;/a&gt;）來執行請求網站和請求後獲取 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Response&lt;/code&gt; 的處理方式。&lt;/p&gt;
&lt;p&gt;以下範例的請求都會從 &lt;a href=&quot;http://httpbin.org/&quot; class=&quot;dj by ka kb kc kd&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;httpbin.org&lt;/a&gt; 這個網站裡挑選，它提供了各種不同的請求方式，在練習時是個很棒的工具。&lt;/p&gt;
&lt;h3&gt;GET&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;hm jc jd je jf b&quot;&gt;GET&lt;/code&gt; 是請求中最基本的類型，在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 中預設的請求類型也是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;GET&lt;/code&gt; 用起來就像下方：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://httpbin.org/get&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//return response.text()&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;myJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myJson&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 接收了一個 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;url&lt;/code&gt; 作參數，並用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;then&lt;/code&gt; 接收此次請求的相關資訊：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/3212/1*pTxI2uirqpdNK6OGrYNGag.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x95DC;&amp;#x65BC;&amp;#x8A72;&amp;#x6B21;&amp;#x8ACB;&amp;#x6C42;&amp;#x7684; response &amp;#x5167;&amp;#x5BB9;&lt;/span&gt;
          &lt;/div&gt;
&lt;/div&gt;&lt;br&gt;
&lt;p&gt;資訊內包含了請求的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;url&lt;/code&gt; 和用來判斷請求是否成功的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;status&lt;/code&gt; 狀態等，在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;response&lt;/code&gt; 中有兩個內建函式可以用來得到請求回傳的資料。&lt;/p&gt;
&lt;p&gt;一個是上方 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;then&lt;/code&gt; 中 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;return&lt;/code&gt; 使用的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.json()&lt;/code&gt; ，能夠將回傳的資料以物件的方式傳給第二個 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;then&lt;/code&gt; 接收，另一個是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.text()&lt;/code&gt; ，當回傳的資料無法轉換為物件時，則會將請求資料以字串方式取出。&lt;/p&gt;
&lt;p&gt;下方為第二個 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.then&lt;/code&gt; 在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;console&lt;/code&gt; 中印出的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;myJson&lt;/code&gt; 內容，以及當使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.text()&lt;/code&gt; 時的資料模樣：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/4180/1*JCATZx8-PiPLkL6E7RFtsg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7528; .json() &amp;#x5C07; response &amp;#x7684;&amp;#x8ACB;&amp;#x6C42;&amp;#x8CC7;&amp;#x6599;&amp;#x53D6;&amp;#x51FA;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/4128/1*beHToJ0Jz8dORnpfcearxA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x7528; .text() &amp;#x5C07; response &amp;#x7684;&amp;#x8ACB;&amp;#x6C42;&amp;#x8CC7;&amp;#x6599;&amp;#x53D6;&amp;#x51FA;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;POST&lt;/h3&gt;
&lt;p&gt;與 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;GET&lt;/code&gt; 不同的是，使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;POST&lt;/code&gt; 請求時需另外在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;method&lt;/code&gt; 屬性內指定 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;POST&lt;/code&gt; 方式，且多了 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;body&lt;/code&gt; 屬性指定要送出的資料：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://httpbin.org/post&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    body&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GQSM&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;myJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myJson&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 在未指定請求方式的情況下都是使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;GET&lt;/code&gt; ，但是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;GET&lt;/code&gt; 本身無法在請求中藉由 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;body&lt;/code&gt; 送出資料，因此在有 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;body&lt;/code&gt; 屬性的狀態下，未替 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;method&lt;/code&gt; 指定為 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;POST&lt;/code&gt; 或其他可帶 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;body&lt;/code&gt; 的請求方式時，會出現以下錯誤：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/3580/1*uylPEmLS2Rx9M4BupxqzTQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x9810;&amp;#x8A2D;&amp;#x7684;&amp;#x8ACB;&amp;#x6C42;&amp;#x65B9;&amp;#x5F0F; GET &amp;#x7121;&amp;#x6CD5;&amp;#x6307;&amp;#x5B9A; body&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;需要注意的是， &lt;code class=&quot;hm jc jd je jf b&quot;&gt;body&lt;/code&gt; 內的資料需使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JSON.stringify&lt;/code&gt; 將物件轉換成字串型態，否則 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;server&lt;/code&gt; 端會無法正確取得資料，以下是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;data&lt;/code&gt; 送進 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;server&lt;/code&gt; 的差別：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2416/1*MzqoimOIofho6J2Mx0fDVA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x672A;&amp;#x4F7F;&amp;#x7528; JSON.stringify&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/2644/1*ygaq1njimK3iiqmw2IXY_Q.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4F7F;&amp;#x7528;&amp;#x4E86; JSON.stringify&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;未使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JSON.stringify&lt;/code&gt; 的請求會直接將物件強制轉為字串，變成 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;[object Object]&lt;/code&gt; 送至 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;server&lt;/code&gt; ，使用了正確轉換的請求在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;server&lt;/code&gt; 端則是能接收到正確的內容。&lt;/p&gt;
&lt;h3&gt;請求失敗&lt;/h3&gt;
&lt;p&gt;在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 中，請求失敗時不會有像 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;$.ajax&lt;/code&gt; 中有 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;error&lt;/code&gt; 可以直接捕捉，取而代之的是要以 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;response&lt;/code&gt; 的 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;status&lt;/code&gt; 的屬性值判斷，當 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;status&lt;/code&gt; 的值不等於 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;200&lt;/code&gt; 時，將在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.then&lt;/code&gt; 中使用 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;throw&lt;/code&gt; 創建一個錯誤，並由 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;.catch&lt;/code&gt; 接收錯誤內容處理：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://httpbin.org/status/500&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;myJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myJson&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;錯誤代碼為&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;本文介紹了 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 的基本用法及請求錯誤時的捕捉方式，雖然寫起來未必比 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;$ajax&lt;/code&gt; 還要簡單，但是從此以後也多了不需掛載 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;JQuery&lt;/code&gt; 轉為使用原生請求的選擇，唯一需要考量的是 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 和 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 在瀏覽器上的支援度還太低，當換到 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;IE&lt;/code&gt; 時便完全無法使用。&lt;/p&gt;
&lt;p&gt;不過就如前言所說的，目前投入前端框架的開發者有太多了，將來也會介紹筆者目前對處理請求使用的框架 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;axios&lt;/code&gt; ， &lt;code class=&quot;hm jc jd je jf b&quot;&gt;axios&lt;/code&gt; 的使用方式和 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Fetch&lt;/code&gt; 大同小異，在不考慮 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;Promise&lt;/code&gt; 的情況下，大幅度提高了瀏覽器的支援性，至少在 &lt;code class=&quot;hm jc jd je jf b&quot;&gt;IE11&lt;/code&gt; 上也變得能夠使用，有興趣可以先至 &lt;a href=&quot;https://github.com/axios/axios&quot; class=&quot;dj by ka kb kc kd&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;GitHub 上查看文檔&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果以上內容有任何問題，或是不理解的地方，都歡迎留言告訴我，謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;cf48&quot; class=&quot;in io em at iq b ir is it iu iv iw ix iy iz ja jb lc ld le&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch#Body&quot; class=&quot;dj by ka kb kc kd&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch#Body&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;b18f&quot; class=&quot;in io em at iq b ir lf it lg iv lh ix li iz lj jb lc ld le&quot;&gt;&lt;a href=&quot;https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/&quot; class=&quot;dj by ka kb kc kd&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Line Bot | 使用 Python 為 Line Bot 建立獨一無二的圖文選單（ Rich menus）]]></title><description><![CDATA[基本圖文選單創建 為 Line Bot 建立基本的圖文選單其實不難，在 Line 為每個開發者提供的管理介面（ Line Developers ）就有這個功能： 建立選單的介面也很簡易： Step1. 選擇圖文選單的版型，目前官方提供了七種樣式可供選擇：  Step…]]></description><link>https://ms314006.github.io/line-bot-rich-menus/</link><guid isPermaLink="false">https://ms314006.github.io/line-bot-rich-menus/</guid><pubDate>Tue, 29 Jan 2019 22:02:10 GMT</pubDate><content:encoded>&lt;h2&gt;基本圖文選單創建&lt;/h2&gt;
&lt;p&gt;為 Line Bot 建立基本的圖文選單其實不難，在 Line 為每個開發者提供的管理介面（ Line Developers ）就有這個功能：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/4724/1*eOBNCDoFusqKsSKtBc58iQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x53EF;&amp;#x5728; Line developers &amp;#x4E2D;&amp;#x81EA;&amp;#x884C;&amp;#x65B0;&amp;#x589E;&amp;#x5716;&amp;#x6587;&amp;#x9078;&amp;#x55AE;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;建立選單的介面也很簡易：&lt;/p&gt;
&lt;p&gt;Step1. 選擇圖文選單的版型，目前官方提供了七種樣式可供選擇：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/4436/1*tvxSpzSFD3i9Z3ubq8WbLw.png&quot; role=&quot;presentation&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Step2. 上傳圖文選單的圖片及點擊固定區域時所執行的事情，例如：發送訊息、跳轉連結等等：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/4456/1*O22Tur24UDXwJmoAO17jMw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4E0A;&amp;#x50B3;&amp;#x5716;&amp;#x6587;&amp;#x9078;&amp;#x55AE;&amp;#x7684;&amp;#x5716;&amp;#x7247;&amp;#x53CA;&amp;#x8A2D;&amp;#x5B9A;&amp;#x9EDE;&amp;#x64CA;&amp;#x6642;&amp;#x7684;&amp;#x4E8B;&amp;#x4EF6;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;上方兩個步驟完成後，便能得到一個標準的圖文選單：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/1356/1*EdB0ymbl61Knc2Nqan6jnw.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4F7F;&amp;#x7528;&amp;#x7248;&amp;#x578B;&amp;#x4E00;&amp;#x5275;&amp;#x5EFA;&amp;#x7684;&amp;#x7C21;&amp;#x6613;&amp;#x5716;&amp;#x6587;&amp;#x9078;&amp;#x55AE;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;儘管官方提供了簡易的後台操作、七種選單的版型，讓許多人都可以在短時間內建立一個符合自己需求的圖文選單，但是這終究無法滿足所有人。&lt;/p&gt;
&lt;h2&gt;建立 Rich menus&lt;/h2&gt;
&lt;p&gt;如上方所說，為了讓客戶在 Line Bot 上簡化操作，因此將功能置於圖文選單，透過點擊來完成事情是很重要的。&lt;/p&gt;
&lt;p&gt;像是在事件數量大於 6 個（官方提供的最多可設定事件數）的情況：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/1708/1*jC1I-30WGYM9tO4Tsx_aaQ.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x6B64;&amp;#x5716;&amp;#x6587;&amp;#x9078;&amp;#x55AE;&amp;#x7684;&amp;#x6309;&amp;#x9215;&amp;#x5340;&amp;#x584A;&amp;#x591A;&amp;#x9054;&amp;#x4E5D;&amp;#x500B;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;或是需要不規則的特殊排列（官方提供的版型都是固定切割的），官方範例：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/1376/1*fmCu9bxQNHf6tHNm_d_lew.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x4E0D;&amp;#x898F;&amp;#x5247;&amp;#x7684;&amp;#x6309;&amp;#x9215;&amp;#x64FA;&amp;#x653E;&amp;#x65B9;&amp;#x5F0F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;以上兩種圖文選單的類型（ Rich menus ），都無法以官方提供的介面實現，必須另外使用 API 處理。&lt;/p&gt;
&lt;p&gt;下方的範例會使用 &lt;code class=&quot;id jd je jf jg b&quot;&gt;Python&lt;/code&gt; 和他的線上編輯器 &lt;a href=&quot;https://jupyter.org/&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Jupyter&lt;/a&gt; ，再搭配 Line 提供的 API 套件 &lt;a href=&quot;https://github.com/line/line-bot-sdk-python&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;line-bot-sdk-python&lt;/a&gt; 實作。&lt;/p&gt;
&lt;h3&gt;新增 Rich menus&lt;/h3&gt;
&lt;p&gt;透過發送一個 &lt;code class=&quot;id jd je jf jg b&quot;&gt;request&lt;/code&gt; 請求到 &lt;a href=&quot;https://api.line.me/v2/bot/richmenu&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://api.line.me/v2/bot/richmenu&lt;/a&gt; 創建 Rich menus ，該次請求需要在 &lt;code class=&quot;id jd je jf jg b&quot;&gt;headers&lt;/code&gt; 中的 &lt;code class=&quot;id jd je jf jg b&quot;&gt;Authorization&lt;/code&gt; 屬性內帶上該 Line Bot 的 Token 值， &lt;code class=&quot;id jd je jf jg b&quot;&gt;body&lt;/code&gt; 內則是關於選單的設置，下方會再詳細說明 Token 該在哪取得及 &lt;code class=&quot;id jd je jf jg b&quot;&gt;body&lt;/code&gt; 的設定內容，整個請求的樣貌會像這樣：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; requests
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; json

headers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Bearer 3Ma92PMIfy790Z...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1686&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;selected&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Controller&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;chatBarText&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Controller&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;areas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;551&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;325&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;up&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;876&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;651&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;551&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;972&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;down&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;225&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;651&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1433&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;657&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;btn b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;bounds&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1907&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;657&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;367&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;btn a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

req &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://api.line.me/v2/bot/richmenu&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                       headers&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dumps&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;encode&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每個 Line Bot 的 Token 都可以在開發人員介面中找到：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/5720/1*Pb9G6Ujnp8lYfCLJ4Gfgig.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5982;&amp;#x679C;&amp;#x9019;&amp;#x88E1;&amp;#x9084;&amp;#x6C92;&amp;#x6709; Token &amp;#x53EF;&amp;#x4EE5;&amp;#x9EDE;&amp;#x9078; Issue &amp;#x7522;&amp;#x751F;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;body&lt;/code&gt; 是有關 Rich menus 的設置內容，他有以下幾個屬性：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;3705&quot; class=&quot;gy gz em at ha b hb io hd ip hf iq hh ir hj is hl ka kb kc&quot;&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;size&lt;/code&gt; ：目前寬度僅能設置 2500 ，高度有 843 或 1686 兩種選擇。&lt;/li&gt;&lt;li id=&quot;8fbc&quot; class=&quot;gy gz em at ha b hb kd hd ke hf kf hh kg hj kh hl ka kb kc&quot;&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;selected&lt;/code&gt; ：控制 Rich menus 是否預設開啟， &lt;code class=&quot;id jd je jf jg b&quot;&gt;true&lt;/code&gt; 及 &lt;code class=&quot;id jd je jf jg b&quot;&gt;false&lt;/code&gt; 請使用字串格式。&lt;/li&gt;&lt;li id=&quot;a5f8&quot; class=&quot;gy gz em at ha b hb kd hd ke hf kf hh kg hj kh hl ka kb kc&quot;&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;name&lt;/code&gt; ：為該 Rich menus 的名稱。&lt;/li&gt;&lt;li id=&quot;1ace&quot; class=&quot;gy gz em at ha b hb kd hd ke hf kf hh kg hj kh hl ka kb kc&quot;&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;chatBarText&lt;/code&gt; ：圖文選單下方的文字內容，點擊可開關選單，可以設置為「點我收合選單」。&lt;/li&gt;&lt;li id=&quot;0a40&quot; class=&quot;gy gz em at ha b hb kd hd ke hf kf hh kg hj kh hl ka kb kc&quot;&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;areas&lt;/code&gt; ：為一個陣列，內部的每個物件都是一個按鈕及點擊執行的事件的描述。物件內的第一個屬性 &lt;code class=&quot;id jd je jf jg b&quot;&gt;bounds&lt;/code&gt; 可以設置按鈕的位置座標及大小， &lt;code class=&quot;id jd je jf jg b&quot;&gt;action&lt;/code&gt; 屬性則是能夠控制點擊後發生的事件內容，目前設置的所有事件都是發送訊息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多事件可以參考&lt;a href=&quot;https://developers.line.biz/en/reference/messaging-api/#action-objects&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;官方文件&lt;/a&gt;，之後會再整理成另一篇文章說明。&lt;/p&gt;
&lt;p&gt;設定好 &lt;code class=&quot;id jd je jf jg b&quot;&gt;body&lt;/code&gt; 後還需要使用 &lt;code class=&quot;id jd je jf jg b&quot;&gt;json.dumps&lt;/code&gt; 將它轉換為字串，並依照 &lt;code class=&quot;id jd je jf jg b&quot;&gt;utf-8&lt;/code&gt; 編碼送出請求，請求成功後，會在 &lt;code class=&quot;id jd je jf jg b&quot;&gt;response&lt;/code&gt; 中顯示 Rich menus 的 id：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/4004/1*xKvnIapRwd4qnBeig5lIXA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x5EFA;&amp;#x7ACB;&amp;#x6210;&amp;#x529F;&amp;#x6703;&amp;#x56DE;&amp;#x50B3;&amp;#x8A72; Rich menus &amp;#x7684; id&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;注意！每個 Line Bot 都只能有 1000 個圖文選單，如果超過的話會回傳狀態 400 失敗。&lt;/p&gt;
&lt;h3&gt;設定 Rich menus 的圖片&lt;/h3&gt;
&lt;p&gt;此時便需要透過 &lt;a href=&quot;https://github.com/line/line-bot-sdk-python&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;line-bot-sdk-python&lt;/a&gt; 來將圖片掛上該圖文選單，記得在此步驟之前先在 &lt;code class=&quot;id jd je jf jg b&quot;&gt;pip&lt;/code&gt; 上下載該套件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; linebot &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    LineBotApi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; WebhookHandler
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

line_bot_api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LineBotApi&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;3Ma92PMIfy790Z...&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;control.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;rb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    line_bot_api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set_rich_menu_image&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;richmenu-762...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;LineBotApi&lt;/code&gt; 需傳入 Token 啟用， &lt;code class=&quot;id jd je jf jg b&quot;&gt;set&lt;em&gt;rich&lt;/em&gt;menu_image&lt;/code&gt; 的第一個參數為剛剛創建的 Rich menus 的 id ，執行成功後什麼都不會回傳，但錯誤時會出現訊息，例如已設置圖片的 Rich menus 無法重複設置。&lt;/p&gt;
&lt;p&gt;另外需要注意，圖片的大小需和該 Rich menus 的 &lt;code class=&quot;id jd je jf jg b&quot;&gt;size&lt;/code&gt; 一模一樣，如果一直上傳失敗可以試著調整圖片尺寸，這裡提供一個&lt;a href=&quot;https://blog.xuite.net/vexed/tech/65591105-%E7%B7%9A%E4%B8%8A%E8%AA%BF%E6%95%B4%E5%9C%96%E7%89%87%E5%A4%A7%E5%B0%8F&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;線上調整尺寸的工具&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;啟用 Rich menus&lt;/h3&gt;
&lt;p&gt;啟用 Rich menus 只要透過發送 &lt;code class=&quot;id jd je jf jg b&quot;&gt;request&lt;/code&gt; 就能完成：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; requests

headers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Bearer 3Ma92PMIfy790Z...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

req &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://api.line.me/v2/bot/user/all/richmenu/richmenu-7621...&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                       headers&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;id jd je jf jg b&quot;&gt;headers&lt;/code&gt; 的 &lt;code class=&quot;id jd je jf jg b&quot;&gt;Authorization&lt;/code&gt; 屬性帶上 Line Bot 的 Token 值， &lt;code class=&quot;id jd je jf jg b&quot;&gt;request&lt;/code&gt; 的 &lt;code class=&quot;id jd je jf jg b&quot;&gt;url&lt;/code&gt; 為 &lt;a href=&quot;https://api.line.me/v2/bot/user/all/richmenu/&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://api.line.me/v2/bot/user/all/richmenu/&lt;/a&gt; 再加上 Rich menus 的 id ，請求成功會回傳一個空物件：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/1868/1*DE_7ic6igPmVQx21ww_aAA.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x8ACB;&amp;#x6C42;&amp;#x6210;&amp;#x529F;&amp;#x6642;&amp;#x56DE;&amp;#x50B3;&amp;#x7A7A;&amp;#x7269;&amp;#x4EF6;&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;這時候再打開 Line Bot 的介面，就可以看到圖文選單的內容已經改變。&lt;/p&gt;
&lt;h3&gt;查看所有 Rich menus&lt;/h3&gt;
&lt;p&gt;只要透過 &lt;a href=&quot;https://github.com/line/line-bot-sdk-python&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;line-bot-sdk-python&lt;/a&gt; 提供的 &lt;code class=&quot;id jd je jf jg b&quot;&gt;get&lt;em&gt;rich&lt;/em&gt;menu_list&lt;/code&gt; 便能取得所有的 Rich menu 選單 id。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; linebot &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    LineBotApi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; WebhookHandler
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

line_bot_api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LineBotApi&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;3Ma92PMIfy790Z...&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

rich_menu_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; line_bot_api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_rich_menu_list&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; rich_menu &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; rich_menu_list&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rich_menu&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rich_menu_id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出結果：&lt;/p&gt;
&lt;div&gt;
&lt;img class=&quot;dz t u hz ak&quot; src=&quot;https://miro.medium.com/max/3040/1*FB4QljsbV4oZVWjdWivOIg.png&quot; role=&quot;presentation&quot;&gt;&lt;div style=&quot;display:flex; justify-content:center; font-size: 12px&quot;&gt;
            &lt;span&gt;&amp;#x53D6;&amp;#x5F97;&amp;#x8A72; Line Bot &amp;#x5167;&amp;#x6240;&amp;#x6709; Rich menus&lt;/span&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3&gt;刪除 Rich menus&lt;/h3&gt;
&lt;p&gt;要刪除某個 Rich menus 也很容易，只需要把該 Rich menus 的 id 傳進 &lt;code class=&quot;id jd je jf jg b&quot;&gt;delete&lt;em&gt;rich&lt;/em&gt;menu&lt;/code&gt; 中就行了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; linebot &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    LineBotApi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; WebhookHandler
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

line_bot_api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LineBotApi&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;3Ma92PMIfy790Z...&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

line_bot_api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;delete_rich_menu&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;richmenu-1b67...&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行後不會回傳任何值，可以再透過 &lt;code class=&quot;id jd je jf jg b&quot;&gt;get&lt;em&gt;rich&lt;/em&gt;menu_list&lt;/code&gt; 查看 Rich menus 是否已經刪除。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文是以官方文件上的說明為主，將它以 &lt;code class=&quot;id jd je jf jg b&quot;&gt;Python&lt;/code&gt; 實作，如果以上內容有任何問題，或是不理解的地方，都歡迎留言告訴我，謝謝大家！&lt;/p&gt;
&lt;p&gt;參考文章&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;234f&quot; class=&quot;gy gz em at ha b hb io hd ip hf iq hh ir hj is hl ka kb kc&quot;&gt;&lt;a href=&quot;https://developers.line.biz/en/docs/messaging-api/using-rich-menus/&quot; class=&quot;dj by jh ji jj jk&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://developers.line.biz/en/docs/messaging-api/using-rich-menus/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[React | React 與他的快樂小夥伴 Redux-事件處理（Handling events）]]></title><description><![CDATA[在上篇文章中，提到了 React 如何向 Redux 要求 store 中管理的資料，本篇會延續該篇文章內的程式碼接著說明，如果 React 要對資料進行異動，該怎麼做才好。 建立事件 其實建立事件並不難，首先在 Reducer 內部描述事件運作，再由 store…]]></description><link>https://ms314006.github.io/react-redux-dispatch/</link><guid isPermaLink="false">https://ms314006.github.io/react-redux-dispatch/</guid><pubDate>Thu, 10 Jan 2019 22:02:10 GMT</pubDate><content:encoded>&lt;p&gt;在&lt;a class=&quot;dj by il im in io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;/react-redux-state/&quot;&gt;上篇文章&lt;/a&gt;中，提到了 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;React&lt;/code&gt; 如何向 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Redux&lt;/code&gt; 要求 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;store&lt;/code&gt; 中管理的資料，本篇會延續該篇文章內的程式碼接著說明，如果 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;React&lt;/code&gt; 要對資料進行異動，該怎麼做才好。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;建立事件&lt;/h2&gt;
&lt;p&gt;其實建立事件並不難，首先在 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 內部描述事件運作，再由 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;store&lt;/code&gt; 的內部函式 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; 讓 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;store&lt;/code&gt; 觸發 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 執行，最後 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 會儲存最後改變的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 並將它回傳。&lt;/p&gt;
&lt;h3&gt;撰寫事件指令&lt;/h3&gt;
&lt;p&gt;在 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 內會根據 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;action.type&lt;/code&gt; 來判斷要做什麼事情，因此為新事件定義一個指令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CHANGE_NAME&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;CHANGE_NAME&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;雖然 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;ES6&lt;/code&gt; 新增了 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;const&lt;/code&gt; 來代表常式，但這裡指令還是用大寫，來代表不可變。&lt;/p&gt;
&lt;h3&gt;設定傳入 Reducer 的參數&lt;/h3&gt;
&lt;p&gt;上方提到 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 必須靠傳入 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;action.type&lt;/code&gt; 的參數來判斷要執行什麼動作，以及執行此動作的額外參數，因此在執行事件時，得先設定傳入 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 的物件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changeName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        type&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CHANGE_NAME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        payload&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
            name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name 
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm ip iq ir is b&quot;&gt;changeName&lt;/code&gt; 回傳一個物件，該物件有兩個 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;key&lt;/code&gt; 第一個 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;type&lt;/code&gt; 代表該執行的事件為何， 進入 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 時也會先判斷 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;type&lt;/code&gt; 的值， &lt;code class=&quot;hm ip iq ir is b&quot;&gt;payload&lt;/code&gt; 則是執行事件的額外參數，上方的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;name&lt;/code&gt; 就是在變更姓名這個事件執行時要傳入的參數。&lt;/p&gt;
&lt;h3&gt;在 Reducer 中描述事件&lt;/h3&gt;
&lt;p&gt;延續上篇的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; ，在 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;switch&lt;/code&gt; 中增加 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;case&lt;/code&gt; 條件判斷，用來描述當 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;action.type&lt;/code&gt; 的值等於 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;CHANGE_NAME&lt;/code&gt; 時該做的事情，而 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;payload&lt;/code&gt; 會裡有額外參數，放置了 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;name&lt;/code&gt; 代表要改變的值：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CHANGE_NAME&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
                &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name 
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這裡必須注意， &lt;code class=&quot;hm ip iq ir is b&quot;&gt;CHANGE_NAME&lt;/code&gt; 內回傳的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 並不是用原本的物件下去修改，而是用 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;ES6&lt;/code&gt; 的解構賦值回傳一個新物件（不熟悉 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;ES6&lt;/code&gt; 的話，物件和陣列分別可以用 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Object.assign()&lt;/code&gt; 及 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Array.concat()&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;會這麼做是因為 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 本身是一個純函數，所以藉由返回新的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 來確保舊 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 原有的樣子是很重要的事情，而且如果直接修改回傳舊 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 的資料到 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;React&lt;/code&gt; 中的話，會導致 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;React&lt;/code&gt; 無法判別 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 的變化，也就不會重新 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;render&lt;/code&gt; 畫面。&lt;/p&gt;
&lt;h3&gt;填寫需求單&lt;/h3&gt;
&lt;p&gt;就算是事件，如果要透過 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Provider&lt;/code&gt; 流進內部的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;component&lt;/code&gt; 中，那就要填寫需求單，而事件和請求資料的需求單也稍微不同：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;mapDispatchToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function-variable function&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;hm ip iq ir is b&quot;&gt;mapDispatchToProps&lt;/code&gt; 就是事件的需求單，本身擁有一個參數 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; ，是 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;store&lt;/code&gt; 的函式之一， &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; 會將傳入它的參數送往 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 中執行，而 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;mapDispatchToProps&lt;/code&gt; 本身會回傳一個物件，包括了該函式會以何種名稱流進 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;component&lt;/code&gt; 的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;props&lt;/code&gt; 中，以及使用 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; 觸發的對應函式產生的事件。&lt;/p&gt;
&lt;p&gt;例如上方傳入的函式 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;changeName&lt;/code&gt; 會回傳一個 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;type&lt;/code&gt; 為 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;CHANGE_NAME&lt;/code&gt; 的物件，而該物件會藉由 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; 送往 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 裡的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;actions&lt;/code&gt; 接著執行。&lt;/p&gt;
&lt;h3&gt;將事件加入 component&lt;/h3&gt;
&lt;p&gt;在 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;component&lt;/code&gt; 內增加一個 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;button&lt;/code&gt; ，並將上方 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;mapDispatchToProps&lt;/code&gt; 需求單內指定流入 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;props&lt;/code&gt; 的事件名稱置於它的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;onClick&lt;/code&gt; 中，並傳入要變更的參數 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;name&lt;/code&gt; 為 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Rex&lt;/code&gt; ，讓待會點擊按鈕時可觸發變動 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 中的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;name&lt;/code&gt; ，並重新 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;render&lt;/code&gt; 畫面。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConnectTitle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;changeName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Rex&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                    觸發事件
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;將 mapDispatchToProps 與 component 做連結&lt;/h3&gt;
&lt;p&gt;和 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;mapStateToProps&lt;/code&gt; 相同，透過 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;connect&lt;/code&gt; 函式處理需求單，不同的地方是 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;mapDispatchToProps&lt;/code&gt; 得放 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;connect&lt;/code&gt; 第二個參數的位置。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapStateToProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;mapDispatchToProps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ConnectTitle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後讓運行應用程式，確認執行結果：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1528/1*Q3l6NeVW_kN39iPqBIrqkQ.gif&quot; role=&quot;presentation&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;總結 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Redux&lt;/code&gt; 中觸發事件的生命週期如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;4d8b&quot; class=&quot;hx hy em at hz b ia ib ic id ie if ig ih ii ij ik kj kk kl&quot;&gt;以 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;store.dispatch()&lt;/code&gt; 觸發事件。&lt;/li&gt;&lt;li id=&quot;1be0&quot; class=&quot;hx hy em at hz b ia km ic kn ie ko ig kp ii kq ik kj kk kl&quot;&gt;&lt;code class=&quot;hm ip iq ir is b&quot;&gt;store&lt;/code&gt; 會執行 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; 的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;function&lt;/code&gt; 參數，並將 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;function&lt;/code&gt; 的回傳值送至 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;action&lt;/code&gt; 。&lt;/li&gt;&lt;li id=&quot;cce1&quot; class=&quot;hx hy em at hz b ia km ic kn ie ko ig kp ii kq ik kj kk kl&quot;&gt;&lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 會接收到 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispath&lt;/code&gt; 觸發它，並根據 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;action&lt;/code&gt; 的內容執行相對應的動作。&lt;/li&gt;&lt;li id=&quot;cc7f&quot; class=&quot;hx hy em at hz b ia km ic kn ie ko ig kp ii kq ik kj kk kl&quot;&gt;&lt;code class=&quot;hm ip iq ir is b&quot;&gt;store&lt;/code&gt; 會儲存 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 回傳的新 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;以上說明了如何在 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; 中描述事件執行，以及讓 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;React&lt;/code&gt; 的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;component&lt;/code&gt; 透過 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;store.dispatch()&lt;/code&gt; 去觸發 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Reducer&lt;/code&gt; ，最後得到新的 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;state&lt;/code&gt; 的過程。&lt;/p&gt;
&lt;p&gt;此篇可能會稍微複雜一點，但其實也不只有一種方式可以處理事件，也可以不透過 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;Provider&lt;/code&gt; 直接在 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;component&lt;/code&gt; 中使用 &lt;code class=&quot;hm ip iq ir is b&quot;&gt;dispatch&lt;/code&gt; 執行，這些也都會在後續的幾篇文章內提到。&lt;/p&gt;
&lt;p&gt;如果以上內容有任何問題，或是不理解的地方，都歡迎留言告訴我，謝謝大家！&lt;/p&gt;
&lt;p&gt;參考資料：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;2b11&quot; class=&quot;hx hy em at hz b ia ib ic id ie if ig ih ii ij ik kj kk kl&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/za_az/article/details/56483261&quot; class=&quot;dj by il im in io&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://blog.csdn.net/za_az/article/details/56483261&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;f6bc&quot; class=&quot;hx hy em at hz b ia km ic kn ie ko ig kp ii kq ik kj kk kl&quot;&gt;&lt;a href=&quot;https://chentsulin.github.io/redux/docs/basics/DataFlow.html&quot; class=&quot;dj by il im in io&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;https://chentsulin.github.io/redux/docs/basics/DataFlow.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[React | React 與他的快樂小夥伴 Redux-基礎教學]]></title><description><![CDATA[剛開始接觸 React 時就聽過 Redux ，雖然 Redux 對 React 並不是必要的，但既然這是個趨勢，相信也值得花時間好好了解。 在使用後，也能感受到 Redux 對專案帶來的好處： 既然 React 和 Redux…]]></description><link>https://ms314006.github.io/react-redux-state/</link><guid isPermaLink="false">https://ms314006.github.io/react-redux-state/</guid><pubDate>Mon, 07 Jan 2019 22:02:10 GMT</pubDate><content:encoded>&lt;p&gt;剛開始接觸 &lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 時就聽過 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; ，雖然 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 對 &lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 並不是必要的，但既然這是個趨勢，相信也值得花時間好好了解。&lt;/p&gt;
&lt;p&gt;在使用後，也能感受到 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 對專案帶來的好處：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&quot;272e&quot; class=&quot;hx hy em at hz b ia ib ic id ie if ig ih ii ij ik ip iq ir&quot;&gt;讓組件管理 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; 更方便，且確保整個專案的資料都來自同一個地方。&lt;/li&gt;&lt;li id=&quot;85b8&quot; class=&quot;hx hy em at hz b ia is ic it ie iu ig iv ii iw ik ip iq ir&quot;&gt;開發時能讓畫面及資料端分離，有關畫面的就修改 &lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 的 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; ，資料的部分就完全交給 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; ，每個人各司其職、分工合作。&lt;/li&gt;&lt;li id=&quot;c979&quot; class=&quot;hx hy em at hz b ia is ic it ie iu ig iv ii iw ik ip iq ir&quot;&gt;承上點，若是單人作業，也許會認為：「那我一個人，還有需要分開寫嗎？太麻煩了吧！」，不過就是因為一個人，將來維護時，如果發現問題就更不需要再花費時間，讓自己漫遊在一堆 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 、 &lt;code class=&quot;hm il im in io b&quot;&gt;fetch&lt;/code&gt; 或 &lt;code class=&quot;hm il im in io b&quot;&gt;ajax&lt;/code&gt; 的程式中尋找問題在哪裡，對吧？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然 &lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 和 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 兩者間可以這麼相處融洽，那不如就開始試試吧！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Redux 基本用法&lt;/h2&gt;
&lt;p&gt;在講解兩者如何配合前，還是得先了解 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 的運作模式，九把刀說過：「慢慢來，比較快。」，所以一步一步來走吧！&lt;/p&gt;
&lt;h3&gt;創建 Reducer&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 在 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 中是用來保管 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; ，以及在接收到不同的 &lt;code class=&quot;hm il im in io b&quot;&gt;action&lt;/code&gt; 指令時該對 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; 做什麼動作的函數。&lt;/p&gt;
&lt;p&gt;首先要為該 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 設計它所管理的 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; 架構：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; initState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;雖然在 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 中也可以改變 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; 的架構，但在 &lt;code class=&quot;hm il im in io b&quot;&gt;initState&lt;/code&gt; 中將資料架構清楚列出，還能讓接手的人或是兩個禮拜後的自己，一看就能知道這個 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 保管了哪些資料。&lt;/p&gt;
&lt;p&gt;現在有了初始資料，就可以使用它建立一個 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;reducer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每一個 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 都會有兩個參數，第一個參數會將初始的資料狀態 &lt;code class=&quot;hm il im in io b&quot;&gt;initState&lt;/code&gt; 交由 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 保管，第二個參數會傳入現在 &lt;code class=&quot;hm il im in io b&quot;&gt;reducer&lt;/code&gt; 要對 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; 做什麼動作的指令及額外的參數，這些在後幾篇會再講解，所以在還沒有任何 &lt;code class=&quot;hm il im in io b&quot;&gt;action&lt;/code&gt; 指令描述的 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 內，預設回傳了它所保管的 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; ，在這裡就是上方的 &lt;code class=&quot;hm il im in io b&quot;&gt;initState&lt;/code&gt; 。&lt;/p&gt;
&lt;h3&gt;創建 store&lt;/h3&gt;
&lt;p&gt;創建 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 後，還得將它交由 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; ， &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 的工作就是在應用程式中負責整合所有的 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;創建前，得先從 &lt;code class=&quot;hm il im in io b&quot;&gt;redux&lt;/code&gt; 中 &lt;code class=&quot;hm il im in io b&quot;&gt;import&lt;/code&gt; 進負責創建 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 的函式 &lt;code class=&quot;hm il im in io b&quot;&gt;createStore&lt;/code&gt; ，並將 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 傳入以創建一個 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createStore &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;redux&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//可使用 store 的內建函式 getState() 確認目前 store 內所保管的資料console.log(store.getState())  // {name: &apos;Jack&apos;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，每個專案都應該只能有一個 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 存在，若是有許多不同類型的資料，則是以 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 區分，最後將多個 &lt;code class=&quot;hm il im in io b&quot;&gt;Reducer&lt;/code&gt; 打包成一個後，再創建 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; ，這部分的使用方法，在日後的文章也會解說。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 產生後， &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 的前置準備部分就告一段落，接下來說明 &lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 的 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 該如何從 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 的 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 中取到資料。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;React-Redux 登場&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 需透過幾個步驟才能將 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 所保管的資料流向 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 。首先像需求單一樣，定義要從 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 中取得的資料，並將 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 與該需求單做連結，之後再利用 &lt;code class=&quot;hm il im in io b&quot;&gt;Provider&lt;/code&gt; 將 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 根據需求單將資料流進 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 中。以下開始實現這些步驟：&lt;/p&gt;
&lt;h3&gt;填寫需求單&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方創建一個函式 &lt;code class=&quot;hm il im in io b&quot;&gt;mapStateToProps&lt;/code&gt; ，並在該函式內部定義需要哪些資料，它有個參數 &lt;code class=&quot;hm il im in io b&quot;&gt;state&lt;/code&gt; ，在連接時 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 會將 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 傳進這個位置，因此上方指定了 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 中保管的 &lt;code class=&quot;hm il im in io b&quot;&gt;name&lt;/code&gt; 資料，並以 &lt;code class=&quot;hm il im in io b&quot;&gt;name&lt;/code&gt; 為 &lt;code class=&quot;hm il im in io b&quot;&gt;key&lt;/code&gt; 從 &lt;code class=&quot;hm il im in io b&quot;&gt;props&lt;/code&gt; 流進 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3&gt;創建組件&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConnectTitle&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因為待會會與 &lt;code class=&quot;hm il im in io b&quot;&gt;mapStateToProp&lt;/code&gt; 進行連結，所以在組件名稱前個人多註記了 &lt;code class=&quot;hm il im in io b&quot;&gt;Connect&lt;/code&gt; ，代表該 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 內含有從 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 中取的資料，而上方的 &lt;code class=&quot;hm il im in io b&quot;&gt;{this.props.name}&lt;/code&gt; 正是需求單上指定的名稱也就是 &lt;code class=&quot;hm il im in io b&quot;&gt;name&lt;/code&gt; 。&lt;/p&gt;
&lt;h3&gt;連結 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 與 &lt;code class=&quot;hm il im in io b&quot;&gt;mapStateToProps&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在這個步驟前得先從 &lt;code class=&quot;hm il im in io b&quot;&gt;react-redux&lt;/code&gt; 中 &lt;code class=&quot;hm il im in io b&quot;&gt;import&lt;/code&gt; 進 &lt;code class=&quot;hm il im in io b&quot;&gt;connect&lt;/code&gt; ，再進行連結：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; connect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mapStateToProps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ConnectTitle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;透過 &lt;code class=&quot;hm il im in io b&quot;&gt;connect&lt;/code&gt; 分別將 &lt;code class=&quot;hm il im in io b&quot;&gt;mapStateToProps&lt;/code&gt; 與 &lt;code class=&quot;hm il im in io b&quot;&gt;ConnectTitle&lt;/code&gt; 送進處理，會得到一個新的 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; ，在上方使用 &lt;code class=&quot;hm il im in io b&quot;&gt;Title&lt;/code&gt; 接收結果。&lt;/p&gt;
&lt;h3&gt;設置 Provider&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;hm il im in io b&quot;&gt;Provider&lt;/code&gt; 是 &lt;code class=&quot;hm il im in io b&quot;&gt;react-redux&lt;/code&gt; 中的組件，它會接收上方在 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 中創建的 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; ，並根據和 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 綁在一起的需求單 &lt;code class=&quot;hm il im in io b&quot;&gt;mapStateToProps&lt;/code&gt; 上要求的資料從 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 中取出，再透過 &lt;code class=&quot;hm il im in io b&quot;&gt;props&lt;/code&gt; 流向 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; connect&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Provider &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-redux&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom&apos;&lt;/span&gt;

ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Provider store&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Title &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的 &lt;code class=&quot;hm il im in io b&quot;&gt;Provider&lt;/code&gt; 在最外層，並為他指定了 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;注意！不論是多麼大的專案， &lt;code class=&quot;hm il im in io b&quot;&gt;Provider&lt;/code&gt; 永遠都在最外層，也永遠都只有一個，為了保持資料來源都是從 &lt;code class=&quot;hm il im in io b&quot;&gt;Provider&lt;/code&gt; 流進內部的 &lt;code class=&quot;hm il im in io b&quot;&gt;component&lt;/code&gt; ，這也是為什麼每個專案中 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 應該都只能有一個。&lt;/p&gt;
&lt;p&gt;接著運行應用程式，確認最後輸出的結果：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;dz t u hi ak&quot; src=&quot;https://miro.medium.com/max/1692/1*Vq1LNUT61QwoB0jtUbmxPw.png&quot; role=&quot;presentation&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文是關於 &lt;code class=&quot;hm il im in io b&quot;&gt;React&lt;/code&gt; 及 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 最基本的使用方式，筆者剛學的時候真的覺得很困難，也有很多觀念一直理不清楚，包括上面提到的 &lt;code class=&quot;hm il im in io b&quot;&gt;store&lt;/code&gt; 為什麼只能有一個，不過還好在三番兩次的實際操作後，不只更了解，而且像開頭說的，體會到使用 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 的好處後，對他就更愛不釋手，希望本篇文章能夠帶給和當初的我一樣，為學習 &lt;code class=&quot;hm il im in io b&quot;&gt;Redux&lt;/code&gt; 困擾的大家。&lt;/p&gt;
&lt;p&gt;如果文章中有任何問題，或是不理解的地方，都歡迎留言告訴我，謝謝大家！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript | 從Promise開始承諾的部落格生活]]></title><description><![CDATA[嗨！大家好我是神Q超人！先前一陣子經過友人介紹認識了這個網站，但是由於先前已經有用習慣分享文章的平台，就遲遲未到此處發文，一直到參與完該平台舉辦的鐵人賽後，休息了好一陣子，最後沒有得獎也是很失落，於是想說在新的一年讓自己有個新開始！請大家多多指教！ 認識 Promise…]]></description><link>https://ms314006.github.io/js-promise/</link><guid isPermaLink="false">https://ms314006.github.io/js-promise/</guid><pubDate>Tue, 01 Jan 2019 22:02:10 GMT</pubDate><content:encoded>&lt;p&gt;嗨！大家好我是神Q超人！先前一陣子經過友人介紹認識了這個網站，但是由於先前已經有用習慣分享文章的平台，就遲遲未到此處發文，一直到參與完該平台舉辦的鐵人賽後，休息了好一陣子，最後沒有得獎也是很失落，於是想說在新的一年讓自己有個新開始！請大家多多指教！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;認識 Promise&lt;/h2&gt;
&lt;p&gt;Promise 是在 ES6 出現的語法，主要是針對 JavaScript 中非同步的執行緒做同步處理，所以在此之前，先來認識一下非同步是什麼意思。&lt;/p&gt;
&lt;h3&gt;非同步&lt;/h3&gt;
&lt;p&gt;非同步處理方式會在不等待每一行的程式執行完成的狀態下不斷向下一行執行，例如：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;init&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  str&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上的程式區段會以下列的順序做執行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;宣告字串 &lt;code class=&quot;language-text&quot;&gt;str&lt;/code&gt;，並指派值為 &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;宣告方法 &lt;code class=&quot;language-text&quot;&gt;func&lt;/code&gt;，作用為改變字串 &lt;code class=&quot;language-text&quot;&gt;str&lt;/code&gt; 的值為 &lt;code class=&quot;language-text&quot;&gt;changed&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 在三秒後執行 &lt;code class=&quot;language-text&quot;&gt;func&lt;/code&gt; 改變 &lt;code class=&quot;language-text&quot;&gt;str&lt;/code&gt; 的值。&lt;/li&gt;
&lt;li&gt;在 console 中印出字串 &lt;code class=&quot;language-text&quot;&gt;str&lt;/code&gt; 的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關鍵就在上方的第 3 和第 4 步，在印出 &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; 時，程式並不會等到 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 執行完，而是 JacaScript 確認在第 3 步的 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 時，就會繼續向下執行程式，直到三秒後才回過頭執行 &lt;code class=&quot;language-text&quot;&gt;func&lt;/code&gt; 改變 &lt;code class=&quot;language-text&quot;&gt;str&lt;/code&gt; 的值。&lt;/p&gt;
&lt;p&gt;雖然使用非同步可以讓執行速度不會因為某一行程式而卡住整個頁面，但有時候還是得先利用 ajax 獲取資料，再繼續執行處理資料的程式碼。&lt;/p&gt;
&lt;p&gt;到這裡是不是有點熟悉？早在幾年前使用 JQuery 的 ajax 送出請求時就擁有了 async 這個屬性來處理這個狀況，當他被設定為 false 關閉非同步時，就得等 ajax 得到回應後，才會繼續執行下方的程式碼，就像下方例子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//使用 async 將 ajax 請求改為同步。&lt;/span&gt;
$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  url&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  async&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;    
    data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//data為statue&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但因現今前端工程在網頁中的份量越來越重的關係，需要處理同步處理的地方也越來越多， Promise 就這樣誕生了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Promise 基本用法&lt;/h2&gt;
&lt;p&gt;如上段所說， Promise 是用來處理同步的部分，再說明用法前先來用圖片簡單瞭解一下原理：&lt;/p&gt;
&lt;div&gt;
&lt;img style=&quot;width: 100%&quot; src=&quot;https://i.imgur.com/GG6Wxmt.png&quot;&gt;
&lt;div style=&quot;display:flex; justify-content:center&quot;&gt;
&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&amp;#x5716;&amp;#x7247;&amp;#x4F86;&amp;#x6E90;&amp;#xFF1A;https://developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;上圖為 Promise 的生命週期，每個 Promise 都會經過 pending 狀態，在 pending 後分別會有成功時走向的的 fulfill ，及失敗時的 reject ，並透過 &lt;code class=&quot;language-text&quot;&gt;.then()&lt;/code&gt; 在成功時接著處理資料，或是以 &lt;code class=&quot;language-text&quot;&gt;.catch()&lt;/code&gt; 做失敗時的應對，當然！不論是哪一條路，也可以再 return 一個新的 Promise 延續處理。&lt;/p&gt;
&lt;p&gt;現在，來實作一個基本的 Promise ：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的在 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 內加上了 &lt;code class=&quot;language-text&quot;&gt;Math.random()&lt;/code&gt; 取亂數（會回傳 0~1 之間的值），並藉由判斷該亂數是否大於 0.5 來模擬兩種情況，當大於時代表成功，小於時代表失敗，當然！ &lt;code class=&quot;language-text&quot;&gt;.catch&lt;/code&gt; 也和 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 相同，在沒有 Promise 內的 &lt;code class=&quot;language-text&quot;&gt;reject&lt;/code&gt; 呼叫下是不會執行的。&lt;/p&gt;
&lt;h2&gt;Promise 進階用法&lt;/h2&gt;
&lt;p&gt;經過基本用法，知道了 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 能夠在 Promise 中以 resolve 做同步的執行呼叫，但是 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 本身也可以擁有回傳值，並由下一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 做接收，繼續執行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &apos;changed&apos;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;last changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &apos;last changed&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 會接收上一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 的回傳值，並將它印出，但是需要注意的是，這種多個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 的用法，並不適用於同步執行，也就是說只要脫離了 Promise 就會回到非同步，例如以下例子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; newData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;last changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;changed&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方例子在第一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 中使用 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 在 2 秒後改變 &lt;code class=&quot;language-text&quot;&gt;newData&lt;/code&gt; 的值並將他回傳，但執行後會發現，在第二個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 中出現在 console 上的還是舊值，並不會等到 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 執行完後才接著下一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另外我們可以回傳另一個 Promise，來解決上方的問題：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lastPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;last changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; lastPromise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lastData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; lastData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;last changed&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在第一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 的回傳了 &lt;code class=&quot;language-text&quot;&gt;lastPromise&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 回傳的內容，也就是 &lt;code class=&quot;language-text&quot;&gt;last changed&lt;/code&gt;，因此最後一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 接收到的 &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; 也會是 &lt;code class=&quot;language-text&quot;&gt;last changed&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上方例子也有需要注意的地方，那就是每個 Promise 都會有自己的生命週期，所以在 &lt;code class=&quot;language-text&quot;&gt;lastPromise&lt;/code&gt; 被建構出來的時候，就會開始進行 &lt;code class=&quot;language-text&quot;&gt;pending&lt;/code&gt; ，不會等到 &lt;code class=&quot;language-text&quot;&gt;newPromise&lt;/code&gt; 的第一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 要求回傳資料時才開始執行 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 的 2 秒，因此上方程式的總執行時間並不會是兩個 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt; 加起來的時間 5 秒，而是 3 秒，因為記得我說過嗎？在 Promise 外，都是非同步的，所以兩個 Promise 在建構後的 &lt;code class=&quot;language-text&quot;&gt;pending&lt;/code&gt; 是非同步的。&lt;/p&gt;
&lt;p&gt;如果需要將兩個 Promise 的執行也變成同步，那只需將上方的 &lt;code class=&quot;language-text&quot;&gt;lastPromise&lt;/code&gt; 置於 &lt;code class=&quot;language-text&quot;&gt;newPromise&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 中就行了，如此一來就會變成 3 秒加上 2 秒的同步執行了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;changed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 第二個Promise&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;last &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;data&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lastData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; lastData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;last changed&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此一來只有在進入 &lt;code class=&quot;language-text&quot;&gt;newPromise&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 時，才會去新建構另一個 Promise 並利用他的 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; 回傳了一個新值，等到新建構的 Promise 生命週期結束後，才會執行 &lt;code class=&quot;language-text&quot;&gt;newPromise&lt;/code&gt; 最後一個 &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt;，不過這種方式會累加執行的時間，這是他需要注意的地方。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上是本篇對 Promise 的介紹，如果文章中有任何問題，或是不理解的地方，都可以留言告訴我！謝謝大家！&lt;/p&gt;</content:encoded></item></channel></rss>